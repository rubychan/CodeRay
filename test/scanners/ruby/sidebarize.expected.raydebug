doctype(#!/usr/bin/env ruby)
comment(# Sidebarize is a quite simple converter, like a lot others.)
comment(# But in one way Sidebarize is special: it converts)
comment(# feeds into HTML-pages suitable for sidebars in Gecko-browsers.)

comment(# import support for all kinds of feeds)
ident(require) string<delimiter(')content(rss/0.9)delimiter(')>
ident(require) string<delimiter(')content(rss/1.0)delimiter(')>
ident(require) string<delimiter(')content(rss/2.0)delimiter(')>
comment(# import support for encodings)
ident(require) string<delimiter(')content(iconv)delimiter(')>
comment(# import support for CGI)
ident(require) string<delimiter(')content(cgi)delimiter(')>
comment(# import support for getting files from URLs)
ident(require) string<delimiter(')content(net/http)delimiter(')>
ident(require) string<delimiter(')content(uri)delimiter(')>

constant(Version) operator(=) string<delimiter(')content(0.0.9)delimiter(')>

constant(Header) operator(=) string<delimiter(%q()content(<!DOCTYPE html PUBLIC 
	"-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>%s Sidebar</title>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
        <link rel="stylesheet" type="text/css" href="sidebarize.css" />
    </head>

    <body>
        <p>%s</p>)delimiter(\))>

constant(Footer) operator(=) string<delimiter(%q()content(        <p>
            <img src="fourpiece32.png" width="32" height="32" class="logo" />
            generated by Sidebarize %s
        </p>
    </body>
</html>)delimiter(\))>

constant(Entry) operator(=) string<delimiter(%q()content(        <div>
            <img src="arrow.png" width="6" height="11" />
            <a href="%s">%s</a>
        </div>)delimiter(\))>

reserved(class) class(FeedConverter)
    reserved(def) method(initialize)
        instance_variable(@xml_source) operator(=) string<delimiter(')delimiter(')>
        instance_variable(@feed_data) operator(=) operator([)operator(])
        instance_variable(@feed_version) operator(=) string<delimiter(')delimiter(')>
        instance_variable(@feed_description) operator(=) string<delimiter(')delimiter(')>
    reserved(end)
    
    reserved(def) method(from_file)operator(()ident(filename)operator(\))
        ident(f) operator(=) constant(File)operator(::)ident(open)operator(()ident(filename)operator(\))
        instance_variable(@xml_source) operator(=) ident(f)operator(.)ident(read)
        ident(f)operator(.)ident(close)
    reserved(end)
    
    reserved(def) method(from_url)operator(()ident(url)operator(\))
        instance_variable(@xml_source) operator(=) constant(Net)operator(::)constant(HTTP)operator(.)ident(get)operator(()constant(URI)operator(.)ident(parse)operator(()ident(url)operator(\))operator(\))
    reserved(end)
    
    reserved(def) method(parse)
        ident(feed) operator(=) constant(RSS)operator(::)constant(Parser)operator(.)ident(parse)operator(()instance_variable(@xml_source)operator(\))
        instance_variable(@feed_description) operator(=) ident(feed)operator(.)ident(channel)operator(.)ident(description)
        instance_variable(@feed_name) operator(=) ident(feed)operator(.)ident(channel)operator(.)ident(title)
        
    
        ident(feed)operator(.)ident(items)operator(.)ident(each) reserved(do) operator(|)ident(item)operator(|)
            ident(item_data) operator(=) operator({)operator(})
            ident(item_data)operator([)string<delimiter(')content(title)delimiter(')>operator(]) operator(=) ident(item)operator(.)ident(title)
            ident(item_data)operator([)string<delimiter(')content(link)delimiter(')>operator(]) operator(=) ident(item)operator(.)ident(link)
            instance_variable(@feed_data) operator(<<) ident(item_data)
        reserved(end)
    reserved(end)
    
    comment(# Output HTML from the internal data structure)
    reserved(def) method(to_html)
        comment(# header)
        ident(puts) constant(Header) operator(%) operator([)ident(convert_entity)operator(()instance_variable(@feed_name)operator(\))operator(,) ident(convert_entity)operator(()instance_variable(@feed_description)operator(\))operator(])
        
        comment(# the entries)
        instance_variable(@feed_data)operator(.)ident(each) reserved(do) operator(|)ident(item)operator(|)
            ident(puts) constant(Entry) operator(%) operator([)ident(item)operator([)string<delimiter(')content(link)delimiter(')>operator(])operator(,) ident(convert_entity)operator(()ident(item)operator([)string<delimiter(')content(title)delimiter(')>operator(])operator(\))operator(])
        reserved(end)
    
        comment(# footer)
        ident(print) constant(Footer) operator(%) constant(Version)
    reserved(end)
reserved(end)

comment(# Converts entities)
comment(# uses code by murphy extended with iconv conversion)
reserved(def) method(convert_entity)operator(()ident(text)operator(\))
    ident(text) operator(=) constant(Iconv)operator(.)ident(new)operator(()string<delimiter(')content(iso-8859-15)delimiter(')>operator(,) string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(.)ident(iconv)operator(()ident(text)operator(\)) 
    
    ident(feed) operator(=) ident(text)operator(.)ident(inspect)operator([)integer(1)operator(...)integer(-1)operator(])

    ident(feed)operator(.)ident(gsub!)operator(()regexp<delimiter(/)char(\\\\)content(([0-7]+\)|(.\))delimiter(/)modifier(m)>operator(\)) reserved(do)
        reserved(if) global_variable($2)
            global_variable($&)
        reserved(else)
            string<delimiter(')content(&#%s;)delimiter(')> operator(%) global_variable($1)operator(.)ident(to_i)operator(()integer(8)operator(\))operator(.)ident(to_s)operator(()integer(10)operator(\))
        reserved(end)
    reserved(end)
    
    ident(feed)operator(.)ident(gsub!)operator(()string<delimiter(')content(\\")delimiter(')>operator(,) string<delimiter(')content(&quot;)delimiter(')>operator(\))

    reserved(return) ident(feed)
reserved(end)

comment(# Starter)
reserved(def) method(main)
    ident(fc) operator(=) constant(FeedConverter)operator(.)ident(new)
    ident(cgi) operator(=) constant(CGI)operator(.)ident(new)
    reserved(if) ident(cgi)operator(.)ident(has_key?) string<delimiter(')content(url)delimiter(')>
        comment(# yeah, the user pointed us to an URL)
        ident(fc)operator(.)ident(from_url)operator(()ident(cgi)operator([)string<delimiter(')content(url)delimiter(')>operator(])operator(\))
        comment(#fc.from_file('sd.xml'\))
        comment(#fc.from_file('sbarize_design.html'\))
        
        reserved(begin)
            comment(# try to parse it and to generate HTML)
            ident(fc)operator(.)ident(parse)
            
            ident(puts) string<delimiter(')content(Content-Type: text/html)delimiter(')>
            ident(puts)
            ident(fc)operator(.)ident(to_html)
        reserved(rescue)
            comment(# parsing failed so show an error message)
            ident(puts) string<delimiter(')content(Content-Type: text/html)delimiter(')>
            ident(puts)
            ident(puts) constant(Header) operator(%) operator([)string<delimiter(')content(No)delimiter(')>operator(,) string<delimiter(')content(The specified feed is not valid.)delimiter(')>operator(])
            ident(puts) constant(Footer) operator(%) constant(Version)
        reserved(end)
    reserved(else)
        comment(# no, we've got no URL, generate error message)
        ident(puts) string<delimiter(')content(Content-Type: text/plain)delimiter(')>
        ident(puts)
        ident(puts) constant(Header) operator(%) operator([)string<delimiter(')content(No)delimiter(')>operator(,) string<delimiter(')content(You have to set the url=http://domain.tld/path/feed.xml to your feed.)delimiter(')>operator(])
        ident(puts) constant(Footer) operator(%) constant(Version)
    reserved(end)
reserved(end)

ident(main) reserved(if) pre_constant(__FILE__) operator(==) global_variable($0)