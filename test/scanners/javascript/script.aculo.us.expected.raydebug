comment(// Place your application-specific JavaScript functions and classes here)
comment(// This file is automatically included by javascript_include_tag :defaults)
comment(// Copyright (c\) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us\))
comment(//           (c\) 2005-2007 Ivan Krstic (http://blogs.law.harvard.edu/ivan\))
comment(//           (c\) 2005-2007 Jon Tirsen (http://www.tirsen.com\))
comment(// Contributors:)
comment(//  Richard Livsey)
comment(//  Rahul Bhargava)
comment(//  Rob Wills)
comment(// )
comment(// script.aculo.us is freely distributable under the terms of an MIT-style license.)
comment(// For details, see the script.aculo.us web site: http://script.aculo.us/)

comment(// Autocompleter.Base handles all the autocompletion functionality )
comment(// that's independent of the data source for autocompletion. This)
comment(// includes drawing the autocompletion menu, observing keyboard)
comment(// and mouse events, and similar.)
comment(//)
comment(// Specific autocompleters need to provide, at the very least, )
comment(// a getUpdatedChoices function that will be invoked every time)
comment(// the text inside the monitored textbox changes. This method )
comment(// should get the text for which to provide autocompletion by)
comment(// invoking this.getToken(\), NOT by directly accessing)
comment(// this.element.value. This is to allow incremental tokenized)
comment(// autocompletion. Specific auto-completion logic (AJAX, etc\))
comment(// belongs in getUpdatedChoices.)
comment(//)
comment(// Tokenized incremental autocompletion is enabled automatically)
comment(// when an autocompleter is instantiated with the 'tokens' option)
comment(// in the options parameter, e.g.:)
comment(// new Ajax.Autocompleter('id','upd', '/url/', { tokens: ',' }\);)
comment(// will incrementally autocomplete with a comma as the token.)
comment(// Additionally, ',' in the above example can be replaced with)
comment(// a token array, e.g. { tokens: [',', '\\n'] } which)
comment(// enables autocompletion on multiple tokens. This is most )
comment(// useful when one of the tokens is \\n (a newline\), as it )
comment(// allows smart autocompletion after linebreaks.)

keyword(if)operator(()keyword(typeof) ident(Effect) operator(==) string<delimiter(')content(undefined)delimiter(')>operator(\))
  keyword(throw)operator(()string<delimiter(")content(controls.js requires including script.aculo.us' effects.js library)delimiter(")>operator(\))operator(;)

keyword(var) ident(Autocompleter) operator(=) operator({) operator(})
ident(Autocompleter)operator(.)ident(Base) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(baseInitialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(update)operator(,) ident(options)operator(\)) operator({)
    ident(element)          operator(=) predefined($)operator(()ident(element)operator(\))
    local_variable(this)operator(.)ident(element)     operator(=) ident(element)operator(;) 
    local_variable(this)operator(.)ident(update)      operator(=) predefined($)operator(()ident(update)operator(\))operator(;)  
    local_variable(this)operator(.)ident(hasFocus)    operator(=) keyword(false)operator(;) 
    local_variable(this)operator(.)ident(changed)     operator(=) keyword(false)operator(;) 
    local_variable(this)operator(.)ident(active)      operator(=) keyword(false)operator(;) 
    local_variable(this)operator(.)ident(index)       operator(=) integer(0)operator(;)     
    local_variable(this)operator(.)ident(entryCount)  operator(=) integer(0)operator(;)
    local_variable(this)operator(.)ident(oldElementValue) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(;)

    keyword(if)operator(()local_variable(this)operator(.)ident(setOptions)operator(\))
      local_variable(this)operator(.)ident(setOptions)operator(()ident(options)operator(\))operator(;)
    keyword(else)
      local_variable(this)operator(.)ident(options) operator(=) ident(options) operator(||) operator({) operator(})operator(;)

    local_variable(this)operator(.)ident(options)operator(.)ident(paramName)    operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(paramName) operator(||) local_variable(this)operator(.)ident(element)operator(.)ident(name)operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(tokens)       operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(tokens) operator(||) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(frequency)    operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(frequency) operator(||) float(0.4)operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(minChars)     operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(minChars) operator(||) integer(1)operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(onShow)       operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(onShow) operator(||) 
      keyword(function)operator(()ident(element)operator(,) ident(update)operator(\))operator({) 
        keyword(if)operator((!)ident(update)operator(.)ident(style)operator(.)ident(position) operator(||) ident(update)operator(.)ident(style)operator(.)ident(position)operator(==)string<delimiter(')content(absolute)delimiter(')>operator(\)) operator({)
          ident(update)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(absolute)delimiter(')>operator(;)
          ident(Position)operator(.)ident(clone)operator(()ident(element)operator(,) ident(update)operator(,) operator({)
            key(setHeight)operator(:) keyword(false)operator(,) 
            key(offsetTop)operator(:) ident(element)operator(.)ident(offsetHeight)
          operator(}\))operator(;)
        operator(})
        ident(Effect)operator(.)ident(Appear)operator(()ident(update)operator(,{)key(duration)operator(:)float(0.15)operator(}\))operator(;)
      operator(})operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(onHide) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(onHide) operator(||) 
      keyword(function)operator(()ident(element)operator(,) ident(update)operator(\))operator({) keyword(new) ident(Effect)operator(.)ident(Fade)operator(()ident(update)operator(,{)key(duration)operator(:)float(0.15)operator(}\)) operator(})operator(;)

    keyword(if)operator(()keyword(typeof)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator(\)) operator(==) string<delimiter(')content(string)delimiter(')>operator(\)) 
      local_variable(this)operator(.)ident(options)operator(.)ident(tokens) operator(=) keyword(new) ident(Array)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator(\))operator(;)
    comment(// Force carriage returns as token delimiters anyway)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator(.)ident(include)operator(()string<delimiter(')content(\\n)delimiter(')>operator(\)\))
      local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator(.)ident(push)operator(()string<delimiter(')content(\\n)delimiter(')>operator(\))operator(;)

    local_variable(this)operator(.)ident(observer) operator(=) keyword(null)operator(;)
    
    local_variable(this)operator(.)ident(element)operator(.)ident(setAttribute)operator(()string<delimiter(')content(autocomplete)delimiter(')>operator(,)string<delimiter(')content(off)delimiter(')>operator(\))operator(;)

    ident(Element)operator(.)ident(hide)operator(()local_variable(this)operator(.)ident(update)operator(\))operator(;)

    ident(Event)operator(.)ident(observe)operator(()local_variable(this)operator(.)ident(element)operator(,) string<delimiter(')content(blur)delimiter(')>operator(,) local_variable(this)operator(.)ident(onBlur)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\)\))operator(;)
    ident(Event)operator(.)ident(observe)operator(()local_variable(this)operator(.)ident(element)operator(,) string<delimiter(')content(keydown)delimiter(')>operator(,) local_variable(this)operator(.)ident(onKeyPress)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)

  key(show)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(update)operator(,) string<delimiter(')content(display)delimiter(')>operator(\))operator(==)string<delimiter(')content(none)delimiter(')>operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(onShow)operator(()local_variable(this)operator(.)ident(element)operator(,) local_variable(this)operator(.)ident(update)operator(\))operator(;)
    keyword(if)operator((!)local_variable(this)operator(.)ident(iefix) operator(&&) 
      operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator(&&)
      operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(update)operator(,) string<delimiter(')content(position)delimiter(')>operator(\))operator(==)string<delimiter(')content(absolute)delimiter(')>operator(\)\)) operator({)
      keyword(new) ident(Insertion)operator(.)ident(After)operator(()local_variable(this)operator(.)ident(update)operator(,) 
       string<delimiter(')content(<iframe id=")delimiter(')> operator(+) local_variable(this)operator(.)ident(update)operator(.)ident(id) operator(+) string<delimiter(')content(_iefix" )delimiter(')>operator(+)
       string<delimiter(')content(style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0\);" )delimiter(')> operator(+)
       string<delimiter(')content(src="javascript:false;" frameborder="0" scrolling="no"></iframe>)delimiter(')>operator(\))operator(;)
      local_variable(this)operator(.)ident(iefix) operator(=) predefined($)operator(()local_variable(this)operator(.)ident(update)operator(.)ident(id)operator(+)string<delimiter(')content(_iefix)delimiter(')>operator(\))operator(;)
    operator(})
    keyword(if)operator(()local_variable(this)operator(.)ident(iefix)operator(\)) ident(setTimeout)operator(()local_variable(this)operator(.)ident(fixIEOverlapping)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) integer(50)operator(\))operator(;)
  operator(})operator(,)
  
  key(fixIEOverlapping)operator(:) keyword(function)operator(()operator(\)) operator({)
    ident(Position)operator(.)ident(clone)operator(()local_variable(this)operator(.)ident(update)operator(,) local_variable(this)operator(.)ident(iefix)operator(,) operator({)key(setTop)operator(:(!)local_variable(this)operator(.)ident(update)operator(.)ident(style)operator(.)ident(height)operator(\)}\))operator(;)
    local_variable(this)operator(.)ident(iefix)operator(.)ident(style)operator(.)ident(zIndex) operator(=) integer(1)operator(;)
    local_variable(this)operator(.)ident(update)operator(.)ident(style)operator(.)ident(zIndex) operator(=) integer(2)operator(;)
    ident(Element)operator(.)ident(show)operator(()local_variable(this)operator(.)ident(iefix)operator(\))operator(;)
  operator(})operator(,)

  key(hide)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(stopIndicator)operator(()operator(\))operator(;)
    keyword(if)operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(update)operator(,) string<delimiter(')content(display)delimiter(')>operator(\))operator(!=)string<delimiter(')content(none)delimiter(')>operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(onHide)operator(()local_variable(this)operator(.)ident(element)operator(,) local_variable(this)operator(.)ident(update)operator(\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(iefix)operator(\)) ident(Element)operator(.)ident(hide)operator(()local_variable(this)operator(.)ident(iefix)operator(\))operator(;)
  operator(})operator(,)

  key(startIndicator)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(indicator)operator(\)) ident(Element)operator(.)ident(show)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(indicator)operator(\))operator(;)
  operator(})operator(,)

  key(stopIndicator)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(indicator)operator(\)) ident(Element)operator(.)ident(hide)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(indicator)operator(\))operator(;)
  operator(})operator(,)

  key(onKeyPress)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(active)operator(\))
      keyword(switch)operator(()ident(event)operator(.)ident(keyCode)operator(\)) operator({)
       keyword(case) ident(Event)operator(.)ident(KEY_TAB)operator(:)
       keyword(case) ident(Event)operator(.)ident(KEY_RETURN)operator(:)
         local_variable(this)operator(.)ident(selectEntry)operator(()operator(\))operator(;)
         ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
       keyword(case) ident(Event)operator(.)ident(KEY_ESC)operator(:)
         local_variable(this)operator(.)ident(hide)operator(()operator(\))operator(;)
         local_variable(this)operator(.)ident(active) operator(=) keyword(false)operator(;)
         ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
         keyword(return)operator(;)
       keyword(case) ident(Event)operator(.)ident(KEY_LEFT)operator(:)
       keyword(case) ident(Event)operator(.)ident(KEY_RIGHT)operator(:)
         keyword(return)operator(;)
       keyword(case) ident(Event)operator(.)ident(KEY_UP)operator(:)
         local_variable(this)operator(.)ident(markPrevious)operator(()operator(\))operator(;)
         local_variable(this)operator(.)ident(render)operator(()operator(\))operator(;)
         ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
         keyword(return)operator(;)
       keyword(case) ident(Event)operator(.)ident(KEY_DOWN)operator(:)
         local_variable(this)operator(.)ident(markNext)operator(()operator(\))operator(;)
         local_variable(this)operator(.)ident(render)operator(()operator(\))operator(;)
         ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
         keyword(return)operator(;)
      operator(})
     keyword(else) 
       keyword(if)operator(()ident(event)operator(.)ident(keyCode)operator(==)ident(Event)operator(.)ident(KEY_TAB) operator(||) ident(event)operator(.)ident(keyCode)operator(==)ident(Event)operator(.)ident(KEY_RETURN) operator(||) 
         operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit) operator(>) integer(0) operator(&&) ident(event)operator(.)ident(keyCode) operator(==) integer(0)operator(\)\)) keyword(return)operator(;)

    local_variable(this)operator(.)ident(changed) operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(hasFocus) operator(=) keyword(true)operator(;)

    keyword(if)operator(()local_variable(this)operator(.)ident(observer)operator(\)) ident(clearTimeout)operator(()local_variable(this)operator(.)ident(observer)operator(\))operator(;)
      local_variable(this)operator(.)ident(observer) operator(=) 
        ident(setTimeout)operator(()local_variable(this)operator(.)ident(onObserverEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(frequency)operator(*)integer(1000)operator(\))operator(;)
  operator(})operator(,)

  key(activate)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(changed) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(hasFocus) operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(getUpdatedChoices)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(onHover)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(var) ident(element) operator(=) ident(Event)operator(.)ident(findElement)operator(()ident(event)operator(,) string<delimiter(')content(LI)delimiter(')>operator(\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(index) operator(!=) ident(element)operator(.)ident(autocompleteIndex)operator(\)) 
    operator({)
        local_variable(this)operator(.)ident(index) operator(=) ident(element)operator(.)ident(autocompleteIndex)operator(;)
        local_variable(this)operator(.)ident(render)operator(()operator(\))operator(;)
    operator(})
    ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(onClick)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(var) ident(element) operator(=) ident(Event)operator(.)ident(findElement)operator(()ident(event)operator(,) string<delimiter(')content(LI)delimiter(')>operator(\))operator(;)
    local_variable(this)operator(.)ident(index) operator(=) ident(element)operator(.)ident(autocompleteIndex)operator(;)
    local_variable(this)operator(.)ident(selectEntry)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(hide)operator(()operator(\))operator(;)
  operator(})operator(,)
  
  key(onBlur)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    comment(// needed to make click events working)
    ident(setTimeout)operator(()local_variable(this)operator(.)ident(hide)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) integer(250)operator(\))operator(;)
    local_variable(this)operator(.)ident(hasFocus) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(active) operator(=) keyword(false)operator(;)     
  operator(})operator(,) 
  
  key(render)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(entryCount) operator(>) integer(0)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) local_variable(this)operator(.)ident(entryCount)operator(;) ident(i)operator(++)operator(\))
        local_variable(this)operator(.)ident(index)operator(==)ident(i) operator(?) 
          ident(Element)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(getEntry)operator(()ident(i)operator(\))operator(,)string<delimiter(")content(selected)delimiter(")>operator(\)) operator(:) 
          ident(Element)operator(.)ident(removeClassName)operator(()local_variable(this)operator(.)ident(getEntry)operator(()ident(i)operator(\))operator(,)string<delimiter(")content(selected)delimiter(")>operator(\))operator(;)
      keyword(if)operator(()local_variable(this)operator(.)ident(hasFocus)operator(\)) operator({) 
        local_variable(this)operator(.)ident(show)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(active) operator(=) keyword(true)operator(;)
      operator(})
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(active) operator(=) keyword(false)operator(;)
      local_variable(this)operator(.)ident(hide)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,)
  
  key(markPrevious)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(index) operator(>) integer(0)operator(\)) local_variable(this)operator(.)ident(index)operator(--)
      keyword(else) local_variable(this)operator(.)ident(index) operator(=) local_variable(this)operator(.)ident(entryCount)operator(-)integer(1)operator(;)
    local_variable(this)operator(.)ident(getEntry)operator(()local_variable(this)operator(.)ident(index)operator(\))operator(.)ident(scrollIntoView)operator(()keyword(true)operator(\))operator(;)
  operator(})operator(,)
  
  key(markNext)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(index) operator(<) local_variable(this)operator(.)ident(entryCount)operator(-)integer(1)operator(\)) local_variable(this)operator(.)ident(index)operator(++)
      keyword(else) local_variable(this)operator(.)ident(index) operator(=) integer(0)operator(;)
    local_variable(this)operator(.)ident(getEntry)operator(()local_variable(this)operator(.)ident(index)operator(\))operator(.)ident(scrollIntoView)operator(()keyword(false)operator(\))operator(;)
  operator(})operator(,)
  
  key(getEntry)operator(:) keyword(function)operator(()ident(index)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(update)operator(.)ident(firstChild)operator(.)ident(childNodes)operator([)ident(index)operator(])operator(;)
  operator(})operator(,)
  
  key(getCurrentEntry)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(getEntry)operator(()local_variable(this)operator(.)ident(index)operator(\))operator(;)
  operator(})operator(,)
  
  key(selectEntry)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(active) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(updateElement)operator(()local_variable(this)operator(.)ident(getCurrentEntry)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  key(updateElement)operator(:) keyword(function)operator(()ident(selectedElement)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(updateElement)operator(\)) operator({)
      local_variable(this)operator(.)ident(options)operator(.)ident(updateElement)operator(()ident(selectedElement)operator(\))operator(;)
      keyword(return)operator(;)
    operator(})
    keyword(var) ident(value) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(select)operator(\)) operator({)
      keyword(var) ident(nodes) operator(=) predefined($)operator(()ident(selectedElement)operator(\))operator(.)ident(select)operator(()string<delimiter(')content(.)delimiter(')> operator(+) local_variable(this)operator(.)ident(options)operator(.)ident(select)operator(\)) operator(||) operator([)operator(])operator(;)
      keyword(if)operator(()ident(nodes)operator(.)ident(length)operator(>)integer(0)operator(\)) ident(value) operator(=) ident(Element)operator(.)ident(collectTextNodes)operator(()ident(nodes)operator([)integer(0)operator(])operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(select)operator(\))operator(;)
    operator(}) keyword(else)
      ident(value) operator(=) ident(Element)operator(.)ident(collectTextNodesIgnoreClass)operator(()ident(selectedElement)operator(,) string<delimiter(')content(informal)delimiter(')>operator(\))operator(;)
    
    keyword(var) ident(bounds) operator(=) local_variable(this)operator(.)ident(getTokenBounds)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(bounds)operator([)integer(0)operator(]) operator(!=) operator(-)integer(1)operator(\)) operator({)
      keyword(var) ident(newValue) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(.)ident(substr)operator(()integer(0)operator(,) ident(bounds)operator([)integer(0)operator(]\))operator(;)
      keyword(var) ident(whitespace) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(.)ident(substr)operator(()ident(bounds)operator([)integer(0)operator(]\))operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\s)content(+)delimiter(/)>operator(\))operator(;)
      keyword(if) operator(()ident(whitespace)operator(\))
        ident(newValue) operator(+=) ident(whitespace)operator([)integer(0)operator(])operator(;)
      local_variable(this)operator(.)ident(element)operator(.)ident(value) operator(=) ident(newValue) operator(+) ident(value) operator(+) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(.)ident(substr)operator(()ident(bounds)operator([)integer(1)operator(]\))operator(;)
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(element)operator(.)ident(value) operator(=) ident(value)operator(;)
    operator(})
    local_variable(this)operator(.)ident(oldElementValue) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(focus)operator(()operator(\))operator(;)
    
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(afterUpdateElement)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(afterUpdateElement)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(selectedElement)operator(\))operator(;)
  operator(})operator(,)

  key(updateChoices)operator(:) keyword(function)operator(()ident(choices)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(changed) operator(&&) local_variable(this)operator(.)ident(hasFocus)operator(\)) operator({)
      local_variable(this)operator(.)ident(update)operator(.)ident(innerHTML) operator(=) ident(choices)operator(;)
      ident(Element)operator(.)ident(cleanWhitespace)operator(()local_variable(this)operator(.)ident(update)operator(\))operator(;)
      ident(Element)operator(.)ident(cleanWhitespace)operator(()local_variable(this)operator(.)ident(update)operator(.)ident(down)operator(()operator(\)\))operator(;)

      keyword(if)operator(()local_variable(this)operator(.)ident(update)operator(.)ident(firstChild) operator(&&) local_variable(this)operator(.)ident(update)operator(.)ident(down)operator(()operator(\))operator(.)ident(childNodes)operator(\)) operator({)
        local_variable(this)operator(.)ident(entryCount) operator(=) 
          local_variable(this)operator(.)ident(update)operator(.)ident(down)operator(()operator(\))operator(.)ident(childNodes)operator(.)ident(length)operator(;)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) local_variable(this)operator(.)ident(entryCount)operator(;) ident(i)operator(++)operator(\)) operator({)
          keyword(var) ident(entry) operator(=) local_variable(this)operator(.)ident(getEntry)operator(()ident(i)operator(\))operator(;)
          ident(entry)operator(.)ident(autocompleteIndex) operator(=) ident(i)operator(;)
          local_variable(this)operator(.)ident(addObservers)operator(()ident(entry)operator(\))operator(;)
        operator(})
      operator(}) keyword(else) operator({) 
        local_variable(this)operator(.)ident(entryCount) operator(=) integer(0)operator(;)
      operator(})

      local_variable(this)operator(.)ident(stopIndicator)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(index) operator(=) integer(0)operator(;)
      
      keyword(if)operator(()local_variable(this)operator(.)ident(entryCount)operator(==)integer(1) operator(&&) local_variable(this)operator(.)ident(options)operator(.)ident(autoSelect)operator(\)) operator({)
        local_variable(this)operator(.)ident(selectEntry)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(hide)operator(()operator(\))operator(;)
      operator(}) keyword(else) operator({)
        local_variable(this)operator(.)ident(render)operator(()operator(\))operator(;)
      operator(})
    operator(})
  operator(})operator(,)

  key(addObservers)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(")content(mouseover)delimiter(")>operator(,) local_variable(this)operator(.)ident(onHover)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\)\))operator(;)
    ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(")content(click)delimiter(")>operator(,) local_variable(this)operator(.)ident(onClick)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)

  key(onObserverEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(changed) operator(=) keyword(false)operator(;)   
    local_variable(this)operator(.)ident(tokenBounds) operator(=) keyword(null)operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(getToken)operator(()operator(\))operator(.)ident(length)operator(>=)local_variable(this)operator(.)ident(options)operator(.)ident(minChars)operator(\)) operator({)
      local_variable(this)operator(.)ident(getUpdatedChoices)operator(()operator(\))operator(;)
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(active) operator(=) keyword(false)operator(;)
      local_variable(this)operator(.)ident(hide)operator(()operator(\))operator(;)
    operator(})
    local_variable(this)operator(.)ident(oldElementValue) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(;)
  operator(})operator(,)

  key(getToken)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(bounds) operator(=) local_variable(this)operator(.)ident(getTokenBounds)operator(()operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(.)ident(substring)operator(()ident(bounds)operator([)integer(0)operator(])operator(,) ident(bounds)operator([)integer(1)operator(]\))operator(.)ident(strip)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(getTokenBounds)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()keyword(null) operator(!=) local_variable(this)operator(.)ident(tokenBounds)operator(\)) keyword(return) local_variable(this)operator(.)ident(tokenBounds)operator(;)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(value)operator(;)
    keyword(if) operator(()ident(value)operator(.)ident(strip)operator(()operator(\))operator(.)ident(empty)operator(()operator(\)\)) keyword(return) operator([-)integer(1)operator(,) integer(0)operator(])operator(;)
    keyword(var) ident(diff) operator(=) local_variable(arguments)operator(.)ident(callee)operator(.)ident(getFirstDifferencePos)operator(()ident(value)operator(,) local_variable(this)operator(.)ident(oldElementValue)operator(\))operator(;)
    keyword(var) ident(offset) operator(=) operator(()ident(diff) operator(==) local_variable(this)operator(.)ident(oldElementValue)operator(.)ident(length) operator(?) integer(1) operator(:) integer(0)operator(\))operator(;)
    keyword(var) ident(prevTokenPos) operator(=) operator(-)integer(1)operator(,) ident(nextTokenPos) operator(=) ident(value)operator(.)ident(length)operator(;)
    keyword(var) ident(tp)operator(;)
    keyword(for) operator(()keyword(var) ident(index) operator(=) integer(0)operator(,) ident(l) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator(.)ident(length)operator(;) ident(index) operator(<) ident(l)operator(;) operator(++)ident(index)operator(\)) operator({)
      ident(tp) operator(=) ident(value)operator(.)ident(lastIndexOf)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator([)ident(index)operator(])operator(,) ident(diff) operator(+) ident(offset) operator(-) integer(1)operator(\))operator(;)
      keyword(if) operator(()ident(tp) operator(>) ident(prevTokenPos)operator(\)) ident(prevTokenPos) operator(=) ident(tp)operator(;)
      ident(tp) operator(=) ident(value)operator(.)ident(indexOf)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(tokens)operator([)ident(index)operator(])operator(,) ident(diff) operator(+) ident(offset)operator(\))operator(;)
      keyword(if) operator((-)integer(1) operator(!=) ident(tp) operator(&&) ident(tp) operator(<) ident(nextTokenPos)operator(\)) ident(nextTokenPos) operator(=) ident(tp)operator(;)
    operator(})
    keyword(return) operator(()local_variable(this)operator(.)ident(tokenBounds) operator(=) operator([)ident(prevTokenPos) operator(+) integer(1)operator(,) ident(nextTokenPos)operator(]\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Autocompleter)operator(.)ident(Base)operator(.)ident(prototype)operator(.)ident(getTokenBounds)operator(.)ident(getFirstDifferencePos) operator(=) keyword(function)operator(()ident(newS)operator(,) ident(oldS)operator(\)) operator({)
  keyword(var) ident(boundary) operator(=) ident(Math)operator(.)ident(min)operator(()ident(newS)operator(.)ident(length)operator(,) ident(oldS)operator(.)ident(length)operator(\))operator(;)
  keyword(for) operator(()keyword(var) ident(index) operator(=) integer(0)operator(;) ident(index) operator(<) ident(boundary)operator(;) operator(++)ident(index)operator(\))
    keyword(if) operator(()ident(newS)operator([)ident(index)operator(]) operator(!=) ident(oldS)operator([)ident(index)operator(]\))
      keyword(return) ident(index)operator(;)
  keyword(return) ident(boundary)operator(;)
operator(})operator(;)

ident(Ajax)operator(.)ident(Autocompleter) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Autocompleter)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(update)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(baseInitialize)operator(()ident(element)operator(,) ident(update)operator(,) ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous)  operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(onComplete)    operator(=) local_variable(this)operator(.)ident(onComplete)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(defaultParams) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(||) keyword(null)operator(;)
    local_variable(this)operator(.)ident(url)                   operator(=) ident(url)operator(;)
  operator(})operator(,)

  key(getUpdatedChoices)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(startIndicator)operator(()operator(\))operator(;)
    
    keyword(var) ident(entry) operator(=) ident(encodeURIComponent)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(paramName)operator(\)) operator(+) string<delimiter(')content(=)delimiter(')> operator(+) 
      ident(encodeURIComponent)operator(()local_variable(this)operator(.)ident(getToken)operator(()operator(\)\))operator(;)

    local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(callback) operator(?)
      local_variable(this)operator(.)ident(options)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(entry)operator(\)) operator(:) ident(entry)operator(;)

    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(defaultParams)operator(\)) 
      local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(+=) string<delimiter(')content(&)delimiter(')> operator(+) local_variable(this)operator(.)ident(options)operator(.)ident(defaultParams)operator(;)
    
    keyword(new) ident(Ajax)operator(.)ident(Request)operator(()local_variable(this)operator(.)ident(url)operator(,) local_variable(this)operator(.)ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(onComplete)operator(:) keyword(function)operator(()ident(request)operator(\)) operator({)
    local_variable(this)operator(.)ident(updateChoices)operator(()ident(request)operator(.)ident(responseText)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

comment(// The local array autocompleter. Used when you'd prefer to)
comment(// inject an array of autocompletion options into the page, rather)
comment(// than sending out Ajax queries, which can be quite slow sometimes.)
comment(//)
comment(// The constructor takes four parameters. The first two are, as usual,)
comment(// the id of the monitored textbox, and id of the autocompletion menu.)
comment(// The third is the array you want to autocomplete from, and the fourth)
comment(// is the options block.)
comment(//)
comment(// Extra local autocompletion options:)
comment(// - choices - How many autocompletion choices to offer)
comment(//)
comment(// - partialSearch - If false, the autocompleter will match entered)
comment(//                    text only at the beginning of strings in the )
comment(//                    autocomplete array. Defaults to true, which will)
comment(//                    match text at the beginning of any *word* in the)
comment(//                    strings in the autocomplete array. If you want to)
comment(//                    search anywhere in the string, additionally set)
comment(//                    the option fullSearch to true (default: off\).)
comment(//)
comment(// - fullSsearch - Search anywhere in autocomplete array strings.)
comment(//)
comment(// - partialChars - How many characters to enter before triggering)
comment(//                   a partial match (unlike minChars, which defines)
comment(//                   how many characters are required to do any match)
comment(//                   at all\). Defaults to 2.)
comment(//)
comment(// - ignoreCase - Whether to ignore case when autocompleting.)
comment(//                 Defaults to true.)
comment(//)
comment(// It's possible to pass in a custom function as the 'selector' )
comment(// option, if you prefer to write your own autocompletion logic.)
comment(// In that case, the other options above will not apply unless)
comment(// you support them.)

ident(Autocompleter)operator(.)ident(Local) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Autocompleter)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(update)operator(,) ident(array)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(baseInitialize)operator(()ident(element)operator(,) ident(update)operator(,) ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(options)operator(.)ident(array) operator(=) ident(array)operator(;)
  operator(})operator(,)

  key(getUpdatedChoices)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(updateChoices)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(selector)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)

  key(setOptions)operator(:) keyword(function)operator(()ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(choices)operator(:) integer(10)operator(,)
      key(partialSearch)operator(:) keyword(true)operator(,)
      key(partialChars)operator(:) integer(2)operator(,)
      key(ignoreCase)operator(:) keyword(true)operator(,)
      key(fullSearch)operator(:) keyword(false)operator(,)
      key(selector)operator(:) keyword(function)operator(()ident(instance)operator(\)) operator({)
        keyword(var) ident(ret)       operator(=) operator([)operator(])operator(;) comment(// Beginning matches)
        keyword(var) ident(partial)   operator(=) operator([)operator(])operator(;) comment(// Inside matches)
        keyword(var) ident(entry)     operator(=) ident(instance)operator(.)ident(getToken)operator(()operator(\))operator(;)
        keyword(var) ident(count)     operator(=) integer(0)operator(;)

        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) ident(instance)operator(.)ident(options)operator(.)ident(array)operator(.)ident(length) operator(&&)  
          ident(ret)operator(.)ident(length) operator(<) ident(instance)operator(.)ident(options)operator(.)ident(choices) operator(;) ident(i)operator(++)operator(\)) operator({) 

          keyword(var) ident(elem) operator(=) ident(instance)operator(.)ident(options)operator(.)ident(array)operator([)ident(i)operator(])operator(;)
          keyword(var) ident(foundPos) operator(=) ident(instance)operator(.)ident(options)operator(.)ident(ignoreCase) operator(?) 
            ident(elem)operator(.)ident(toLowerCase)operator(()operator(\))operator(.)ident(indexOf)operator(()ident(entry)operator(.)ident(toLowerCase)operator(()operator(\)\)) operator(:) 
            ident(elem)operator(.)ident(indexOf)operator(()ident(entry)operator(\))operator(;)

          keyword(while) operator(()ident(foundPos) operator(!=) operator(-)integer(1)operator(\)) operator({)
            keyword(if) operator(()ident(foundPos) operator(==) integer(0) operator(&&) ident(elem)operator(.)ident(length) operator(!=) ident(entry)operator(.)ident(length)operator(\)) operator({) 
              ident(ret)operator(.)ident(push)operator(()string<delimiter(")content(<li><strong>)delimiter(")> operator(+) ident(elem)operator(.)ident(substr)operator(()integer(0)operator(,) ident(entry)operator(.)ident(length)operator(\)) operator(+) string<delimiter(")content(</strong>)delimiter(")> operator(+) 
                ident(elem)operator(.)ident(substr)operator(()ident(entry)operator(.)ident(length)operator(\)) operator(+) string<delimiter(")content(</li>)delimiter(")>operator(\))operator(;)
              keyword(break)operator(;)
            operator(}) keyword(else) keyword(if) operator(()ident(entry)operator(.)ident(length) operator(>=) ident(instance)operator(.)ident(options)operator(.)ident(partialChars) operator(&&) 
              ident(instance)operator(.)ident(options)operator(.)ident(partialSearch) operator(&&) ident(foundPos) operator(!=) operator(-)integer(1)operator(\)) operator({)
              keyword(if) operator(()ident(instance)operator(.)ident(options)operator(.)ident(fullSearch) operator(||) regexp<delimiter(/)char(\\s)delimiter(/)>operator(.)ident(test)operator(()ident(elem)operator(.)ident(substr)operator(()ident(foundPos)operator(-)integer(1)operator(,)integer(1)operator(\)\)\)) operator({)
                ident(partial)operator(.)ident(push)operator(()string<delimiter(")content(<li>)delimiter(")> operator(+) ident(elem)operator(.)ident(substr)operator(()integer(0)operator(,) ident(foundPos)operator(\)) operator(+) string<delimiter(")content(<strong>)delimiter(")> operator(+)
                  ident(elem)operator(.)ident(substr)operator(()ident(foundPos)operator(,) ident(entry)operator(.)ident(length)operator(\)) operator(+) string<delimiter(")content(</strong>)delimiter(")> operator(+) ident(elem)operator(.)ident(substr)operator(()
                  ident(foundPos) operator(+) ident(entry)operator(.)ident(length)operator(\)) operator(+) string<delimiter(")content(</li>)delimiter(")>operator(\))operator(;)
                keyword(break)operator(;)
              operator(})
            operator(})

            ident(foundPos) operator(=) ident(instance)operator(.)ident(options)operator(.)ident(ignoreCase) operator(?) 
              ident(elem)operator(.)ident(toLowerCase)operator(()operator(\))operator(.)ident(indexOf)operator(()ident(entry)operator(.)ident(toLowerCase)operator(()operator(\))operator(,) ident(foundPos) operator(+) integer(1)operator(\)) operator(:) 
              ident(elem)operator(.)ident(indexOf)operator(()ident(entry)operator(,) ident(foundPos) operator(+) integer(1)operator(\))operator(;)

          operator(})
        operator(})
        keyword(if) operator(()ident(partial)operator(.)ident(length)operator(\))
          ident(ret) operator(=) ident(ret)operator(.)ident(concat)operator(()ident(partial)operator(.)ident(slice)operator(()integer(0)operator(,) ident(instance)operator(.)ident(options)operator(.)ident(choices) operator(-) ident(ret)operator(.)ident(length)operator(\)\))
        keyword(return) string<delimiter(")content(<ul>)delimiter(")> operator(+) ident(ret)operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\)) operator(+) string<delimiter(")content(</ul>)delimiter(")>operator(;)
      operator(})
    operator(})operator(,) ident(options) operator(||) operator({) operator(}\))operator(;)
  operator(})
operator(}\))operator(;)

comment(// AJAX in-place editor and collection editor)
comment(// Full rewrite by Christophe Porteneuve <tdd@tddsworld.com> (April 2007\).)

comment(// Use this if you notice weird scrolling problems on some browsers,)
comment(// the DOM might be a bit confused when this gets called so do this)
comment(// waits 1 ms (with setTimeout\) until it does the activation)
ident(Field)operator(.)ident(scrollFreeActivate) operator(=) keyword(function)operator(()ident(field)operator(\)) operator({)
  ident(setTimeout)operator(()keyword(function)operator(()operator(\)) operator({)
    ident(Field)operator(.)ident(activate)operator(()ident(field)operator(\))operator(;)
  operator(})operator(,) integer(1)operator(\))operator(;)
operator(})

ident(Ajax)operator(.)ident(InPlaceEditor) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(url) operator(=) ident(url)operator(;)
    local_variable(this)operator(.)ident(element) operator(=) ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(prepareOptions)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(_controls) operator(=) operator({) operator(})operator(;)
    local_variable(arguments)operator(.)ident(callee)operator(.)ident(dealWithDeprecatedOptions)operator(()ident(options)operator(\))operator(;) comment(// DEPRECATION LAYER!!!)
    ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(,) ident(options) operator(||) operator({) operator(}\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(formId) operator(&&) local_variable(this)operator(.)ident(element)operator(.)ident(id)operator(\)) operator({)
      local_variable(this)operator(.)ident(options)operator(.)ident(formId) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(id) operator(+) string<delimiter(')content(-inplaceeditor)delimiter(')>operator(;)
      keyword(if) operator(()predefined($)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(formId)operator(\)\))
        local_variable(this)operator(.)ident(options)operator(.)ident(formId) operator(=) string<delimiter(')delimiter(')>operator(;)
    operator(})
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(externalControl) operator(=) predefined($)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(externalControlOnly) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(_originalBackground) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(background-color)delimiter(')>operator(\)) operator(||) string<delimiter(')content(transparent)delimiter(')>operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(title) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(clickToEditText)operator(;)
    local_variable(this)operator(.)ident(_boundCancelHandler) operator(=) local_variable(this)operator(.)ident(handleFormCancellation)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(_boundComplete) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onComplete) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(_boundFailureHandler) operator(=) local_variable(this)operator(.)ident(handleAJAXFailure)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(_boundSubmitHandler) operator(=) local_variable(this)operator(.)ident(handleFormSubmission)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(_boundWrapperHandler) operator(=) local_variable(this)operator(.)ident(wrapUp)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(registerListeners)operator(()operator(\))operator(;)
  operator(})operator(,)
  key(checkForEscapeOrReturn)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(_editing) operator(||) ident(e)operator(.)ident(ctrlKey) operator(||) ident(e)operator(.)ident(altKey) operator(||) ident(e)operator(.)ident(shiftKey)operator(\)) keyword(return)operator(;)
    keyword(if) operator(()ident(Event)operator(.)ident(KEY_ESC) operator(==) ident(e)operator(.)ident(keyCode)operator(\))
      local_variable(this)operator(.)ident(handleFormCancellation)operator(()ident(e)operator(\))operator(;)
    keyword(else) keyword(if) operator(()ident(Event)operator(.)ident(KEY_RETURN) operator(==) ident(e)operator(.)ident(keyCode)operator(\))
      local_variable(this)operator(.)ident(handleFormSubmission)operator(()ident(e)operator(\))operator(;)
  operator(})operator(,)
  key(createControl)operator(:) keyword(function)operator(()ident(mode)operator(,) ident(handler)operator(,) ident(extraClasses)operator(\)) operator({)
    keyword(var) ident(control) operator(=) local_variable(this)operator(.)ident(options)operator([)ident(mode) operator(+) string<delimiter(')content(Control)delimiter(')>operator(])operator(;)
    keyword(var) ident(text) operator(=) local_variable(this)operator(.)ident(options)operator([)ident(mode) operator(+) string<delimiter(')content(Text)delimiter(')>operator(])operator(;)
    keyword(if) operator(()string<delimiter(')content(button)delimiter(')> operator(==) ident(control)operator(\)) operator({)
      keyword(var) ident(btn) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(input)delimiter(')>operator(\))operator(;)
      ident(btn)operator(.)ident(type) operator(=) string<delimiter(')content(submit)delimiter(')>operator(;)
      ident(btn)operator(.)ident(value) operator(=) ident(text)operator(;)
      ident(btn)operator(.)ident(className) operator(=) string<delimiter(')content(editor_)delimiter(')> operator(+) ident(mode) operator(+) string<delimiter(')content(_button)delimiter(')>operator(;)
      keyword(if) operator(()string<delimiter(')content(cancel)delimiter(')> operator(==) ident(mode)operator(\))
        ident(btn)operator(.)ident(onclick) operator(=) local_variable(this)operator(.)ident(_boundCancelHandler)operator(;)
      local_variable(this)operator(.)ident(_form)operator(.)ident(appendChild)operator(()ident(btn)operator(\))operator(;)
      local_variable(this)operator(.)ident(_controls)operator([)ident(mode)operator(]) operator(=) ident(btn)operator(;)
    operator(}) keyword(else) keyword(if) operator(()string<delimiter(')content(link)delimiter(')> operator(==) ident(control)operator(\)) operator({)
      keyword(var) ident(link) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(a)delimiter(')>operator(\))operator(;)
      ident(link)operator(.)ident(href) operator(=) string<delimiter(')content(#)delimiter(')>operator(;)
      ident(link)operator(.)ident(appendChild)operator(()ident(document)operator(.)ident(createTextNode)operator(()ident(text)operator(\)\))operator(;)
      ident(link)operator(.)ident(onclick) operator(=) string<delimiter(')content(cancel)delimiter(')> operator(==) ident(mode) operator(?) local_variable(this)operator(.)ident(_boundCancelHandler) operator(:) local_variable(this)operator(.)ident(_boundSubmitHandler)operator(;)
      ident(link)operator(.)ident(className) operator(=) string<delimiter(')content(editor_)delimiter(')> operator(+) ident(mode) operator(+) string<delimiter(')content(_link)delimiter(')>operator(;)
      keyword(if) operator(()ident(extraClasses)operator(\))
        ident(link)operator(.)ident(className) operator(+=) string<delimiter(')content( )delimiter(')> operator(+) ident(extraClasses)operator(;)
      local_variable(this)operator(.)ident(_form)operator(.)ident(appendChild)operator(()ident(link)operator(\))operator(;)
      local_variable(this)operator(.)ident(_controls)operator([)ident(mode)operator(]) operator(=) ident(link)operator(;)
    operator(})
  operator(})operator(,)
  key(createEditField)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(text) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL) operator(?) local_variable(this)operator(.)ident(options)operator(.)ident(loadingText) operator(:) local_variable(this)operator(.)ident(getText)operator(()operator(\)\))operator(;)
    keyword(var) ident(fld)operator(;)
    keyword(if) operator(()integer(1) operator(>=) local_variable(this)operator(.)ident(options)operator(.)ident(rows) operator(&&) operator(!)regexp<delimiter(/)char(\\r)content(|)char(\\n)delimiter(/)>operator(.)ident(test)operator(()local_variable(this)operator(.)ident(getText)operator(()operator(\)\)\)) operator({)
      ident(fld) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(input)delimiter(')>operator(\))operator(;)
      ident(fld)operator(.)ident(type) operator(=) string<delimiter(')content(text)delimiter(')>operator(;)
      keyword(var) ident(size) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(size) operator(||) local_variable(this)operator(.)ident(options)operator(.)ident(cols) operator(||) integer(0)operator(;)
      keyword(if) operator(()integer(0) operator(<) ident(size)operator(\)) ident(fld)operator(.)ident(size) operator(=) ident(size)operator(;)
    operator(}) keyword(else) operator({)
      ident(fld) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(textarea)delimiter(')>operator(\))operator(;)
      ident(fld)operator(.)ident(rows) operator(=) operator(()integer(1) operator(>=) local_variable(this)operator(.)ident(options)operator(.)ident(rows) operator(?) local_variable(this)operator(.)ident(options)operator(.)ident(autoRows) operator(:) local_variable(this)operator(.)ident(options)operator(.)ident(rows)operator(\))operator(;)
      ident(fld)operator(.)ident(cols) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(cols) operator(||) integer(40)operator(;)
    operator(})
    ident(fld)operator(.)ident(name) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(paramName)operator(;)
    ident(fld)operator(.)ident(value) operator(=) ident(text)operator(;) comment(// No HTML breaks conversion anymore)
    ident(fld)operator(.)ident(className) operator(=) string<delimiter(')content(editor_field)delimiter(')>operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(submitOnBlur)operator(\))
      ident(fld)operator(.)ident(onblur) operator(=) local_variable(this)operator(.)ident(_boundSubmitHandler)operator(;)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor) operator(=) ident(fld)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL)operator(\))
      local_variable(this)operator(.)ident(loadExternalText)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(appendChild)operator(()local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(\))operator(;)
  operator(})operator(,)
  key(createForm)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(ipe) operator(=) local_variable(this)operator(;)
    keyword(function) ident(addText)operator(()ident(mode)operator(,) ident(condition)operator(\)) operator({)
      keyword(var) ident(text) operator(=) ident(ipe)operator(.)ident(options)operator([)string<delimiter(')content(text)delimiter(')> operator(+) ident(mode) operator(+) string<delimiter(')content(Controls)delimiter(')>operator(])operator(;)
      keyword(if) operator((!)ident(text) operator(||) ident(condition) operator(===) keyword(false)operator(\)) keyword(return)operator(;)
      ident(ipe)operator(.)ident(_form)operator(.)ident(appendChild)operator(()ident(document)operator(.)ident(createTextNode)operator(()ident(text)operator(\)\))operator(;)
    operator(})operator(;)
    local_variable(this)operator(.)ident(_form) operator(=) predefined($)operator(()ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(form)delimiter(')>operator(\)\))operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(id) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(formId)operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(formClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(onsubmit) operator(=) local_variable(this)operator(.)ident(_boundSubmitHandler)operator(;)
    local_variable(this)operator(.)ident(createEditField)operator(()operator(\))operator(;)
    keyword(if) operator(()string<delimiter(')content(textarea)delimiter(')> operator(==) local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)\))
      local_variable(this)operator(.)ident(_form)operator(.)ident(appendChild)operator(()ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(br)delimiter(')>operator(\)\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onFormCustomization)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(onFormCustomization)operator(()local_variable(this)operator(,) local_variable(this)operator(.)ident(_form)operator(\))operator(;)
    ident(addText)operator(()string<delimiter(')content(Before)delimiter(')>operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(okControl) operator(||) local_variable(this)operator(.)ident(options)operator(.)ident(cancelControl)operator(\))operator(;)
    local_variable(this)operator(.)ident(createControl)operator(()string<delimiter(')content(ok)delimiter(')>operator(,) local_variable(this)operator(.)ident(_boundSubmitHandler)operator(\))operator(;)
    ident(addText)operator(()string<delimiter(')content(Between)delimiter(')>operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(okControl) operator(&&) local_variable(this)operator(.)ident(options)operator(.)ident(cancelControl)operator(\))operator(;)
    local_variable(this)operator(.)ident(createControl)operator(()string<delimiter(')content(cancel)delimiter(')>operator(,) local_variable(this)operator(.)ident(_boundCancelHandler)operator(,) string<delimiter(')content(editor_cancel)delimiter(')>operator(\))operator(;)
    ident(addText)operator(()string<delimiter(')content(After)delimiter(')>operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(okControl) operator(||) local_variable(this)operator(.)ident(options)operator(.)ident(cancelControl)operator(\))operator(;)
  operator(})operator(,)
  key(destroy)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(_oldInnerHTML)operator(\))
      local_variable(this)operator(.)ident(element)operator(.)ident(innerHTML) operator(=) local_variable(this)operator(.)ident(_oldInnerHTML)operator(;)
    local_variable(this)operator(.)ident(leaveEditMode)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(unregisterListeners)operator(()operator(\))operator(;)
  operator(})operator(,)
  key(enterEditMode)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(_saving) operator(||) local_variable(this)operator(.)ident(_editing)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(_editing) operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(triggerCallback)operator(()string<delimiter(')content(onEnterEditMode)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(.)ident(hide)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(createForm)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()local_variable(this)operator(.)ident(_form)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL)operator(\))
      local_variable(this)operator(.)ident(postProcessEditField)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(e)operator(\)) ident(Event)operator(.)ident(stop)operator(()ident(e)operator(\))operator(;)
  operator(})operator(,)
  key(enterHover)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(hoverClassName)operator(\))
      local_variable(this)operator(.)ident(element)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(hoverClassName)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(_saving)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(triggerCallback)operator(()string<delimiter(')content(onEnterHover)delimiter(')>operator(\))operator(;)
  operator(})operator(,)
  key(getText)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(element)operator(.)ident(innerHTML)operator(;)
  operator(})operator(,)
  key(handleAJAXFailure)operator(:) keyword(function)operator(()ident(transport)operator(\)) operator({)
    local_variable(this)operator(.)ident(triggerCallback)operator(()string<delimiter(')content(onFailure)delimiter(')>operator(,) ident(transport)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(_oldInnerHTML)operator(\)) operator({)
      local_variable(this)operator(.)ident(element)operator(.)ident(innerHTML) operator(=) local_variable(this)operator(.)ident(_oldInnerHTML)operator(;)
      local_variable(this)operator(.)ident(_oldInnerHTML) operator(=) keyword(null)operator(;)
    operator(})
  operator(})operator(,)
  key(handleFormCancellation)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    local_variable(this)operator(.)ident(wrapUp)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(e)operator(\)) ident(Event)operator(.)ident(stop)operator(()ident(e)operator(\))operator(;)
  operator(})operator(,)
  key(handleFormSubmission)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(var) ident(form) operator(=) local_variable(this)operator(.)ident(_form)operator(;)
    keyword(var) ident(value) operator(=) predefined($F)operator(()local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(\))operator(;)
    local_variable(this)operator(.)ident(prepareSubmission)operator(()operator(\))operator(;)
    keyword(var) ident(params) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(callback)operator(()ident(form)operator(,) ident(value)operator(\)) operator(||) string<delimiter(')delimiter(')>operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(params)operator(\)\))
      ident(params) operator(=) ident(params)operator(.)ident(toQueryParams)operator(()operator(\))operator(;)
    ident(params)operator(.)ident(editorId) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(id)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(htmlResponse)operator(\)) operator({)
      keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(evalScripts)operator(:) keyword(true) operator(})operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(ajaxOptions)operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({)
        key(parameters)operator(:) ident(params)operator(,)
        key(onComplete)operator(:) local_variable(this)operator(.)ident(_boundWrapperHandler)operator(,)
        key(onFailure)operator(:) local_variable(this)operator(.)ident(_boundFailureHandler)
      operator(}\))operator(;)
      keyword(new) ident(Ajax)operator(.)ident(Updater)operator(({) key(success)operator(:) local_variable(this)operator(.)ident(element) operator(})operator(,) local_variable(this)operator(.)ident(url)operator(,) ident(options)operator(\))operator(;)
    operator(}) keyword(else) operator({)
      keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(method)operator(:) string<delimiter(')content(get)delimiter(')> operator(})operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(ajaxOptions)operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({)
        key(parameters)operator(:) ident(params)operator(,)
        key(onComplete)operator(:) local_variable(this)operator(.)ident(_boundWrapperHandler)operator(,)
        key(onFailure)operator(:) local_variable(this)operator(.)ident(_boundFailureHandler)
      operator(}\))operator(;)
      keyword(new) ident(Ajax)operator(.)ident(Request)operator(()local_variable(this)operator(.)ident(url)operator(,) ident(options)operator(\))operator(;)
    operator(})
    keyword(if) operator(()ident(e)operator(\)) ident(Event)operator(.)ident(stop)operator(()ident(e)operator(\))operator(;)
  operator(})operator(,)
  key(leaveEditMode)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(removeClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(savingClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(removeForm)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(leaveHover)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(style)operator(.)ident(backgroundColor) operator(=) local_variable(this)operator(.)ident(_originalBackground)operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(show)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(.)ident(show)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(_saving) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(_editing) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(_oldInnerHTML) operator(=) keyword(null)operator(;)
    local_variable(this)operator(.)ident(triggerCallback)operator(()string<delimiter(')content(onLeaveEditMode)delimiter(')>operator(\))operator(;)
  operator(})operator(,)
  key(leaveHover)operator(:) keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(hoverClassName)operator(\))
      local_variable(this)operator(.)ident(element)operator(.)ident(removeClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(hoverClassName)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(_saving)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(triggerCallback)operator(()string<delimiter(')content(onLeaveHover)delimiter(')>operator(\))operator(;)
  operator(})operator(,)
  key(loadExternalText)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_form)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(disabled) operator(=) keyword(true)operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(method)operator(:) string<delimiter(')content(get)delimiter(')> operator(})operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(ajaxOptions)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({)
      key(parameters)operator(:) string<delimiter(')content(editorId=)delimiter(')> operator(+) ident(encodeURIComponent)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(id)operator(\))operator(,)
      key(onComplete)operator(:) ident(Prototype)operator(.)ident(emptyFunction)operator(,)
      key(onSuccess)operator(:) keyword(function)operator(()ident(transport)operator(\)) operator({)
        local_variable(this)operator(.)ident(_form)operator(.)ident(removeClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingClassName)operator(\))operator(;)
        keyword(var) ident(text) operator(=) ident(transport)operator(.)ident(responseText)operator(;)
        keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(stripLoadedTextTags)operator(\))
          ident(text) operator(=) ident(text)operator(.)ident(stripTags)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(value) operator(=) ident(text)operator(;)
        local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(disabled) operator(=) keyword(false)operator(;)
        local_variable(this)operator(.)ident(postProcessEditField)operator(()operator(\))operator(;)
      operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,)
      key(onFailure)operator(:) local_variable(this)operator(.)ident(_boundFailureHandler)
    operator(}\))operator(;)
    keyword(new) ident(Ajax)operator(.)ident(Request)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)
  key(postProcessEditField)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(fpc) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(fieldPostCreation)operator(;)
    keyword(if) operator(()ident(fpc)operator(\))
      predefined($)operator(()local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(\))operator([)string<delimiter(')content(focus)delimiter(')> operator(==) ident(fpc) operator(?) string<delimiter(')content(focus)delimiter(')> operator(:) string<delimiter(')content(activate)delimiter(')>operator(])operator(()operator(\))operator(;)
  operator(})operator(,)
  key(prepareOptions)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(options) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(DefaultOptions)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(,) ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(DefaultCallbacks)operator(\))operator(;)
    operator([)local_variable(this)operator(.)ident(_extraDefaultOptions)operator(])operator(.)ident(flatten)operator(()operator(\))operator(.)ident(compact)operator(()operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(defs)operator(\)) operator({)
      ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(,) ident(defs)operator(\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)
  key(prepareSubmission)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_saving) operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(removeForm)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(leaveHover)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(showSaving)operator(()operator(\))operator(;)
  operator(})operator(,)
  key(registerListeners)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_listeners) operator(=) operator({) operator(})operator(;)
    keyword(var) ident(listener)operator(;)
    predefined($H)operator(()ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(Listeners)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
      ident(listener) operator(=) local_variable(this)operator([)ident(pair)operator(.)ident(value)operator(])operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
      local_variable(this)operator(.)ident(_listeners)operator([)ident(pair)operator(.)ident(key)operator(]) operator(=) ident(listener)operator(;)
      keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(externalControlOnly)operator(\))
        local_variable(this)operator(.)ident(element)operator(.)ident(observe)operator(()ident(pair)operator(.)ident(key)operator(,) ident(listener)operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
        local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(.)ident(observe)operator(()ident(pair)operator(.)ident(key)operator(,) ident(listener)operator(\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)
  key(removeForm)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(_form)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(remove)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(_form) operator(=) keyword(null)operator(;)
    local_variable(this)operator(.)ident(_controls) operator(=) operator({) operator(})operator(;)
  operator(})operator(,)
  key(showSaving)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_oldInnerHTML) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(innerHTML)operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(innerHTML) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(savingText)operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(savingClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(style)operator(.)ident(backgroundColor) operator(=) local_variable(this)operator(.)ident(_originalBackground)operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(show)operator(()operator(\))operator(;)
  operator(})operator(,)
  key(triggerCallback)operator(:) keyword(function)operator(()ident(cbName)operator(,) ident(arg)operator(\)) operator({)
    keyword(if) operator(()string<delimiter(')content(function)delimiter(')> operator(==) keyword(typeof) local_variable(this)operator(.)ident(options)operator([)ident(cbName)operator(]\)) operator({)
      local_variable(this)operator(.)ident(options)operator([)ident(cbName)operator(])operator(()local_variable(this)operator(,) ident(arg)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  key(unregisterListeners)operator(:) keyword(function)operator(()operator(\)) operator({)
    predefined($H)operator(()local_variable(this)operator(.)ident(_listeners)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
      keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(externalControlOnly)operator(\))
        local_variable(this)operator(.)ident(element)operator(.)ident(stopObserving)operator(()ident(pair)operator(.)ident(key)operator(,) ident(pair)operator(.)ident(value)operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(\))
        local_variable(this)operator(.)ident(options)operator(.)ident(externalControl)operator(.)ident(stopObserving)operator(()ident(pair)operator(.)ident(key)operator(,) ident(pair)operator(.)ident(value)operator(\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)
  key(wrapUp)operator(:) keyword(function)operator(()ident(transport)operator(\)) operator({)
    local_variable(this)operator(.)ident(leaveEditMode)operator(()operator(\))operator(;)
    comment(// Can't use triggerCallback due to backward compatibility: requires)
    comment(// binding + direct element)
    local_variable(this)operator(.)ident(_boundComplete)operator(()ident(transport)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(prototype)operator(,) operator({)
  key(dispose)operator(:) ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(prototype)operator(.)ident(destroy)
operator(}\))operator(;)

ident(Ajax)operator(.)ident(InPlaceCollectionEditor) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(InPlaceEditor)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(element)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(_extraDefaultOptions) operator(=) ident(Ajax)operator(.)ident(InPlaceCollectionEditor)operator(.)ident(DefaultOptions)operator(;)
    predefined($super)operator(()ident(element)operator(,) ident(url)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(createEditField)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(list) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(select)delimiter(')>operator(\))operator(;)
    ident(list)operator(.)ident(name) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(paramName)operator(;)
    ident(list)operator(.)ident(size) operator(=) integer(1)operator(;)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor) operator(=) ident(list)operator(;)
    local_variable(this)operator(.)ident(_collection) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(collection) operator(||) operator([)operator(])operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadCollectionURL)operator(\))
      local_variable(this)operator(.)ident(loadCollection)operator(()operator(\))operator(;)
    keyword(else)
      local_variable(this)operator(.)ident(checkForExternalText)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(_form)operator(.)ident(appendChild)operator(()local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(\))operator(;)
  operator(})operator(,)

  key(loadCollection)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_form)operator(.)ident(addClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(showLoadingText)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingCollectionText)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(method)operator(:) string<delimiter(')content(get)delimiter(')> operator(})operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(ajaxOptions)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({)
      key(parameters)operator(:) string<delimiter(')content(editorId=)delimiter(')> operator(+) ident(encodeURIComponent)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(id)operator(\))operator(,)
      key(onComplete)operator(:) ident(Prototype)operator(.)ident(emptyFunction)operator(,)
      key(onSuccess)operator(:) keyword(function)operator(()ident(transport)operator(\)) operator({)
        keyword(var) ident(js) operator(=) ident(transport)operator(.)ident(responseText)operator(.)ident(strip)operator(()operator(\))operator(;)
        keyword(if) operator((!)regexp<delimiter(/)content(^)content(\\[)content(.*)content(\\])content($)delimiter(/)>operator(.)ident(test)operator(()ident(js)operator(\)\)) comment(// TODO: improve sanity check)
          keyword(throw) string<delimiter(')content(Server returned an invalid collection representation.)delimiter(')>operator(;)
        local_variable(this)operator(.)ident(_collection) operator(=) ident(eval)operator(()ident(js)operator(\))operator(;)
        local_variable(this)operator(.)ident(checkForExternalText)operator(()operator(\))operator(;)
      operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,)
      key(onFailure)operator(:) local_variable(this)operator(.)ident(onFailure)
    operator(}\))operator(;)
    keyword(new) ident(Ajax)operator(.)ident(Request)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadCollectionURL)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(showLoadingText)operator(:) keyword(function)operator(()ident(text)operator(\)) operator({)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(disabled) operator(=) keyword(true)operator(;)
    keyword(var) ident(tempOption) operator(=) local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(firstChild)operator(;)
    keyword(if) operator((!)ident(tempOption)operator(\)) operator({)
      ident(tempOption) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(option)delimiter(')>operator(\))operator(;)
      ident(tempOption)operator(.)ident(value) operator(=) string<delimiter(')delimiter(')>operator(;)
      local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(appendChild)operator(()ident(tempOption)operator(\))operator(;)
      ident(tempOption)operator(.)ident(selected) operator(=) keyword(true)operator(;)
    operator(})
    ident(tempOption)operator(.)ident(update)operator((()ident(text) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(stripScripts)operator(()operator(\))operator(.)ident(stripTags)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  key(checkForExternalText)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_text) operator(=) local_variable(this)operator(.)ident(getText)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL)operator(\))
      local_variable(this)operator(.)ident(loadExternalText)operator(()operator(\))operator(;)
    keyword(else)
      local_variable(this)operator(.)ident(buildOptionList)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(loadExternalText)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(showLoadingText)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingText)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(method)operator(:) string<delimiter(')content(get)delimiter(')> operator(})operator(,) local_variable(this)operator(.)ident(options)operator(.)ident(ajaxOptions)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({)
      key(parameters)operator(:) string<delimiter(')content(editorId=)delimiter(')> operator(+) ident(encodeURIComponent)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(id)operator(\))operator(,)
      key(onComplete)operator(:) ident(Prototype)operator(.)ident(emptyFunction)operator(,)
      key(onSuccess)operator(:) keyword(function)operator(()ident(transport)operator(\)) operator({)
        local_variable(this)operator(.)ident(_text) operator(=) ident(transport)operator(.)ident(responseText)operator(.)ident(strip)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(buildOptionList)operator(()operator(\))operator(;)
      operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,)
      key(onFailure)operator(:) local_variable(this)operator(.)ident(onFailure)
    operator(}\))operator(;)
    keyword(new) ident(Ajax)operator(.)ident(Request)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadTextURL)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(buildOptionList)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(_form)operator(.)ident(removeClassName)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(loadingClassName)operator(\))operator(;)
    local_variable(this)operator(.)ident(_collection) operator(=) local_variable(this)operator(.)ident(_collection)operator(.)ident(map)operator(()keyword(function)operator(()ident(entry)operator(\)) operator({)
      keyword(return) integer(2) operator(===) ident(entry)operator(.)ident(length) operator(?) ident(entry) operator(:) operator([)ident(entry)operator(,) ident(entry)operator(])operator(.)ident(flatten)operator(()operator(\))operator(;)
    operator(}\))operator(;)
    keyword(var) ident(marker) operator(=) operator(()string<delimiter(')content(value)delimiter(')> keyword(in) local_variable(this)operator(.)ident(options)operator(\)) operator(?) local_variable(this)operator(.)ident(options)operator(.)ident(value) operator(:) local_variable(this)operator(.)ident(_text)operator(;)
    keyword(var) ident(textFound) operator(=) local_variable(this)operator(.)ident(_collection)operator(.)ident(any)operator(()keyword(function)operator(()ident(entry)operator(\)) operator({)
      keyword(return) ident(entry)operator([)integer(0)operator(]) operator(==) ident(marker)operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(update)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(var) ident(option)operator(;)
    local_variable(this)operator(.)ident(_collection)operator(.)ident(each)operator(()keyword(function)operator(()ident(entry)operator(,) ident(index)operator(\)) operator({)
      ident(option) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(option)delimiter(')>operator(\))operator(;)
      ident(option)operator(.)ident(value) operator(=) ident(entry)operator([)integer(0)operator(])operator(;)
      ident(option)operator(.)ident(selected) operator(=) ident(textFound) operator(?) ident(entry)operator([)integer(0)operator(]) operator(==) ident(marker) operator(:) integer(0) operator(==) ident(index)operator(;)
      ident(option)operator(.)ident(appendChild)operator(()ident(document)operator(.)ident(createTextNode)operator(()ident(entry)operator([)integer(1)operator(]\)\))operator(;)
      local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(appendChild)operator(()ident(option)operator(\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(.)ident(disabled) operator(=) keyword(false)operator(;)
    ident(Field)operator(.)ident(scrollFreeActivate)operator(()local_variable(this)operator(.)ident(_controls)operator(.)ident(editor)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

comment(//**** DEPRECATION LAYER FOR InPlace[Collection]Editor! ****)
comment(//**** This only  exists for a while,  in order to  let ****)
comment(//**** users adapt to  the new API.  Read up on the new ****)
comment(//**** API and convert your code to it ASAP!            ****)

ident(Ajax)operator(.)ident(InPlaceEditor)operator(.)ident(prototype)operator(.)ident(initialize)operator(.)ident(dealWithDeprecatedOptions) operator(=) keyword(function)operator(()ident(options)operator(\)) operator({)
  keyword(if) operator((!)ident(options)operator(\)) keyword(return)operator(;)
  keyword(function) ident(fallback)operator(()ident(name)operator(,) ident(expr)operator(\)) operator({)
    keyword(if) operator(()ident(name) keyword(in) ident(options) operator(||) ident(expr) operator(===) ident(undefined)operator(\)) keyword(return)operator(;)
    ident(options)operator([)ident(name)operator(]) operator(=) ident(expr)operator(;)
  operator(})operator(;)
  ident(fallback)operator(()string<delimiter(')content(cancelControl)delimiter(')>operator(,) operator(()ident(options)operator(.)ident(cancelLink) operator(?) string<delimiter(')content(link)delimiter(')> operator(:) operator(()ident(options)operator(.)ident(cancelButton) operator(?) string<delimiter(')content(button)delimiter(')> operator(:)
    ident(options)operator(.)ident(cancelLink) operator(==) ident(options)operator(.)ident(cancelButton) operator(==) keyword(false) operator(?) keyword(false) operator(:) ident(undefined)operator(\)\)\))operator(;)
  ident(fallback)operator(()string<delimiter(')content(okControl)delimiter(')>operator(,) operator(()ident(options)operator(.)ident(okLink) operator(?) string<delimiter(')content(link)delimiter(')> operator(:) operator(()ident(options)operator(.)ident(okButton) operator(?) string<delimiter(')content(button)delimiter(')> operator(:)
    ident(options)operator(.)ident(okLink) operator(==) ident(options)operator(.)ident(okButton) operator(==) keyword(false) operator(?) keyword(false) operator(:) ident(undefined)operator(\)\)\))operator(;)
  ident(fallback)operator(()string<delimiter(')content(highlightColor)delimiter(')>operator(,) ident(options)operator(.)ident(highlightcolor)operator(\))operator(;)
  ident(fallback)operator(()string<delimiter(')content(highlightEndColor)delimiter(')>operator(,) ident(options)operator(.)ident(highlightendcolor)operator(\))operator(;)
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Ajax)operator(.)ident(InPlaceEditor)operator(,) operator({)
  key(DefaultOptions)operator(:) operator({)
    key(ajaxOptions)operator(:) operator({) operator(})operator(,)
    key(autoRows)operator(:) integer(3)operator(,)                                comment(// Use when multi-line w/ rows == 1)
    key(cancelControl)operator(:) string<delimiter(')content(link)delimiter(')>operator(,)                      comment(// 'link'|'button'|false)
    key(cancelText)operator(:) string<delimiter(')content(cancel)delimiter(')>operator(,)
    key(clickToEditText)operator(:) string<delimiter(')content(Click to edit)delimiter(')>operator(,)
    key(externalControl)operator(:) keyword(null)operator(,)                      comment(// id|elt)
    key(externalControlOnly)operator(:) keyword(false)operator(,)
    key(fieldPostCreation)operator(:) string<delimiter(')content(activate)delimiter(')>operator(,)              comment(// 'activate'|'focus'|false)
    key(formClassName)operator(:) string<delimiter(')content(inplaceeditor-form)delimiter(')>operator(,)
    key(formId)operator(:) keyword(null)operator(,)                               comment(// id|elt)
    key(highlightColor)operator(:) string<delimiter(')content(#ffff99)delimiter(')>operator(,)
    key(highlightEndColor)operator(:) string<delimiter(')content(#ffffff)delimiter(')>operator(,)
    key(hoverClassName)operator(:) string<delimiter(')delimiter(')>operator(,)
    key(htmlResponse)operator(:) keyword(true)operator(,)
    key(loadingClassName)operator(:) string<delimiter(')content(inplaceeditor-loading)delimiter(')>operator(,)
    key(loadingText)operator(:) string<delimiter(')content(Loading...)delimiter(')>operator(,)
    key(okControl)operator(:) string<delimiter(')content(button)delimiter(')>operator(,)                        comment(// 'link'|'button'|false)
    key(okText)operator(:) string<delimiter(')content(ok)delimiter(')>operator(,)
    key(paramName)operator(:) string<delimiter(')content(value)delimiter(')>operator(,)
    key(rows)operator(:) integer(1)operator(,)                                    comment(// If 1 and multi-line, uses autoRows)
    key(savingClassName)operator(:) string<delimiter(')content(inplaceeditor-saving)delimiter(')>operator(,)
    key(savingText)operator(:) string<delimiter(')content(Saving...)delimiter(')>operator(,)
    key(size)operator(:) integer(0)operator(,)
    key(stripLoadedTextTags)operator(:) keyword(false)operator(,)
    key(submitOnBlur)operator(:) keyword(false)operator(,)
    key(textAfterControls)operator(:) string<delimiter(')delimiter(')>operator(,)
    key(textBeforeControls)operator(:) string<delimiter(')delimiter(')>operator(,)
    key(textBetweenControls)operator(:) string<delimiter(')delimiter(')>
  operator(})operator(,)
  key(DefaultCallbacks)operator(:) operator({)
    key(callback)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
      keyword(return) ident(Form)operator(.)ident(serialize)operator(()ident(form)operator(\))operator(;)
    operator(})operator(,)
    key(onComplete)operator(:) keyword(function)operator(()ident(transport)operator(,) ident(element)operator(\)) operator({)
      comment(// For backward compatibility, this one is bound to the IPE, and passes)
      comment(// the element directly.  It was too often customized, so we don't break it.)
      keyword(new) ident(Effect)operator(.)ident(Highlight)operator(()ident(element)operator(,) operator({)
        key(startcolor)operator(:) local_variable(this)operator(.)ident(options)operator(.)ident(highlightColor)operator(,) key(keepBackgroundImage)operator(:) keyword(true) operator(}\))operator(;)
    operator(})operator(,)
    key(onEnterEditMode)operator(:) keyword(null)operator(,)
    key(onEnterHover)operator(:) keyword(function)operator(()ident(ipe)operator(\)) operator({)
      ident(ipe)operator(.)ident(element)operator(.)ident(style)operator(.)ident(backgroundColor) operator(=) ident(ipe)operator(.)ident(options)operator(.)ident(highlightColor)operator(;)
      keyword(if) operator(()ident(ipe)operator(.)ident(_effect)operator(\))
        ident(ipe)operator(.)ident(_effect)operator(.)ident(cancel)operator(()operator(\))operator(;)
    operator(})operator(,)
    key(onFailure)operator(:) keyword(function)operator(()ident(transport)operator(,) ident(ipe)operator(\)) operator({)
      ident(alert)operator(()string<delimiter(')content(Error communication with the server: )delimiter(')> operator(+) ident(transport)operator(.)ident(responseText)operator(.)ident(stripTags)operator(()operator(\)\))operator(;)
    operator(})operator(,)
    key(onFormCustomization)operator(:) keyword(null)operator(,) comment(// Takes the IPE and its generated form, after editor, before controls.)
    key(onLeaveEditMode)operator(:) keyword(null)operator(,)
    key(onLeaveHover)operator(:) keyword(function)operator(()ident(ipe)operator(\)) operator({)
      ident(ipe)operator(.)ident(_effect) operator(=) keyword(new) ident(Effect)operator(.)ident(Highlight)operator(()ident(ipe)operator(.)ident(element)operator(,) operator({)
        key(startcolor)operator(:) ident(ipe)operator(.)ident(options)operator(.)ident(highlightColor)operator(,) key(endcolor)operator(:) ident(ipe)operator(.)ident(options)operator(.)ident(highlightEndColor)operator(,)
        key(restorecolor)operator(:) ident(ipe)operator(.)ident(_originalBackground)operator(,) key(keepBackgroundImage)operator(:) keyword(true)
      operator(}\))operator(;)
    operator(})
  operator(})operator(,)
  key(Listeners)operator(:) operator({)
    key(click)operator(:) string<delimiter(')content(enterEditMode)delimiter(')>operator(,)
    key(keydown)operator(:) string<delimiter(')content(checkForEscapeOrReturn)delimiter(')>operator(,)
    key(mouseover)operator(:) string<delimiter(')content(enterHover)delimiter(')>operator(,)
    key(mouseout)operator(:) string<delimiter(')content(leaveHover)delimiter(')>
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(InPlaceCollectionEditor)operator(.)ident(DefaultOptions) operator(=) operator({)
  key(loadingCollectionText)operator(:) string<delimiter(')content(Loading options...)delimiter(')>
operator(})operator(;)

comment(// Delayed observer, like Form.Element.Observer, )
comment(// but waits for delay after last key input)
comment(// Ideal for live-search fields)

ident(Form)operator(.)ident(Element)operator(.)ident(DelayedObserver) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(delay)operator(,) ident(callback)operator(\)) operator({)
    local_variable(this)operator(.)ident(delay)     operator(=) ident(delay) operator(||) float(0.5)operator(;)
    local_variable(this)operator(.)ident(element)   operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(callback)  operator(=) ident(callback)operator(;)
    local_variable(this)operator(.)ident(timer)     operator(=) keyword(null)operator(;)
    local_variable(this)operator(.)ident(lastValue) operator(=) predefined($F)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;) 
    ident(Event)operator(.)ident(observe)operator(()local_variable(this)operator(.)ident(element)operator(,)string<delimiter(')content(keyup)delimiter(')>operator(,)local_variable(this)operator(.)ident(delayedListener)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)
  key(delayedListener)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(lastValue) operator(==) predefined($F)operator(()local_variable(this)operator(.)ident(element)operator(\)\)) keyword(return)operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(timer)operator(\)) ident(clearTimeout)operator(()local_variable(this)operator(.)ident(timer)operator(\))operator(;)
    local_variable(this)operator(.)ident(timer) operator(=) ident(setTimeout)operator(()local_variable(this)operator(.)ident(onTimerEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) local_variable(this)operator(.)ident(delay) operator(*) integer(1000)operator(\))operator(;)
    local_variable(this)operator(.)ident(lastValue) operator(=) predefined($F)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)
  key(onTimerEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(timer) operator(=) keyword(null)operator(;)
    local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) predefined($F)operator(()local_variable(this)operator(.)ident(element)operator(\)\))operator(;)
  operator(})
operator(}\))operator(;)
comment(// Copyright (c\) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us\))
comment(//           (c\) 2005-2007 Sammi Williams (http://www.oriontransfer.co.nz, sammi@oriontransfer.co.nz\))
comment(// )
comment(// script.aculo.us is freely distributable under the terms of an MIT-style license.)
comment(// For details, see the script.aculo.us web site: http://script.aculo.us/)

keyword(if)operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(Effect)operator(\)\))
  keyword(throw)operator(()string<delimiter(")content(dragdrop.js requires including script.aculo.us' effects.js library)delimiter(")>operator(\))operator(;)

keyword(var) ident(Droppables) operator(=) operator({)
  key(drops)operator(:) operator([)operator(])operator(,)

  key(remove)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(drops) operator(=) local_variable(this)operator(.)ident(drops)operator(.)ident(reject)operator(()keyword(function)operator(()ident(d)operator(\)) operator({) keyword(return) ident(d)operator(.)ident(element)operator(==)predefined($)operator(()ident(element)operator(\)) operator(}\))operator(;)
  operator(})operator(,)

  key(add)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(greedy)operator(:)     keyword(true)operator(,)
      key(hoverclass)operator(:) keyword(null)operator(,)
      key(tree)operator(:)       keyword(false)
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)

    comment(// cache containers)
    keyword(if)operator(()ident(options)operator(.)ident(containment)operator(\)) operator({)
      ident(options)operator(.)ident(_containers) operator(=) operator([)operator(])operator(;)
      keyword(var) ident(containment) operator(=) ident(options)operator(.)ident(containment)operator(;)
      keyword(if)operator(()ident(Object)operator(.)ident(isArray)operator(()ident(containment)operator(\)\)) operator({)
        ident(containment)operator(.)ident(each)operator(() keyword(function)operator(()ident(c)operator(\)) operator({) ident(options)operator(.)ident(_containers)operator(.)ident(push)operator(()predefined($)operator(()ident(c)operator(\)\)) operator(}\))operator(;)
      operator(}) keyword(else) operator({)
        ident(options)operator(.)ident(_containers)operator(.)ident(push)operator(()predefined($)operator(()ident(containment)operator(\)\))operator(;)
      operator(})
    operator(})
    
    keyword(if)operator(()ident(options)operator(.)ident(accept)operator(\)) ident(options)operator(.)ident(accept) operator(=) operator([)ident(options)operator(.)ident(accept)operator(])operator(.)ident(flatten)operator(()operator(\))operator(;)

    ident(Element)operator(.)ident(makePositioned)operator(()ident(element)operator(\))operator(;) comment(// fix IE)
    ident(options)operator(.)ident(element) operator(=) ident(element)operator(;)

    local_variable(this)operator(.)ident(drops)operator(.)ident(push)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  
  key(findDeepestChild)operator(:) keyword(function)operator(()ident(drops)operator(\)) operator({)
    ident(deepest) operator(=) ident(drops)operator([)integer(0)operator(])operator(;)
      
    keyword(for) operator(()ident(i) operator(=) integer(1)operator(;) ident(i) operator(<) ident(drops)operator(.)ident(length)operator(;) operator(++)ident(i)operator(\))
      keyword(if) operator(()ident(Element)operator(.)ident(isParent)operator(()ident(drops)operator([)ident(i)operator(])operator(.)ident(element)operator(,) ident(deepest)operator(.)ident(element)operator(\)\))
        ident(deepest) operator(=) ident(drops)operator([)ident(i)operator(])operator(;)
    
    keyword(return) ident(deepest)operator(;)
  operator(})operator(,)

  key(isContained)operator(:) keyword(function)operator(()ident(element)operator(,) ident(drop)operator(\)) operator({)
    keyword(var) ident(containmentNode)operator(;)
    keyword(if)operator(()ident(drop)operator(.)ident(tree)operator(\)) operator({)
      ident(containmentNode) operator(=) ident(element)operator(.)ident(treeNode)operator(;) 
    operator(}) keyword(else) operator({)
      ident(containmentNode) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
    operator(})
    keyword(return) ident(drop)operator(.)ident(_containers)operator(.)ident(detect)operator(()keyword(function)operator(()ident(c)operator(\)) operator({) keyword(return) ident(containmentNode) operator(==) ident(c) operator(}\))operator(;)
  operator(})operator(,)
  
  key(isAffected)operator(:) keyword(function)operator(()ident(point)operator(,) ident(element)operator(,) ident(drop)operator(\)) operator({)
    keyword(return) operator(()
      operator(()ident(drop)operator(.)ident(element)operator(!=)ident(element)operator(\)) operator(&&)
      operator(((!)ident(drop)operator(.)ident(_containers)operator(\)) operator(||)
        local_variable(this)operator(.)ident(isContained)operator(()ident(element)operator(,) ident(drop)operator(\)\)) operator(&&)
      operator(((!)ident(drop)operator(.)ident(accept)operator(\)) operator(||)
        operator(()ident(Element)operator(.)ident(classNames)operator(()ident(element)operator(\))operator(.)ident(detect)operator(() 
          keyword(function)operator(()ident(v)operator(\)) operator({) keyword(return) ident(drop)operator(.)ident(accept)operator(.)ident(include)operator(()ident(v)operator(\)) operator(}) operator(\)) operator(\)\)) operator(&&)
      ident(Position)operator(.)ident(within)operator(()ident(drop)operator(.)ident(element)operator(,) ident(point)operator([)integer(0)operator(])operator(,) ident(point)operator([)integer(1)operator(]\)) operator(\))operator(;)
  operator(})operator(,)

  key(deactivate)operator(:) keyword(function)operator(()ident(drop)operator(\)) operator({)
    keyword(if)operator(()ident(drop)operator(.)ident(hoverclass)operator(\))
      ident(Element)operator(.)ident(removeClassName)operator(()ident(drop)operator(.)ident(element)operator(,) ident(drop)operator(.)ident(hoverclass)operator(\))operator(;)
    local_variable(this)operator(.)ident(last_active) operator(=) keyword(null)operator(;)
  operator(})operator(,)

  key(activate)operator(:) keyword(function)operator(()ident(drop)operator(\)) operator({)
    keyword(if)operator(()ident(drop)operator(.)ident(hoverclass)operator(\))
      ident(Element)operator(.)ident(addClassName)operator(()ident(drop)operator(.)ident(element)operator(,) ident(drop)operator(.)ident(hoverclass)operator(\))operator(;)
    local_variable(this)operator(.)ident(last_active) operator(=) ident(drop)operator(;)
  operator(})operator(,)

  key(show)operator(:) keyword(function)operator(()ident(point)operator(,) ident(element)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(drops)operator(.)ident(length)operator(\)) keyword(return)operator(;)
    keyword(var) ident(drop)operator(,) ident(affected) operator(=) operator([)operator(])operator(;)
    
    local_variable(this)operator(.)ident(drops)operator(.)ident(each)operator(() keyword(function)operator(()ident(drop)operator(\)) operator({)
      keyword(if)operator(()ident(Droppables)operator(.)ident(isAffected)operator(()ident(point)operator(,) ident(element)operator(,) ident(drop)operator(\)\))
        ident(affected)operator(.)ident(push)operator(()ident(drop)operator(\))operator(;)
    operator(}\))operator(;)
        
    keyword(if)operator(()ident(affected)operator(.)ident(length)operator(>)integer(0)operator(\))
      ident(drop) operator(=) ident(Droppables)operator(.)ident(findDeepestChild)operator(()ident(affected)operator(\))operator(;)

    keyword(if)operator(()local_variable(this)operator(.)ident(last_active) operator(&&) local_variable(this)operator(.)ident(last_active) operator(!=) ident(drop)operator(\)) local_variable(this)operator(.)ident(deactivate)operator(()local_variable(this)operator(.)ident(last_active)operator(\))operator(;)
    keyword(if) operator(()ident(drop)operator(\)) operator({)
      ident(Position)operator(.)ident(within)operator(()ident(drop)operator(.)ident(element)operator(,) ident(point)operator([)integer(0)operator(])operator(,) ident(point)operator([)integer(1)operator(]\))operator(;)
      keyword(if)operator(()ident(drop)operator(.)ident(onHover)operator(\))
        ident(drop)operator(.)ident(onHover)operator(()ident(element)operator(,) ident(drop)operator(.)ident(element)operator(,) ident(Position)operator(.)ident(overlap)operator(()ident(drop)operator(.)ident(overlap)operator(,) ident(drop)operator(.)ident(element)operator(\)\))operator(;)
      
      keyword(if) operator(()ident(drop) operator(!=) local_variable(this)operator(.)ident(last_active)operator(\)) ident(Droppables)operator(.)ident(activate)operator(()ident(drop)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(fire)operator(:) keyword(function)operator(()ident(event)operator(,) ident(element)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(last_active)operator(\)) keyword(return)operator(;)
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)

    keyword(if) operator(()local_variable(this)operator(.)ident(isAffected)operator(([)ident(Event)operator(.)ident(pointerX)operator(()ident(event)operator(\))operator(,) ident(Event)operator(.)ident(pointerY)operator(()ident(event)operator(\)])operator(,) ident(element)operator(,) local_variable(this)operator(.)ident(last_active)operator(\)\))
      keyword(if) operator(()local_variable(this)operator(.)ident(last_active)operator(.)ident(onDrop)operator(\)) operator({)
        local_variable(this)operator(.)ident(last_active)operator(.)ident(onDrop)operator(()ident(element)operator(,) local_variable(this)operator(.)ident(last_active)operator(.)ident(element)operator(,) ident(event)operator(\))operator(;) 
        keyword(return) keyword(true)operator(;) 
      operator(})
  operator(})operator(,)

  key(reset)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(last_active)operator(\))
      local_variable(this)operator(.)ident(deactivate)operator(()local_variable(this)operator(.)ident(last_active)operator(\))operator(;)
  operator(})
operator(})

keyword(var) ident(Draggables) operator(=) operator({)
  key(drags)operator(:) operator([)operator(])operator(,)
  key(observers)operator(:) operator([)operator(])operator(,)
  
  key(register)operator(:) keyword(function)operator(()ident(draggable)operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(drags)operator(.)ident(length) operator(==) integer(0)operator(\)) operator({)
      local_variable(this)operator(.)ident(eventMouseUp)   operator(=) local_variable(this)operator(.)ident(endDrag)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\))operator(;)
      local_variable(this)operator(.)ident(eventMouseMove) operator(=) local_variable(this)operator(.)ident(updateDrag)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\))operator(;)
      local_variable(this)operator(.)ident(eventKeypress)  operator(=) local_variable(this)operator(.)ident(keyPress)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\))operator(;)
      
      ident(Event)operator(.)ident(observe)operator(()ident(document)operator(,) string<delimiter(")content(mouseup)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseUp)operator(\))operator(;)
      ident(Event)operator(.)ident(observe)operator(()ident(document)operator(,) string<delimiter(")content(mousemove)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseMove)operator(\))operator(;)
      ident(Event)operator(.)ident(observe)operator(()ident(document)operator(,) string<delimiter(")content(keypress)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventKeypress)operator(\))operator(;)
    operator(})
    local_variable(this)operator(.)ident(drags)operator(.)ident(push)operator(()ident(draggable)operator(\))operator(;)
  operator(})operator(,)
  
  key(unregister)operator(:) keyword(function)operator(()ident(draggable)operator(\)) operator({)
    local_variable(this)operator(.)ident(drags) operator(=) local_variable(this)operator(.)ident(drags)operator(.)ident(reject)operator(()keyword(function)operator(()ident(d)operator(\)) operator({) keyword(return) ident(d)operator(==)ident(draggable) operator(}\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(drags)operator(.)ident(length) operator(==) integer(0)operator(\)) operator({)
      ident(Event)operator(.)ident(stopObserving)operator(()ident(document)operator(,) string<delimiter(")content(mouseup)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseUp)operator(\))operator(;)
      ident(Event)operator(.)ident(stopObserving)operator(()ident(document)operator(,) string<delimiter(")content(mousemove)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseMove)operator(\))operator(;)
      ident(Event)operator(.)ident(stopObserving)operator(()ident(document)operator(,) string<delimiter(")content(keypress)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventKeypress)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  
  key(activate)operator(:) keyword(function)operator(()ident(draggable)operator(\)) operator({)
    keyword(if)operator(()ident(draggable)operator(.)ident(options)operator(.)ident(delay)operator(\)) operator({) 
      local_variable(this)operator(.)ident(_timeout) operator(=) ident(setTimeout)operator(()keyword(function)operator(()operator(\)) operator({) 
        ident(Draggables)operator(.)ident(_timeout) operator(=) keyword(null)operator(;) 
        ident(window)operator(.)ident(focus)operator(()operator(\))operator(;) 
        ident(Draggables)operator(.)ident(activeDraggable) operator(=) ident(draggable)operator(;) 
      operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) ident(draggable)operator(.)ident(options)operator(.)ident(delay)operator(\))operator(;) 
    operator(}) keyword(else) operator({)
      ident(window)operator(.)ident(focus)operator(()operator(\))operator(;) comment(// allows keypress events if window isn't currently focused, fails for Safari)
      local_variable(this)operator(.)ident(activeDraggable) operator(=) ident(draggable)operator(;)
    operator(})
  operator(})operator(,)
  
  key(deactivate)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(activeDraggable) operator(=) keyword(null)operator(;)
  operator(})operator(,)
  
  key(updateDrag)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(activeDraggable)operator(\)) keyword(return)operator(;)
    keyword(var) ident(pointer) operator(=) operator([)ident(Event)operator(.)ident(pointerX)operator(()ident(event)operator(\))operator(,) ident(Event)operator(.)ident(pointerY)operator(()ident(event)operator(\)])operator(;)
    comment(// Mozilla-based browsers fire successive mousemove events with)
    comment(// the same coordinates, prevent needless redrawing (moz bug?\))
    keyword(if)operator(()local_variable(this)operator(.)ident(_lastPointer) operator(&&) operator(()local_variable(this)operator(.)ident(_lastPointer)operator(.)ident(inspect)operator(()operator(\)) operator(==) ident(pointer)operator(.)ident(inspect)operator(()operator(\)\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(_lastPointer) operator(=) ident(pointer)operator(;)
    
    local_variable(this)operator(.)ident(activeDraggable)operator(.)ident(updateDrag)operator(()ident(event)operator(,) ident(pointer)operator(\))operator(;)
  operator(})operator(,)
  
  key(endDrag)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(_timeout)operator(\)) operator({) 
      ident(clearTimeout)operator(()local_variable(this)operator(.)ident(_timeout)operator(\))operator(;) 
      local_variable(this)operator(.)ident(_timeout) operator(=) keyword(null)operator(;) 
    operator(})
    keyword(if)operator((!)local_variable(this)operator(.)ident(activeDraggable)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(_lastPointer) operator(=) keyword(null)operator(;)
    local_variable(this)operator(.)ident(activeDraggable)operator(.)ident(endDrag)operator(()ident(event)operator(\))operator(;)
    local_variable(this)operator(.)ident(activeDraggable) operator(=) keyword(null)operator(;)
  operator(})operator(,)
  
  key(keyPress)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(activeDraggable)operator(\))
      local_variable(this)operator(.)ident(activeDraggable)operator(.)ident(keyPress)operator(()ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(addObserver)operator(:) keyword(function)operator(()ident(observer)operator(\)) operator({)
    local_variable(this)operator(.)ident(observers)operator(.)ident(push)operator(()ident(observer)operator(\))operator(;)
    local_variable(this)operator(.)ident(_cacheObserverCallbacks)operator(()operator(\))operator(;)
  operator(})operator(,)
  
  key(removeObserver)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)  comment(// element instead of observer fixes mem leaks)
    local_variable(this)operator(.)ident(observers) operator(=) local_variable(this)operator(.)ident(observers)operator(.)ident(reject)operator(() keyword(function)operator(()ident(o)operator(\)) operator({) keyword(return) ident(o)operator(.)ident(element)operator(==)ident(element) operator(}\))operator(;)
    local_variable(this)operator(.)ident(_cacheObserverCallbacks)operator(()operator(\))operator(;)
  operator(})operator(,)
  
  key(notify)operator(:) keyword(function)operator(()ident(eventName)operator(,) ident(draggable)operator(,) ident(event)operator(\)) operator({)  comment(// 'onStart', 'onEnd', 'onDrag')
    keyword(if)operator(()local_variable(this)operator([)ident(eventName)operator(+)string<delimiter(')content(Count)delimiter(')>operator(]) operator(>) integer(0)operator(\))
      local_variable(this)operator(.)ident(observers)operator(.)ident(each)operator(() keyword(function)operator(()ident(o)operator(\)) operator({)
        keyword(if)operator(()ident(o)operator([)ident(eventName)operator(]\)) ident(o)operator([)ident(eventName)operator(])operator(()ident(eventName)operator(,) ident(draggable)operator(,) ident(event)operator(\))operator(;)
      operator(}\))operator(;)
    keyword(if)operator(()ident(draggable)operator(.)ident(options)operator([)ident(eventName)operator(]\)) ident(draggable)operator(.)ident(options)operator([)ident(eventName)operator(])operator(()ident(draggable)operator(,) ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(_cacheObserverCallbacks)operator(:) keyword(function)operator(()operator(\)) operator({)
    operator([)string<delimiter(')content(onStart)delimiter(')>operator(,)string<delimiter(')content(onEnd)delimiter(')>operator(,)string<delimiter(')content(onDrag)delimiter(')>operator(])operator(.)ident(each)operator(() keyword(function)operator(()ident(eventName)operator(\)) operator({)
      ident(Draggables)operator([)ident(eventName)operator(+)string<delimiter(')content(Count)delimiter(')>operator(]) operator(=) ident(Draggables)operator(.)ident(observers)operator(.)ident(select)operator(()
        keyword(function)operator(()ident(o)operator(\)) operator({) keyword(return) ident(o)operator([)ident(eventName)operator(])operator(;) operator(})
      operator(\))operator(.)ident(length)operator(;)
    operator(}\))operator(;)
  operator(})
operator(})

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(Draggable) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(defaults) operator(=) operator({)
      key(handle)operator(:) keyword(false)operator(,)
      key(reverteffect)operator(:) keyword(function)operator(()ident(element)operator(,) ident(top_offset)operator(,) ident(left_offset)operator(\)) operator({)
        keyword(var) ident(dur) operator(=) ident(Math)operator(.)ident(sqrt)operator(()ident(Math)operator(.)ident(abs)operator(()ident(top_offset)operator(^)integer(2)operator(\))operator(+)ident(Math)operator(.)ident(abs)operator(()ident(left_offset)operator(^)integer(2)operator(\)\))operator(*)float(0.02)operator(;)
        keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,) operator({) key(x)operator(:) operator(-)ident(left_offset)operator(,) key(y)operator(:) operator(-)ident(top_offset)operator(,) key(duration)operator(:) ident(dur)operator(,)
          key(queue)operator(:) operator({)key(scope)operator(:)string<delimiter(')content(_draggable)delimiter(')>operator(,) key(position)operator(:)string<delimiter(')content(end)delimiter(')>operator(})
        operator(}\))operator(;)
      operator(})operator(,)
      key(endeffect)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
        keyword(var) ident(toOpacity) operator(=) ident(Object)operator(.)ident(isNumber)operator(()ident(element)operator(.)ident(_opacity)operator(\)) operator(?) ident(element)operator(.)ident(_opacity) operator(:) float(1.0)operator(;)
        keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) operator({)key(duration)operator(:)float(0.2)operator(,) key(from)operator(:)float(0.7)operator(,) key(to)operator(:)ident(toOpacity)operator(,) 
          key(queue)operator(:) operator({)key(scope)operator(:)string<delimiter(')content(_draggable)delimiter(')>operator(,) key(position)operator(:)string<delimiter(')content(end)delimiter(')>operator(})operator(,)
          key(afterFinish)operator(:) keyword(function)operator(()operator(\))operator({) 
            ident(Draggable)operator(.)ident(_dragging)operator([)ident(element)operator(]) operator(=) keyword(false) 
          operator(})
        operator(}\))operator(;) 
      operator(})operator(,)
      key(zindex)operator(:) integer(1000)operator(,)
      key(revert)operator(:) keyword(false)operator(,)
      key(quiet)operator(:) keyword(false)operator(,)
      key(scroll)operator(:) keyword(false)operator(,)
      key(scrollSensitivity)operator(:) integer(20)operator(,)
      key(scrollSpeed)operator(:) integer(15)operator(,)
      key(snap)operator(:) keyword(false)operator(,)  comment(// false, or xy or [x,y] or function(x,y\){ return [x,y] })
      key(delay)operator(:) integer(0)
    operator(})operator(;)
    
    keyword(if)operator((!)local_variable(arguments)operator([)integer(1)operator(]) operator(||) ident(Object)operator(.)ident(isUndefined)operator(()local_variable(arguments)operator([)integer(1)operator(])operator(.)ident(endeffect)operator(\)\))
      ident(Object)operator(.)ident(extend)operator(()ident(defaults)operator(,) operator({)
        key(starteffect)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
          ident(element)operator(.)ident(_opacity) operator(=) ident(Element)operator(.)ident(getOpacity)operator(()ident(element)operator(\))operator(;)
          ident(Draggable)operator(.)ident(_dragging)operator([)ident(element)operator(]) operator(=) keyword(true)operator(;)
          keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) operator({)key(duration)operator(:)float(0.2)operator(,) key(from)operator(:)ident(element)operator(.)ident(_opacity)operator(,) key(to)operator(:)float(0.7)operator(}\))operator(;) 
        operator(})
      operator(}\))operator(;)
    
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(()ident(defaults)operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)

    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    
    keyword(if)operator(()ident(options)operator(.)ident(handle) operator(&&) ident(Object)operator(.)ident(isString)operator(()ident(options)operator(.)ident(handle)operator(\)\))
      local_variable(this)operator(.)ident(handle) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(down)operator(()string<delimiter(')content(.)delimiter(')>operator(+)ident(options)operator(.)ident(handle)operator(,) integer(0)operator(\))operator(;)
    
    keyword(if)operator((!)local_variable(this)operator(.)ident(handle)operator(\)) local_variable(this)operator(.)ident(handle) operator(=) predefined($)operator(()ident(options)operator(.)ident(handle)operator(\))operator(;)
    keyword(if)operator((!)local_variable(this)operator(.)ident(handle)operator(\)) local_variable(this)operator(.)ident(handle) operator(=) local_variable(this)operator(.)ident(element)operator(;)
    
    keyword(if)operator(()ident(options)operator(.)ident(scroll) operator(&&) operator(!)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTo) operator(&&) operator(!)ident(options)operator(.)ident(scroll)operator(.)ident(outerHTML)operator(\)) operator({)
      ident(options)operator(.)ident(scroll) operator(=) predefined($)operator(()ident(options)operator(.)ident(scroll)operator(\))operator(;)
      local_variable(this)operator(.)ident(_isScrollChild) operator(=) ident(Element)operator(.)ident(childOf)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(options)operator(.)ident(scroll)operator(\))operator(;)
    operator(})

    ident(Element)operator(.)ident(makePositioned)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;) comment(// fix IE    )

    local_variable(this)operator(.)ident(options)  operator(=) ident(options)operator(;)
    local_variable(this)operator(.)ident(dragging) operator(=) keyword(false)operator(;)   

    local_variable(this)operator(.)ident(eventMouseDown) operator(=) local_variable(this)operator(.)ident(initDrag)operator(.)ident(bindAsEventListener)operator(()local_variable(this)operator(\))operator(;)
    ident(Event)operator(.)ident(observe)operator(()local_variable(this)operator(.)ident(handle)operator(,) string<delimiter(")content(mousedown)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseDown)operator(\))operator(;)
    
    ident(Draggables)operator(.)ident(register)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)
  
  key(destroy)operator(:) keyword(function)operator(()operator(\)) operator({)
    ident(Event)operator(.)ident(stopObserving)operator(()local_variable(this)operator(.)ident(handle)operator(,) string<delimiter(")content(mousedown)delimiter(")>operator(,) local_variable(this)operator(.)ident(eventMouseDown)operator(\))operator(;)
    ident(Draggables)operator(.)ident(unregister)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)
  
  key(currentDelta)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return)operator(([)
      ident(parseInt)operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(element)operator(,)string<delimiter(')content(left)delimiter(')>operator(\)) operator(||) string<delimiter(')content(0)delimiter(')>operator(\))operator(,)
      ident(parseInt)operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(element)operator(,)string<delimiter(')content(top)delimiter(')>operator(\)) operator(||) string<delimiter(')content(0)delimiter(')>operator(\)]\))operator(;)
  operator(})operator(,)
  
  key(initDrag)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator((!)ident(Object)operator(.)ident(isUndefined)operator(()ident(Draggable)operator(.)ident(_dragging)operator([)local_variable(this)operator(.)ident(element)operator(]\)) operator(&&)
      ident(Draggable)operator(.)ident(_dragging)operator([)local_variable(this)operator(.)ident(element)operator(]\)) keyword(return)operator(;)
    keyword(if)operator(()ident(Event)operator(.)ident(isLeftClick)operator(()ident(event)operator(\)\)) operator({)    
      comment(// abort on form elements, fixes a Firefox issue)
      keyword(var) ident(src) operator(=) ident(Event)operator(.)ident(element)operator(()ident(event)operator(\))operator(;)
      keyword(if)operator((()ident(tag_name) operator(=) ident(src)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)\)) operator(&&) operator(()
        ident(tag_name)operator(==)string<delimiter(')content(INPUT)delimiter(')> operator(||)
        ident(tag_name)operator(==)string<delimiter(')content(SELECT)delimiter(')> operator(||)
        ident(tag_name)operator(==)string<delimiter(')content(OPTION)delimiter(')> operator(||)
        ident(tag_name)operator(==)string<delimiter(')content(BUTTON)delimiter(')> operator(||)
        ident(tag_name)operator(==)string<delimiter(')content(TEXTAREA)delimiter(')>operator(\)\)) keyword(return)operator(;)
        
      keyword(var) ident(pointer) operator(=) operator([)ident(Event)operator(.)ident(pointerX)operator(()ident(event)operator(\))operator(,) ident(Event)operator(.)ident(pointerY)operator(()ident(event)operator(\)])operator(;)
      keyword(var) ident(pos)     operator(=) ident(Position)operator(.)ident(cumulativeOffset)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
      local_variable(this)operator(.)ident(offset) operator(=) operator([)integer(0)operator(,)integer(1)operator(])operator(.)ident(map)operator(() keyword(function)operator(()ident(i)operator(\)) operator({) keyword(return) operator(()ident(pointer)operator([)ident(i)operator(]) operator(-) ident(pos)operator([)ident(i)operator(]\)) operator(}\))operator(;)
      
      ident(Draggables)operator(.)ident(activate)operator(()local_variable(this)operator(\))operator(;)
      ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  
  key(startDrag)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    local_variable(this)operator(.)ident(dragging) operator(=) keyword(true)operator(;)
    keyword(if)operator((!)local_variable(this)operator(.)ident(delta)operator(\))
      local_variable(this)operator(.)ident(delta) operator(=) local_variable(this)operator(.)ident(currentDelta)operator(()operator(\))operator(;)
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(zindex)operator(\)) operator({)
      local_variable(this)operator(.)ident(originalZ) operator(=) ident(parseInt)operator(()ident(Element)operator(.)ident(getStyle)operator(()local_variable(this)operator(.)ident(element)operator(,)string<delimiter(')content(z-index)delimiter(')>operator(\)) operator(||) integer(0)operator(\))operator(;)
      local_variable(this)operator(.)ident(element)operator(.)ident(style)operator(.)ident(zIndex) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(zindex)operator(;)
    operator(})
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(ghosting)operator(\)) operator({)
      local_variable(this)operator(.)ident(_clone) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(cloneNode)operator(()keyword(true)operator(\))operator(;)
      local_variable(this)operator(.)ident(element)operator(.)ident(_originallyAbsolute) operator(=) operator(()local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\))operator(;)
      keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(.)ident(_originallyAbsolute)operator(\))
        ident(Position)operator(.)ident(absolutize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
      local_variable(this)operator(.)ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()local_variable(this)operator(.)ident(_clone)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
    operator(})
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\)) operator({)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll) operator(==) ident(window)operator(\)) operator({)
        keyword(var) ident(where) operator(=) local_variable(this)operator(.)ident(_getWindowScroll)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\))operator(;)
        local_variable(this)operator(.)ident(originalScrollLeft) operator(=) ident(where)operator(.)ident(left)operator(;)
        local_variable(this)operator(.)ident(originalScrollTop) operator(=) ident(where)operator(.)ident(top)operator(;)
      operator(}) keyword(else) operator({)
        local_variable(this)operator(.)ident(originalScrollLeft) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollLeft)operator(;)
        local_variable(this)operator(.)ident(originalScrollTop) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTop)operator(;)
      operator(})
    operator(})
    
    ident(Draggables)operator(.)ident(notify)operator(()string<delimiter(')content(onStart)delimiter(')>operator(,) local_variable(this)operator(,) ident(event)operator(\))operator(;)
        
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(starteffect)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(starteffect)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)
  
  key(updateDrag)operator(:) keyword(function)operator(()ident(event)operator(,) ident(pointer)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(dragging)operator(\)) local_variable(this)operator(.)ident(startDrag)operator(()ident(event)operator(\))operator(;)
    
    keyword(if)operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(quiet)operator(\))operator({)
      ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
      ident(Droppables)operator(.)ident(show)operator(()ident(pointer)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
    operator(})
    
    ident(Draggables)operator(.)ident(notify)operator(()string<delimiter(')content(onDrag)delimiter(')>operator(,) local_variable(this)operator(,) ident(event)operator(\))operator(;)
    
    local_variable(this)operator(.)ident(draw)operator(()ident(pointer)operator(\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(change)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(change)operator(()local_variable(this)operator(\))operator(;)
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\)) operator({)
      local_variable(this)operator(.)ident(stopScrolling)operator(()operator(\))operator(;)
      
      keyword(var) ident(p)operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll) operator(==) ident(window)operator(\)) operator({)
        keyword(with)operator(()local_variable(this)operator(.)ident(_getWindowScroll)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\)\)) operator({) ident(p) operator(=) operator([) ident(left)operator(,) ident(top)operator(,) ident(left)operator(+)ident(width)operator(,) ident(top)operator(+)ident(height) operator(])operator(;) operator(})
      operator(}) keyword(else) operator({)
        ident(p) operator(=) ident(Position)operator(.)ident(page)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\))operator(;)
        ident(p)operator([)integer(0)operator(]) operator(+=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollLeft) operator(+) ident(Position)operator(.)ident(deltaX)operator(;)
        ident(p)operator([)integer(1)operator(]) operator(+=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTop) operator(+) ident(Position)operator(.)ident(deltaY)operator(;)
        ident(p)operator(.)ident(push)operator(()ident(p)operator([)integer(0)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(offsetWidth)operator(\))operator(;)
        ident(p)operator(.)ident(push)operator(()ident(p)operator([)integer(1)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(offsetHeight)operator(\))operator(;)
      operator(})
      keyword(var) ident(speed) operator(=) operator([)integer(0)operator(,)integer(0)operator(])operator(;)
      keyword(if)operator(()ident(pointer)operator([)integer(0)operator(]) operator(<) operator(()ident(p)operator([)integer(0)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\)\)) ident(speed)operator([)integer(0)operator(]) operator(=) ident(pointer)operator([)integer(0)operator(])operator(-()ident(p)operator([)integer(0)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\))operator(;)
      keyword(if)operator(()ident(pointer)operator([)integer(1)operator(]) operator(<) operator(()ident(p)operator([)integer(1)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\)\)) ident(speed)operator([)integer(1)operator(]) operator(=) ident(pointer)operator([)integer(1)operator(])operator(-()ident(p)operator([)integer(1)operator(])operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\))operator(;)
      keyword(if)operator(()ident(pointer)operator([)integer(0)operator(]) operator(>) operator(()ident(p)operator([)integer(2)operator(])operator(-)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\)\)) ident(speed)operator([)integer(0)operator(]) operator(=) ident(pointer)operator([)integer(0)operator(])operator(-()ident(p)operator([)integer(2)operator(])operator(-)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\))operator(;)
      keyword(if)operator(()ident(pointer)operator([)integer(1)operator(]) operator(>) operator(()ident(p)operator([)integer(3)operator(])operator(-)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\)\)) ident(speed)operator([)integer(1)operator(]) operator(=) ident(pointer)operator([)integer(1)operator(])operator(-()ident(p)operator([)integer(3)operator(])operator(-)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSensitivity)operator(\))operator(;)
      local_variable(this)operator(.)ident(startScrolling)operator(()ident(speed)operator(\))operator(;)
    operator(})
    
    comment(// fix AppleWebKit rendering)
    keyword(if)operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) ident(window)operator(.)ident(scrollBy)operator(()integer(0)operator(,)integer(0)operator(\))operator(;)
    
    ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(finishDrag)operator(:) keyword(function)operator(()ident(event)operator(,) ident(success)operator(\)) operator({)
    local_variable(this)operator(.)ident(dragging) operator(=) keyword(false)operator(;)
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(quiet)operator(\))operator({)
      ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
      keyword(var) ident(pointer) operator(=) operator([)ident(Event)operator(.)ident(pointerX)operator(()ident(event)operator(\))operator(,) ident(Event)operator(.)ident(pointerY)operator(()ident(event)operator(\)])operator(;)
      ident(Droppables)operator(.)ident(show)operator(()ident(pointer)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
    operator(})

    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(ghosting)operator(\)) operator({)
      keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(.)ident(_originallyAbsolute)operator(\))
        ident(Position)operator(.)ident(relativize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
      keyword(delete) local_variable(this)operator(.)ident(element)operator(.)ident(_originallyAbsolute)operator(;)
      ident(Element)operator(.)ident(remove)operator(()local_variable(this)operator(.)ident(_clone)operator(\))operator(;)
      local_variable(this)operator(.)ident(_clone) operator(=) keyword(null)operator(;)
    operator(})

    keyword(var) ident(dropped) operator(=) keyword(false)operator(;) 
    keyword(if)operator(()ident(success)operator(\)) operator({) 
      ident(dropped) operator(=) ident(Droppables)operator(.)ident(fire)operator(()ident(event)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;) 
      keyword(if) operator((!)ident(dropped)operator(\)) ident(dropped) operator(=) keyword(false)operator(;) 
    operator(})
    keyword(if)operator(()ident(dropped) operator(&&) local_variable(this)operator(.)ident(options)operator(.)ident(onDropped)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(onDropped)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
    ident(Draggables)operator(.)ident(notify)operator(()string<delimiter(')content(onEnd)delimiter(')>operator(,) local_variable(this)operator(,) ident(event)operator(\))operator(;)

    keyword(var) ident(revert) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(revert)operator(;)
    keyword(if)operator(()ident(revert) operator(&&) ident(Object)operator(.)ident(isFunction)operator(()ident(revert)operator(\)\)) ident(revert) operator(=) ident(revert)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
    
    keyword(var) ident(d) operator(=) local_variable(this)operator(.)ident(currentDelta)operator(()operator(\))operator(;)
    keyword(if)operator(()ident(revert) operator(&&) local_variable(this)operator(.)ident(options)operator(.)ident(reverteffect)operator(\)) operator({)
      keyword(if) operator(()ident(dropped) operator(==) integer(0) operator(||) ident(revert) operator(!=) string<delimiter(')content(failure)delimiter(')>operator(\))
        local_variable(this)operator(.)ident(options)operator(.)ident(reverteffect)operator(()local_variable(this)operator(.)ident(element)operator(,)
          ident(d)operator([)integer(1)operator(])operator(-)local_variable(this)operator(.)ident(delta)operator([)integer(1)operator(])operator(,) ident(d)operator([)integer(0)operator(])operator(-)local_variable(this)operator(.)ident(delta)operator([)integer(0)operator(]\))operator(;)
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(delta) operator(=) ident(d)operator(;)
    operator(})

    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(zindex)operator(\))
      local_variable(this)operator(.)ident(element)operator(.)ident(style)operator(.)ident(zIndex) operator(=) local_variable(this)operator(.)ident(originalZ)operator(;)

    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(endeffect)operator(\)) 
      local_variable(this)operator(.)ident(options)operator(.)ident(endeffect)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
      
    ident(Draggables)operator(.)ident(deactivate)operator(()local_variable(this)operator(\))operator(;)
    ident(Droppables)operator(.)ident(reset)operator(()operator(\))operator(;)
  operator(})operator(,)
  
  key(keyPress)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator(()ident(event)operator(.)ident(keyCode)operator(!=)ident(Event)operator(.)ident(KEY_ESC)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(finishDrag)operator(()ident(event)operator(,) keyword(false)operator(\))operator(;)
    ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(endDrag)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(if)operator((!)local_variable(this)operator(.)ident(dragging)operator(\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(stopScrolling)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(finishDrag)operator(()ident(event)operator(,) keyword(true)operator(\))operator(;)
    ident(Event)operator(.)ident(stop)operator(()ident(event)operator(\))operator(;)
  operator(})operator(,)
  
  key(draw)operator(:) keyword(function)operator(()ident(point)operator(\)) operator({)
    keyword(var) ident(pos) operator(=) ident(Position)operator(.)ident(cumulativeOffset)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(ghosting)operator(\)) operator({)
      keyword(var) ident(r)   operator(=) ident(Position)operator(.)ident(realOffset)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
      ident(pos)operator([)integer(0)operator(]) operator(+=) ident(r)operator([)integer(0)operator(]) operator(-) ident(Position)operator(.)ident(deltaX)operator(;) ident(pos)operator([)integer(1)operator(]) operator(+=) ident(r)operator([)integer(1)operator(]) operator(-) ident(Position)operator(.)ident(deltaY)operator(;)
    operator(})
    
    keyword(var) ident(d) operator(=) local_variable(this)operator(.)ident(currentDelta)operator(()operator(\))operator(;)
    ident(pos)operator([)integer(0)operator(]) operator(-=) ident(d)operator([)integer(0)operator(])operator(;) ident(pos)operator([)integer(1)operator(]) operator(-=) ident(d)operator([)integer(1)operator(])operator(;)
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll) operator(&&) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll) operator(!=) ident(window) operator(&&) local_variable(this)operator(.)ident(_isScrollChild)operator(\)\)) operator({)
      ident(pos)operator([)integer(0)operator(]) operator(-=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollLeft)operator(-)local_variable(this)operator(.)ident(originalScrollLeft)operator(;)
      ident(pos)operator([)integer(1)operator(]) operator(-=) local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTop)operator(-)local_variable(this)operator(.)ident(originalScrollTop)operator(;)
    operator(})
    
    keyword(var) ident(p) operator(=) operator([)integer(0)operator(,)integer(1)operator(])operator(.)ident(map)operator(()keyword(function)operator(()ident(i)operator(\))operator({) 
      keyword(return) operator(()ident(point)operator([)ident(i)operator(])operator(-)ident(pos)operator([)ident(i)operator(])operator(-)local_variable(this)operator(.)ident(offset)operator([)ident(i)operator(]\)) 
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator(\)) operator({)
      keyword(if)operator(()ident(Object)operator(.)ident(isFunction)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator(\)\)) operator({)
        ident(p) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator(()ident(p)operator([)integer(0)operator(])operator(,)ident(p)operator([)integer(1)operator(])operator(,)local_variable(this)operator(\))operator(;)
      operator(}) keyword(else) operator({)
      keyword(if)operator(()ident(Object)operator(.)ident(isArray)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator(\)\)) operator({)
        ident(p) operator(=) ident(p)operator(.)ident(map)operator(() keyword(function)operator(()ident(v)operator(,) ident(i)operator(\)) operator({)
          keyword(return) operator(()ident(v)operator(/)local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator([)ident(i)operator(]\))operator(.)ident(round)operator(()operator(\))operator(*)local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator([)ident(i)operator(]) operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))
      operator(}) keyword(else) operator({)
        ident(p) operator(=) ident(p)operator(.)ident(map)operator(() keyword(function)operator(()ident(v)operator(\)) operator({)
          keyword(return) operator(()ident(v)operator(/)local_variable(this)operator(.)ident(options)operator(.)ident(snap)operator(\))operator(.)ident(round)operator(()operator(\))operator(*)local_variable(this)operator(.)ident(options)operator(.)ident(snap) operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))
      operator(})
    operator(}})
    
    keyword(var) ident(style) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(style)operator(;)
    keyword(if)operator(((!)local_variable(this)operator(.)ident(options)operator(.)ident(constraint)operator(\)) operator(||) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(constraint)operator(==)string<delimiter(')content(horizontal)delimiter(')>operator(\)\))
      ident(style)operator(.)ident(left) operator(=) ident(p)operator([)integer(0)operator(]) operator(+) string<delimiter(")content(px)delimiter(")>operator(;)
    keyword(if)operator(((!)local_variable(this)operator(.)ident(options)operator(.)ident(constraint)operator(\)) operator(||) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(constraint)operator(==)string<delimiter(')content(vertical)delimiter(')>operator(\)\))
      ident(style)operator(.)ident(top)  operator(=) ident(p)operator([)integer(1)operator(]) operator(+) string<delimiter(")content(px)delimiter(")>operator(;)
    
    keyword(if)operator(()ident(style)operator(.)ident(visibility)operator(==)string<delimiter(")content(hidden)delimiter(")>operator(\)) ident(style)operator(.)ident(visibility) operator(=) string<delimiter(")delimiter(")>operator(;) comment(// fix gecko rendering)
  operator(})operator(,)
  
  key(stopScrolling)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()local_variable(this)operator(.)ident(scrollInterval)operator(\)) operator({)
      ident(clearInterval)operator(()local_variable(this)operator(.)ident(scrollInterval)operator(\))operator(;)
      local_variable(this)operator(.)ident(scrollInterval) operator(=) keyword(null)operator(;)
      ident(Draggables)operator(.)ident(_lastScrollPointer) operator(=) keyword(null)operator(;)
    operator(})
  operator(})operator(,)
  
  key(startScrolling)operator(:) keyword(function)operator(()ident(speed)operator(\)) operator({)
    keyword(if)operator((!()ident(speed)operator([)integer(0)operator(]) operator(||) ident(speed)operator([)integer(1)operator(]\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(scrollSpeed) operator(=) operator([)ident(speed)operator([)integer(0)operator(])operator(*)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSpeed)operator(,)ident(speed)operator([)integer(1)operator(])operator(*)local_variable(this)operator(.)ident(options)operator(.)ident(scrollSpeed)operator(])operator(;)
    local_variable(this)operator(.)ident(lastScrolled) operator(=) keyword(new) ident(Date)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(scrollInterval) operator(=) ident(setInterval)operator(()local_variable(this)operator(.)ident(scroll)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) integer(10)operator(\))operator(;)
  operator(})operator(,)
  
  key(scroll)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(current) operator(=) keyword(new) ident(Date)operator(()operator(\))operator(;)
    keyword(var) ident(delta) operator(=) ident(current) operator(-) local_variable(this)operator(.)ident(lastScrolled)operator(;)
    local_variable(this)operator(.)ident(lastScrolled) operator(=) ident(current)operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll) operator(==) ident(window)operator(\)) operator({)
      keyword(with) operator(()local_variable(this)operator(.)ident(_getWindowScroll)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(\)\)) operator({)
        keyword(if) operator(()local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(0)operator(]) operator(||) local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(1)operator(]\)) operator({)
          keyword(var) ident(d) operator(=) ident(delta) operator(/) integer(1000)operator(;)
          local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTo)operator(() ident(left) operator(+) ident(d)operator(*)local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(0)operator(])operator(,) ident(top) operator(+) ident(d)operator(*)local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(1)operator(]) operator(\))operator(;)
        operator(})
      operator(})
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollLeft) operator(+=) local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(0)operator(]) operator(*) ident(delta) operator(/) integer(1000)operator(;)
      local_variable(this)operator(.)ident(options)operator(.)ident(scroll)operator(.)ident(scrollTop)  operator(+=) local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(1)operator(]) operator(*) ident(delta) operator(/) integer(1000)operator(;)
    operator(})
    
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
    ident(Droppables)operator(.)ident(show)operator(()ident(Draggables)operator(.)ident(_lastPointer)operator(,) local_variable(this)operator(.)ident(element)operator(\))operator(;)
    ident(Draggables)operator(.)ident(notify)operator(()string<delimiter(')content(onDrag)delimiter(')>operator(,) local_variable(this)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(_isScrollChild)operator(\)) operator({)
      ident(Draggables)operator(.)ident(_lastScrollPointer) operator(=) ident(Draggables)operator(.)ident(_lastScrollPointer) operator(||) predefined($A)operator(()ident(Draggables)operator(.)ident(_lastPointer)operator(\))operator(;)
      ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(0)operator(]) operator(+=) local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(0)operator(]) operator(*) ident(delta) operator(/) integer(1000)operator(;)
      ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(1)operator(]) operator(+=) local_variable(this)operator(.)ident(scrollSpeed)operator([)integer(1)operator(]) operator(*) ident(delta) operator(/) integer(1000)operator(;)
      keyword(if) operator(()ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(0)operator(]) operator(<) integer(0)operator(\))
        ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(0)operator(]) operator(=) integer(0)operator(;)
      keyword(if) operator(()ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(1)operator(]) operator(<) integer(0)operator(\))
        ident(Draggables)operator(.)ident(_lastScrollPointer)operator([)integer(1)operator(]) operator(=) integer(0)operator(;)
      local_variable(this)operator(.)ident(draw)operator(()ident(Draggables)operator(.)ident(_lastScrollPointer)operator(\))operator(;)
    operator(})
    
    keyword(if)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(change)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(change)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)
  
  key(_getWindowScroll)operator(:) keyword(function)operator(()ident(w)operator(\)) operator({)
    keyword(var) ident(T)operator(,) ident(L)operator(,) ident(W)operator(,) ident(H)operator(;)
    keyword(with) operator(()ident(w)operator(.)ident(document)operator(\)) operator({)
      keyword(if) operator(()ident(w)operator(.)ident(document)operator(.)ident(documentElement) operator(&&) ident(documentElement)operator(.)ident(scrollTop)operator(\)) operator({)
        ident(T) operator(=) ident(documentElement)operator(.)ident(scrollTop)operator(;)
        ident(L) operator(=) ident(documentElement)operator(.)ident(scrollLeft)operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(w)operator(.)ident(document)operator(.)ident(body)operator(\)) operator({)
        ident(T) operator(=) ident(body)operator(.)ident(scrollTop)operator(;)
        ident(L) operator(=) ident(body)operator(.)ident(scrollLeft)operator(;)
      operator(})
      keyword(if) operator(()ident(w)operator(.)ident(innerWidth)operator(\)) operator({)
        ident(W) operator(=) ident(w)operator(.)ident(innerWidth)operator(;)
        ident(H) operator(=) ident(w)operator(.)ident(innerHeight)operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(w)operator(.)ident(document)operator(.)ident(documentElement) operator(&&) ident(documentElement)operator(.)ident(clientWidth)operator(\)) operator({)
        ident(W) operator(=) ident(documentElement)operator(.)ident(clientWidth)operator(;)
        ident(H) operator(=) ident(documentElement)operator(.)ident(clientHeight)operator(;)
      operator(}) keyword(else) operator({)
        ident(W) operator(=) ident(body)operator(.)ident(offsetWidth)operator(;)
        ident(H) operator(=) ident(body)operator(.)ident(offsetHeight)
      operator(})
    operator(})
    keyword(return) operator({) key(top)operator(:) ident(T)operator(,) key(left)operator(:) ident(L)operator(,) key(width)operator(:) ident(W)operator(,) key(height)operator(:) ident(H) operator(})operator(;)
  operator(})
operator(}\))operator(;)

ident(Draggable)operator(.)ident(_dragging) operator(=) operator({) operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(SortableObserver) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(observer)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)   operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(observer)  operator(=) ident(observer)operator(;)
    local_variable(this)operator(.)ident(lastValue) operator(=) ident(Sortable)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)
  
  key(onStart)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(lastValue) operator(=) ident(Sortable)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)
  
  key(onEnd)operator(:) keyword(function)operator(()operator(\)) operator({)
    ident(Sortable)operator(.)ident(unmark)operator(()operator(\))operator(;)
    keyword(if)operator(()local_variable(this)operator(.)ident(lastValue) operator(!=) ident(Sortable)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\)\))
      local_variable(this)operator(.)ident(observer)operator(()local_variable(this)operator(.)ident(element)operator(\))
  operator(})
operator(}\))operator(;)

keyword(var) ident(Sortable) operator(=) operator({)
  key(SERIALIZE_RULE)operator(:) regexp<delimiter(/)content(^[^_)content(\\-)content(](?:[A-Za-z0-9)content(\\-)content(\\_)content(]*\)[_](.*\)$)delimiter(/)>operator(,)
  
  key(sortables)operator(:) operator({) operator(})operator(,)
  
  key(_findRootElement)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(while) operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(!=) string<delimiter(")content(BODY)delimiter(")>operator(\)) operator({)  
      keyword(if)operator(()ident(element)operator(.)ident(id) operator(&&) ident(Sortable)operator(.)ident(sortables)operator([)ident(element)operator(.)ident(id)operator(]\)) keyword(return) ident(element)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
    operator(})
  operator(})operator(,)

  key(options)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) ident(Sortable)operator(.)ident(_findRootElement)operator(()predefined($)operator(()ident(element)operator(\)\))operator(;)
    keyword(if)operator((!)ident(element)operator(\)) keyword(return)operator(;)
    keyword(return) ident(Sortable)operator(.)ident(sortables)operator([)ident(element)operator(.)ident(id)operator(])operator(;)
  operator(})operator(,)
  
  key(destroy)operator(:) keyword(function)operator(()ident(element)operator(\))operator({)
    keyword(var) ident(s) operator(=) ident(Sortable)operator(.)ident(options)operator(()ident(element)operator(\))operator(;)
    
    keyword(if)operator(()ident(s)operator(\)) operator({)
      ident(Draggables)operator(.)ident(removeObserver)operator(()ident(s)operator(.)ident(element)operator(\))operator(;)
      ident(s)operator(.)ident(droppables)operator(.)ident(each)operator(()keyword(function)operator(()ident(d)operator(\))operator({) ident(Droppables)operator(.)ident(remove)operator(()ident(d)operator(\)) operator(}\))operator(;)
      ident(s)operator(.)ident(draggables)operator(.)ident(invoke)operator(()string<delimiter(')content(destroy)delimiter(')>operator(\))operator(;)
      
      keyword(delete) ident(Sortable)operator(.)ident(sortables)operator([)ident(s)operator(.)ident(element)operator(.)ident(id)operator(])operator(;)
    operator(})
  operator(})operator(,)

  key(create)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) 
      key(element)operator(:)     ident(element)operator(,)
      key(tag)operator(:)         string<delimiter(')content(li)delimiter(')>operator(,)       comment(// assumes li children, override with tag: 'tagname')
      key(dropOnEmpty)operator(:) keyword(false)operator(,)
      key(tree)operator(:)        keyword(false)operator(,)
      key(treeTag)operator(:)     string<delimiter(')content(ul)delimiter(')>operator(,)
      key(overlap)operator(:)     string<delimiter(')content(vertical)delimiter(')>operator(,) comment(// one of 'vertical', 'horizontal')
      key(constraint)operator(:)  string<delimiter(')content(vertical)delimiter(')>operator(,) comment(// one of 'vertical', 'horizontal', false)
      key(containment)operator(:) ident(element)operator(,)    comment(// also takes array of elements (or id's\); or false)
      key(handle)operator(:)      keyword(false)operator(,)      comment(// or a CSS class)
      key(only)operator(:)        keyword(false)operator(,)
      key(delay)operator(:)       integer(0)operator(,)
      key(hoverclass)operator(:)  keyword(null)operator(,)
      key(ghosting)operator(:)    keyword(false)operator(,)
      key(quiet)operator(:)       keyword(false)operator(,) 
      key(scroll)operator(:)      keyword(false)operator(,)
      key(scrollSensitivity)operator(:) integer(20)operator(,)
      key(scrollSpeed)operator(:) integer(15)operator(,)
      key(format)operator(:)      local_variable(this)operator(.)ident(SERIALIZE_RULE)operator(,)
      
      comment(// these take arrays of elements or ids and can be )
      comment(// used for better initialization performance)
      key(elements)operator(:)    keyword(false)operator(,)
      key(handles)operator(:)     keyword(false)operator(,)
      
      key(onChange)operator(:)    ident(Prototype)operator(.)ident(emptyFunction)operator(,)
      key(onUpdate)operator(:)    ident(Prototype)operator(.)ident(emptyFunction)
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)

    comment(// clear any old sortable with same element)
    local_variable(this)operator(.)ident(destroy)operator(()ident(element)operator(\))operator(;)

    comment(// build options for the draggables)
    keyword(var) ident(options_for_draggable) operator(=) operator({)
      key(revert)operator(:)      keyword(true)operator(,)
      key(quiet)operator(:)       ident(options)operator(.)ident(quiet)operator(,)
      key(scroll)operator(:)      ident(options)operator(.)ident(scroll)operator(,)
      key(scrollSpeed)operator(:) ident(options)operator(.)ident(scrollSpeed)operator(,)
      key(scrollSensitivity)operator(:) ident(options)operator(.)ident(scrollSensitivity)operator(,)
      key(delay)operator(:)       ident(options)operator(.)ident(delay)operator(,)
      key(ghosting)operator(:)    ident(options)operator(.)ident(ghosting)operator(,)
      key(constraint)operator(:)  ident(options)operator(.)ident(constraint)operator(,)
      key(handle)operator(:)      ident(options)operator(.)ident(handle) operator(})operator(;)

    keyword(if)operator(()ident(options)operator(.)ident(starteffect)operator(\))
      ident(options_for_draggable)operator(.)ident(starteffect) operator(=) ident(options)operator(.)ident(starteffect)operator(;)

    keyword(if)operator(()ident(options)operator(.)ident(reverteffect)operator(\))
      ident(options_for_draggable)operator(.)ident(reverteffect) operator(=) ident(options)operator(.)ident(reverteffect)operator(;)
    keyword(else)
      keyword(if)operator(()ident(options)operator(.)ident(ghosting)operator(\)) ident(options_for_draggable)operator(.)ident(reverteffect) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
        ident(element)operator(.)ident(style)operator(.)ident(top)  operator(=) integer(0)operator(;)
        ident(element)operator(.)ident(style)operator(.)ident(left) operator(=) integer(0)operator(;)
      operator(})operator(;)

    keyword(if)operator(()ident(options)operator(.)ident(endeffect)operator(\))
      ident(options_for_draggable)operator(.)ident(endeffect) operator(=) ident(options)operator(.)ident(endeffect)operator(;)

    keyword(if)operator(()ident(options)operator(.)ident(zindex)operator(\))
      ident(options_for_draggable)operator(.)ident(zindex) operator(=) ident(options)operator(.)ident(zindex)operator(;)

    comment(// build options for the droppables  )
    keyword(var) ident(options_for_droppable) operator(=) operator({)
      key(overlap)operator(:)     ident(options)operator(.)ident(overlap)operator(,)
      key(containment)operator(:) ident(options)operator(.)ident(containment)operator(,)
      key(tree)operator(:)        ident(options)operator(.)ident(tree)operator(,)
      key(hoverclass)operator(:)  ident(options)operator(.)ident(hoverclass)operator(,)
      key(onHover)operator(:)     ident(Sortable)operator(.)ident(onHover)
    operator(})
    
    keyword(var) ident(options_for_tree) operator(=) operator({)
      key(onHover)operator(:)      ident(Sortable)operator(.)ident(onEmptyHover)operator(,)
      key(overlap)operator(:)      ident(options)operator(.)ident(overlap)operator(,)
      key(containment)operator(:)  ident(options)operator(.)ident(containment)operator(,)
      key(hoverclass)operator(:)   ident(options)operator(.)ident(hoverclass)
    operator(})

    comment(// fix for gecko engine)
    ident(Element)operator(.)ident(cleanWhitespace)operator(()ident(element)operator(\))operator(;) 

    ident(options)operator(.)ident(draggables) operator(=) operator([)operator(])operator(;)
    ident(options)operator(.)ident(droppables) operator(=) operator([)operator(])operator(;)

    comment(// drop on empty handling)
    keyword(if)operator(()ident(options)operator(.)ident(dropOnEmpty) operator(||) ident(options)operator(.)ident(tree)operator(\)) operator({)
      ident(Droppables)operator(.)ident(add)operator(()ident(element)operator(,) ident(options_for_tree)operator(\))operator(;)
      ident(options)operator(.)ident(droppables)operator(.)ident(push)operator(()ident(element)operator(\))operator(;)
    operator(})

    operator(()ident(options)operator(.)ident(elements) operator(||) local_variable(this)operator(.)ident(findElements)operator(()ident(element)operator(,) ident(options)operator(\)) operator(||) operator([)operator(]\))operator(.)ident(each)operator(() keyword(function)operator(()ident(e)operator(,)ident(i)operator(\)) operator({)
      keyword(var) ident(handle) operator(=) ident(options)operator(.)ident(handles) operator(?) predefined($)operator(()ident(options)operator(.)ident(handles)operator([)ident(i)operator(]\)) operator(:)
        operator(()ident(options)operator(.)ident(handle) operator(?) predefined($)operator(()ident(e)operator(\))operator(.)ident(select)operator(()string<delimiter(')content(.)delimiter(')> operator(+) ident(options)operator(.)ident(handle)operator(\))operator([)integer(0)operator(]) operator(:) ident(e)operator(\))operator(;) 
      ident(options)operator(.)ident(draggables)operator(.)ident(push)operator(()
        keyword(new) ident(Draggable)operator(()ident(e)operator(,) ident(Object)operator(.)ident(extend)operator(()ident(options_for_draggable)operator(,) operator({) key(handle)operator(:) ident(handle) operator(}\)\)\))operator(;)
      ident(Droppables)operator(.)ident(add)operator(()ident(e)operator(,) ident(options_for_droppable)operator(\))operator(;)
      keyword(if)operator(()ident(options)operator(.)ident(tree)operator(\)) ident(e)operator(.)ident(treeNode) operator(=) ident(element)operator(;)
      ident(options)operator(.)ident(droppables)operator(.)ident(push)operator(()ident(e)operator(\))operator(;)      
    operator(}\))operator(;)
    
    keyword(if)operator(()ident(options)operator(.)ident(tree)operator(\)) operator({)
      operator(()ident(Sortable)operator(.)ident(findTreeElements)operator(()ident(element)operator(,) ident(options)operator(\)) operator(||) operator([)operator(]\))operator(.)ident(each)operator(() keyword(function)operator(()ident(e)operator(\)) operator({)
        ident(Droppables)operator(.)ident(add)operator(()ident(e)operator(,) ident(options_for_tree)operator(\))operator(;)
        ident(e)operator(.)ident(treeNode) operator(=) ident(element)operator(;)
        ident(options)operator(.)ident(droppables)operator(.)ident(push)operator(()ident(e)operator(\))operator(;)
      operator(}\))operator(;)
    operator(})

    comment(// keep reference)
    local_variable(this)operator(.)ident(sortables)operator([)ident(element)operator(.)ident(id)operator(]) operator(=) ident(options)operator(;)

    comment(// for onupdate)
    ident(Draggables)operator(.)ident(addObserver)operator(()keyword(new) ident(SortableObserver)operator(()ident(element)operator(,) ident(options)operator(.)ident(onUpdate)operator(\)\))operator(;)

  operator(})operator(,)

  comment(// return all suitable-for-sortable elements in a guaranteed order)
  key(findElements)operator(:) keyword(function)operator(()ident(element)operator(,) ident(options)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(findChildren)operator(()
      ident(element)operator(,) ident(options)operator(.)ident(only)operator(,) ident(options)operator(.)ident(tree) operator(?) keyword(true) operator(:) keyword(false)operator(,) ident(options)operator(.)ident(tag)operator(\))operator(;)
  operator(})operator(,)
  
  key(findTreeElements)operator(:) keyword(function)operator(()ident(element)operator(,) ident(options)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(findChildren)operator(()
      ident(element)operator(,) ident(options)operator(.)ident(only)operator(,) ident(options)operator(.)ident(tree) operator(?) keyword(true) operator(:) keyword(false)operator(,) ident(options)operator(.)ident(treeTag)operator(\))operator(;)
  operator(})operator(,)

  key(onHover)operator(:) keyword(function)operator(()ident(element)operator(,) ident(dropon)operator(,) ident(overlap)operator(\)) operator({)
    keyword(if)operator(()ident(Element)operator(.)ident(isParent)operator(()ident(dropon)operator(,) ident(element)operator(\)\)) keyword(return)operator(;)

    keyword(if)operator(()ident(overlap) operator(>) error(.)integer(33) operator(&&) ident(overlap) operator(<) error(.)integer(66) operator(&&) ident(Sortable)operator(.)ident(options)operator(()ident(dropon)operator(\))operator(.)ident(tree)operator(\)) operator({)
      keyword(return)operator(;)
    operator(}) keyword(else) keyword(if)operator(()ident(overlap)operator(>)float(0.5)operator(\)) operator({)
      ident(Sortable)operator(.)ident(mark)operator(()ident(dropon)operator(,) string<delimiter(')content(before)delimiter(')>operator(\))operator(;)
      keyword(if)operator(()ident(dropon)operator(.)ident(previousSibling) operator(!=) ident(element)operator(\)) operator({)
        keyword(var) ident(oldParentNode) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
        ident(element)operator(.)ident(style)operator(.)ident(visibility) operator(=) string<delimiter(")content(hidden)delimiter(")>operator(;) comment(// fix gecko rendering)
        ident(dropon)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(element)operator(,) ident(dropon)operator(\))operator(;)
        keyword(if)operator(()ident(dropon)operator(.)ident(parentNode)operator(!=)ident(oldParentNode)operator(\)) 
          ident(Sortable)operator(.)ident(options)operator(()ident(oldParentNode)operator(\))operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
        ident(Sortable)operator(.)ident(options)operator(()ident(dropon)operator(.)ident(parentNode)operator(\))operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
      operator(})
    operator(}) keyword(else) operator({)
      ident(Sortable)operator(.)ident(mark)operator(()ident(dropon)operator(,) string<delimiter(')content(after)delimiter(')>operator(\))operator(;)
      keyword(var) ident(nextElement) operator(=) ident(dropon)operator(.)ident(nextSibling) operator(||) keyword(null)operator(;)
      keyword(if)operator(()ident(nextElement) operator(!=) ident(element)operator(\)) operator({)
        keyword(var) ident(oldParentNode) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
        ident(element)operator(.)ident(style)operator(.)ident(visibility) operator(=) string<delimiter(")content(hidden)delimiter(")>operator(;) comment(// fix gecko rendering)
        ident(dropon)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(element)operator(,) ident(nextElement)operator(\))operator(;)
        keyword(if)operator(()ident(dropon)operator(.)ident(parentNode)operator(!=)ident(oldParentNode)operator(\)) 
          ident(Sortable)operator(.)ident(options)operator(()ident(oldParentNode)operator(\))operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
        ident(Sortable)operator(.)ident(options)operator(()ident(dropon)operator(.)ident(parentNode)operator(\))operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
      operator(})
    operator(})
  operator(})operator(,)
  
  key(onEmptyHover)operator(:) keyword(function)operator(()ident(element)operator(,) ident(dropon)operator(,) ident(overlap)operator(\)) operator({)
    keyword(var) ident(oldParentNode) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
    keyword(var) ident(droponOptions) operator(=) ident(Sortable)operator(.)ident(options)operator(()ident(dropon)operator(\))operator(;)
        
    keyword(if)operator((!)ident(Element)operator(.)ident(isParent)operator(()ident(dropon)operator(,) ident(element)operator(\)\)) operator({)
      keyword(var) ident(index)operator(;)
      
      keyword(var) ident(children) operator(=) ident(Sortable)operator(.)ident(findElements)operator(()ident(dropon)operator(,) operator({)key(tag)operator(:) ident(droponOptions)operator(.)ident(tag)operator(,) key(only)operator(:) ident(droponOptions)operator(.)ident(only)operator(}\))operator(;)
      keyword(var) ident(child) operator(=) keyword(null)operator(;)
            
      keyword(if)operator(()ident(children)operator(\)) operator({)
        keyword(var) ident(offset) operator(=) ident(Element)operator(.)ident(offsetSize)operator(()ident(dropon)operator(,) ident(droponOptions)operator(.)ident(overlap)operator(\)) operator(*) operator(()float(1.0) operator(-) ident(overlap)operator(\))operator(;)
        
        keyword(for) operator(()ident(index) operator(=) integer(0)operator(;) ident(index) operator(<) ident(children)operator(.)ident(length)operator(;) ident(index) operator(+=) integer(1)operator(\)) operator({)
          keyword(if) operator(()ident(offset) operator(-) ident(Element)operator(.)ident(offsetSize) operator(()ident(children)operator([)ident(index)operator(])operator(,) ident(droponOptions)operator(.)ident(overlap)operator(\)) operator(>=) integer(0)operator(\)) operator({)
            ident(offset) operator(-=) ident(Element)operator(.)ident(offsetSize) operator(()ident(children)operator([)ident(index)operator(])operator(,) ident(droponOptions)operator(.)ident(overlap)operator(\))operator(;)
          operator(}) keyword(else) keyword(if) operator(()ident(offset) operator(-) operator(()ident(Element)operator(.)ident(offsetSize) operator(()ident(children)operator([)ident(index)operator(])operator(,) ident(droponOptions)operator(.)ident(overlap)operator(\)) operator(/) integer(2)operator(\)) operator(>=) integer(0)operator(\)) operator({)
            ident(child) operator(=) ident(index) operator(+) integer(1) operator(<) ident(children)operator(.)ident(length) operator(?) ident(children)operator([)ident(index) operator(+) integer(1)operator(]) operator(:) keyword(null)operator(;)
            keyword(break)operator(;)
          operator(}) keyword(else) operator({)
            ident(child) operator(=) ident(children)operator([)ident(index)operator(])operator(;)
            keyword(break)operator(;)
          operator(})
        operator(})
      operator(})
      
      ident(dropon)operator(.)ident(insertBefore)operator(()ident(element)operator(,) ident(child)operator(\))operator(;)
      
      ident(Sortable)operator(.)ident(options)operator(()ident(oldParentNode)operator(\))operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
      ident(droponOptions)operator(.)ident(onChange)operator(()ident(element)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(unmark)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if)operator(()ident(Sortable)operator(.)ident(_marker)operator(\)) ident(Sortable)operator(.)ident(_marker)operator(.)ident(hide)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(mark)operator(:) keyword(function)operator(()ident(dropon)operator(,) ident(position)operator(\)) operator({)
    comment(// mark on ghosting only)
    keyword(var) ident(sortable) operator(=) ident(Sortable)operator(.)ident(options)operator(()ident(dropon)operator(.)ident(parentNode)operator(\))operator(;)
    keyword(if)operator(()ident(sortable) operator(&&) operator(!)ident(sortable)operator(.)ident(ghosting)operator(\)) keyword(return)operator(;) 

    keyword(if)operator((!)ident(Sortable)operator(.)ident(_marker)operator(\)) operator({)
      ident(Sortable)operator(.)ident(_marker) operator(=) 
        operator(()predefined($)operator(()string<delimiter(')content(dropmarker)delimiter(')>operator(\)) operator(||) ident(Element)operator(.)ident(extend)operator(()ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(DIV)delimiter(')>operator(\)\)\))operator(.)
          ident(hide)operator(()operator(\))operator(.)ident(addClassName)operator(()string<delimiter(')content(dropmarker)delimiter(')>operator(\))operator(.)ident(setStyle)operator(({)key(position)operator(:)string<delimiter(')content(absolute)delimiter(')>operator(}\))operator(;)
      ident(document)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(body)delimiter(")>operator(\))operator(.)ident(item)operator(()integer(0)operator(\))operator(.)ident(appendChild)operator(()ident(Sortable)operator(.)ident(_marker)operator(\))operator(;)
    operator(})    
    keyword(var) ident(offsets) operator(=) ident(Position)operator(.)ident(cumulativeOffset)operator(()ident(dropon)operator(\))operator(;)
    ident(Sortable)operator(.)ident(_marker)operator(.)ident(setStyle)operator(({)key(left)operator(:) ident(offsets)operator([)integer(0)operator(])operator(+)string<delimiter(')content(px)delimiter(')>operator(,) key(top)operator(:) ident(offsets)operator([)integer(1)operator(]) operator(+) string<delimiter(')content(px)delimiter(')>operator(}\))operator(;)
    
    keyword(if)operator(()ident(position)operator(==)string<delimiter(')content(after)delimiter(')>operator(\))
      keyword(if)operator(()ident(sortable)operator(.)ident(overlap) operator(==) string<delimiter(')content(horizontal)delimiter(')>operator(\)) 
        ident(Sortable)operator(.)ident(_marker)operator(.)ident(setStyle)operator(({)key(left)operator(:) operator(()ident(offsets)operator([)integer(0)operator(])operator(+)ident(dropon)operator(.)ident(clientWidth)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(}\))operator(;)
      keyword(else)
        ident(Sortable)operator(.)ident(_marker)operator(.)ident(setStyle)operator(({)key(top)operator(:) operator(()ident(offsets)operator([)integer(1)operator(])operator(+)ident(dropon)operator(.)ident(clientHeight)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(}\))operator(;)
    
    ident(Sortable)operator(.)ident(_marker)operator(.)ident(show)operator(()operator(\))operator(;)
  operator(})operator(,)
  
  key(_tree)operator(:) keyword(function)operator(()ident(element)operator(,) ident(options)operator(,) ident(parent)operator(\)) operator({)
    keyword(var) ident(children) operator(=) ident(Sortable)operator(.)ident(findElements)operator(()ident(element)operator(,) ident(options)operator(\)) operator(||) operator([)operator(])operator(;)
  
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) ident(children)operator(.)ident(length)operator(;) operator(++)ident(i)operator(\)) operator({)
      keyword(var) ident(match) operator(=) ident(children)operator([)ident(i)operator(])operator(.)ident(id)operator(.)ident(match)operator(()ident(options)operator(.)ident(format)operator(\))operator(;)

      keyword(if) operator((!)ident(match)operator(\)) keyword(continue)operator(;)
      
      keyword(var) ident(child) operator(=) operator({)
        key(id)operator(:) ident(encodeURIComponent)operator(()ident(match) operator(?) ident(match)operator([)integer(1)operator(]) operator(:) keyword(null)operator(\))operator(,)
        key(element)operator(:) ident(element)operator(,)
        key(parent)operator(:) ident(parent)operator(,)
        key(children)operator(:) operator([)operator(])operator(,)
        key(position)operator(:) ident(parent)operator(.)ident(children)operator(.)ident(length)operator(,)
        key(container)operator(:) predefined($)operator(()ident(children)operator([)ident(i)operator(]\))operator(.)ident(down)operator(()ident(options)operator(.)ident(treeTag)operator(\))
      operator(})
      
      comment(/* Get the element containing the children and recurse over it */)
      keyword(if) operator(()ident(child)operator(.)ident(container)operator(\))
        local_variable(this)operator(.)ident(_tree)operator(()ident(child)operator(.)ident(container)operator(,) ident(options)operator(,) ident(child)operator(\))
      
      ident(parent)operator(.)ident(children)operator(.)ident(push) operator(()ident(child)operator(\))operator(;)
    operator(})

    keyword(return) ident(parent)operator(;) 
  operator(})operator(,)

  key(tree)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(sortableOptions) operator(=) local_variable(this)operator(.)ident(options)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(tag)operator(:) ident(sortableOptions)operator(.)ident(tag)operator(,)
      key(treeTag)operator(:) ident(sortableOptions)operator(.)ident(treeTag)operator(,)
      key(only)operator(:) ident(sortableOptions)operator(.)ident(only)operator(,)
      key(name)operator(:) ident(element)operator(.)ident(id)operator(,)
      key(format)operator(:) ident(sortableOptions)operator(.)ident(format)
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    
    keyword(var) ident(root) operator(=) operator({)
      key(id)operator(:) keyword(null)operator(,)
      key(parent)operator(:) keyword(null)operator(,)
      key(children)operator(:) operator([)operator(])operator(,)
      key(container)operator(:) ident(element)operator(,)
      key(position)operator(:) integer(0)
    operator(})
    
    keyword(return) ident(Sortable)operator(.)ident(_tree)operator(()ident(element)operator(,) ident(options)operator(,) ident(root)operator(\))operator(;)
  operator(})operator(,)

  comment(/* Construct a [i] index for a particular node */)
  key(_constructIndex)operator(:) keyword(function)operator(()ident(node)operator(\)) operator({)
    keyword(var) ident(index) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(do) operator({)
      keyword(if) operator(()ident(node)operator(.)ident(id)operator(\)) ident(index) operator(=) string<delimiter(')content([)delimiter(')> operator(+) ident(node)operator(.)ident(position) operator(+) string<delimiter(')content(])delimiter(')> operator(+) ident(index)operator(;)
    operator(}) keyword(while) operator((()ident(node) operator(=) ident(node)operator(.)ident(parent)operator(\)) operator(!=) keyword(null)operator(\))operator(;)
    keyword(return) ident(index)operator(;)
  operator(})operator(,)

  key(sequence)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(()ident(element)operator(\))operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    
    keyword(return) predefined($)operator(()local_variable(this)operator(.)ident(findElements)operator(()ident(element)operator(,) ident(options)operator(\)) operator(||) operator([)operator(]\))operator(.)ident(map)operator(() keyword(function)operator(()ident(item)operator(\)) operator({)
      keyword(return) ident(item)operator(.)ident(id)operator(.)ident(match)operator(()ident(options)operator(.)ident(format)operator(\)) operator(?) ident(item)operator(.)ident(id)operator(.)ident(match)operator(()ident(options)operator(.)ident(format)operator(\))operator([)integer(1)operator(]) operator(:) string<delimiter(')delimiter(')>operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(setSequence)operator(:) keyword(function)operator(()ident(element)operator(,) ident(new_sequence)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(()ident(element)operator(\))operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)
    
    keyword(var) ident(nodeMap) operator(=) operator({) operator(})operator(;)
    local_variable(this)operator(.)ident(findElements)operator(()ident(element)operator(,) ident(options)operator(\))operator(.)ident(each)operator(() keyword(function)operator(()ident(n)operator(\)) operator({)
        keyword(if) operator(()ident(n)operator(.)ident(id)operator(.)ident(match)operator(()ident(options)operator(.)ident(format)operator(\)\))
            ident(nodeMap)operator([)ident(n)operator(.)ident(id)operator(.)ident(match)operator(()ident(options)operator(.)ident(format)operator(\))operator([)integer(1)operator(]]) operator(=) operator([)ident(n)operator(,) ident(n)operator(.)ident(parentNode)operator(])operator(;)
        ident(n)operator(.)ident(parentNode)operator(.)ident(removeChild)operator(()ident(n)operator(\))operator(;)
    operator(}\))operator(;)
   
    ident(new_sequence)operator(.)ident(each)operator(()keyword(function)operator(()ident(ident)operator(\)) operator({)
      keyword(var) ident(n) operator(=) ident(nodeMap)operator([)ident(ident)operator(])operator(;)
      keyword(if) operator(()ident(n)operator(\)) operator({)
        ident(n)operator([)integer(1)operator(])operator(.)ident(appendChild)operator(()ident(n)operator([)integer(0)operator(]\))operator(;)
        keyword(delete) ident(nodeMap)operator([)ident(ident)operator(])operator(;)
      operator(})
    operator(}\))operator(;)
  operator(})operator(,)
  
  key(serialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(()ident(Sortable)operator(.)ident(options)operator(()ident(element)operator(\))operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    keyword(var) ident(name) operator(=) ident(encodeURIComponent)operator(()
      operator(()local_variable(arguments)operator([)integer(1)operator(]) operator(&&) local_variable(arguments)operator([)integer(1)operator(])operator(.)ident(name)operator(\)) operator(?) local_variable(arguments)operator([)integer(1)operator(])operator(.)ident(name) operator(:) ident(element)operator(.)ident(id)operator(\))operator(;)
    
    keyword(if) operator(()ident(options)operator(.)ident(tree)operator(\)) operator({)
      keyword(return) ident(Sortable)operator(.)ident(tree)operator(()ident(element)operator(,) local_variable(arguments)operator([)integer(1)operator(]\))operator(.)ident(children)operator(.)ident(map)operator(() keyword(function) operator(()ident(item)operator(\)) operator({)
        keyword(return) operator([)ident(name) operator(+) ident(Sortable)operator(.)ident(_constructIndex)operator(()ident(item)operator(\)) operator(+) string<delimiter(")content([id]=)delimiter(")> operator(+) 
                ident(encodeURIComponent)operator(()ident(item)operator(.)ident(id)operator(\)])operator(.)ident(concat)operator(()ident(item)operator(.)ident(children)operator(.)ident(map)operator(()local_variable(arguments)operator(.)ident(callee)operator(\)\))operator(;)
      operator(}\))operator(.)ident(flatten)operator(()operator(\))operator(.)ident(join)operator(()string<delimiter(')content(&)delimiter(')>operator(\))operator(;)
    operator(}) keyword(else) operator({)
      keyword(return) ident(Sortable)operator(.)ident(sequence)operator(()ident(element)operator(,) local_variable(arguments)operator([)integer(1)operator(]\))operator(.)ident(map)operator(() keyword(function)operator(()ident(item)operator(\)) operator({)
        keyword(return) ident(name) operator(+) string<delimiter(")content([]=)delimiter(")> operator(+) ident(encodeURIComponent)operator(()ident(item)operator(\))operator(;)
      operator(}\))operator(.)ident(join)operator(()string<delimiter(')content(&)delimiter(')>operator(\))operator(;)
    operator(})
  operator(})
operator(})

comment(// Returns true if child is contained within element)
ident(Element)operator(.)ident(isParent) operator(=) keyword(function)operator(()ident(child)operator(,) ident(element)operator(\)) operator({)
  keyword(if) operator((!)ident(child)operator(.)ident(parentNode) operator(||) ident(child) operator(==) ident(element)operator(\)) keyword(return) keyword(false)operator(;)
  keyword(if) operator(()ident(child)operator(.)ident(parentNode) operator(==) ident(element)operator(\)) keyword(return) keyword(true)operator(;)
  keyword(return) ident(Element)operator(.)ident(isParent)operator(()ident(child)operator(.)ident(parentNode)operator(,) ident(element)operator(\))operator(;)
operator(})

ident(Element)operator(.)ident(findChildren) operator(=) keyword(function)operator(()ident(element)operator(,) ident(only)operator(,) ident(recursive)operator(,) ident(tagName)operator(\)) operator({)   
  keyword(if)operator((!)ident(element)operator(.)ident(hasChildNodes)operator(()operator(\)\)) keyword(return) keyword(null)operator(;)
  ident(tagName) operator(=) ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
  keyword(if)operator(()ident(only)operator(\)) ident(only) operator(=) operator([)ident(only)operator(])operator(.)ident(flatten)operator(()operator(\))operator(;)
  keyword(var) ident(elements) operator(=) operator([)operator(])operator(;)
  predefined($A)operator(()ident(element)operator(.)ident(childNodes)operator(\))operator(.)ident(each)operator(() keyword(function)operator(()ident(e)operator(\)) operator({)
    keyword(if)operator(()ident(e)operator(.)ident(tagName) operator(&&) ident(e)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(==)ident(tagName) operator(&&)
      operator((!)ident(only) operator(||) operator(()ident(Element)operator(.)ident(classNames)operator(()ident(e)operator(\))operator(.)ident(detect)operator(()keyword(function)operator(()ident(v)operator(\)) operator({) keyword(return) ident(only)operator(.)ident(include)operator(()ident(v)operator(\)) operator(}\)\)\)\))
        ident(elements)operator(.)ident(push)operator(()ident(e)operator(\))operator(;)
    keyword(if)operator(()ident(recursive)operator(\)) operator({)
      keyword(var) ident(grandchildren) operator(=) ident(Element)operator(.)ident(findChildren)operator(()ident(e)operator(,) ident(only)operator(,) ident(recursive)operator(,) ident(tagName)operator(\))operator(;)
      keyword(if)operator(()ident(grandchildren)operator(\)) ident(elements)operator(.)ident(push)operator(()ident(grandchildren)operator(\))operator(;)
    operator(})
  operator(}\))operator(;)

  keyword(return) operator(()ident(elements)operator(.)ident(length)operator(>)integer(0) operator(?) ident(elements)operator(.)ident(flatten)operator(()operator(\)) operator(:) operator([)operator(]\))operator(;)
operator(})

ident(Element)operator(.)ident(offsetSize) operator(=) keyword(function) operator(()ident(element)operator(,) ident(type)operator(\)) operator({)
  keyword(return) ident(element)operator([)string<delimiter(')content(offset)delimiter(')> operator(+) operator((()ident(type)operator(==)string<delimiter(')content(vertical)delimiter(')> operator(||) ident(type)operator(==)string<delimiter(')content(height)delimiter(')>operator(\)) operator(?) string<delimiter(')content(Height)delimiter(')> operator(:) string<delimiter(')content(Width)delimiter(')>operator(\)])operator(;)
operator(})
comment(// Copyright (c\) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us\))
comment(// Contributors:)
comment(//  Justin Palmer (http://encytemedia.com/\))
comment(//  Mark Pilgrim (http://diveintomark.org/\))
comment(//  Martin Bialasinki)
comment(// )
comment(// script.aculo.us is freely distributable under the terms of an MIT-style license.)
comment(// For details, see the script.aculo.us web site: http://script.aculo.us/ )

comment(// converts rgb(\) and #xxx to #xxxxxx format,  )
comment(// returns self (or first argument\) if not convertable  )
ident(String)operator(.)ident(prototype)operator(.)ident(parseColor) operator(=) keyword(function)operator(()operator(\)) operator({)  
  keyword(var) ident(color) operator(=) string<delimiter(')content(#)delimiter(')>operator(;)
  keyword(if) operator(()local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,)integer(4)operator(\)) operator(==) string<delimiter(')content(rgb()delimiter(')>operator(\)) operator({)  
    keyword(var) ident(cols) operator(=) local_variable(this)operator(.)ident(slice)operator(()integer(4)operator(,)local_variable(this)operator(.)ident(length)operator(-)integer(1)operator(\))operator(.)ident(split)operator(()string<delimiter(')content(,)delimiter(')>operator(\))operator(;)  
    keyword(var) ident(i)operator(=)integer(0)operator(;) keyword(do) operator({) ident(color) operator(+=) ident(parseInt)operator(()ident(cols)operator([)ident(i)operator(]\))operator(.)ident(toColorPart)operator(()operator(\)) operator(}) keyword(while) operator((++)ident(i)operator(<)integer(3)operator(\))operator(;)  
  operator(}) keyword(else) operator({)  
    keyword(if) operator(()local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,)integer(1)operator(\)) operator(==) string<delimiter(')content(#)delimiter(')>operator(\)) operator({)  
      keyword(if) operator(()local_variable(this)operator(.)ident(length)operator(==)integer(4)operator(\)) keyword(for)operator(()keyword(var) ident(i)operator(=)integer(1)operator(;)ident(i)operator(<)integer(4)operator(;)ident(i)operator(++)operator(\)) ident(color) operator(+=) operator(()local_variable(this)operator(.)ident(charAt)operator(()ident(i)operator(\)) operator(+) local_variable(this)operator(.)ident(charAt)operator(()ident(i)operator(\)\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)  
      keyword(if) operator(()local_variable(this)operator(.)ident(length)operator(==)integer(7)operator(\)) ident(color) operator(=) local_variable(this)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)  
    operator(})  
  operator(})  
  keyword(return) operator(()ident(color)operator(.)ident(length)operator(==)integer(7) operator(?) ident(color) operator(:) operator(()local_variable(arguments)operator([)integer(0)operator(]) operator(||) local_variable(this)operator(\)\))operator(;)  
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Element)operator(.)ident(collectTextNodes) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)  
  keyword(return) predefined($A)operator(()predefined($)operator(()ident(element)operator(\))operator(.)ident(childNodes)operator(\))operator(.)ident(collect)operator(() keyword(function)operator(()ident(node)operator(\)) operator({)
    keyword(return) operator(()ident(node)operator(.)ident(nodeType)operator(==)integer(3) operator(?) ident(node)operator(.)ident(nodeValue) operator(:) 
      operator(()ident(node)operator(.)ident(hasChildNodes)operator(()operator(\)) operator(?) ident(Element)operator(.)ident(collectTextNodes)operator(()ident(node)operator(\)) operator(:) string<delimiter(')delimiter(')>operator(\)\))operator(;)
  operator(}\))operator(.)ident(flatten)operator(()operator(\))operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(collectTextNodesIgnoreClass) operator(=) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)  
  keyword(return) predefined($A)operator(()predefined($)operator(()ident(element)operator(\))operator(.)ident(childNodes)operator(\))operator(.)ident(collect)operator(() keyword(function)operator(()ident(node)operator(\)) operator({)
    keyword(return) operator(()ident(node)operator(.)ident(nodeType)operator(==)integer(3) operator(?) ident(node)operator(.)ident(nodeValue) operator(:) 
      operator((()ident(node)operator(.)ident(hasChildNodes)operator(()operator(\)) operator(&&) operator(!)ident(Element)operator(.)ident(hasClassName)operator(()ident(node)operator(,)ident(className)operator(\)\)) operator(?) 
        ident(Element)operator(.)ident(collectTextNodesIgnoreClass)operator(()ident(node)operator(,) ident(className)operator(\)) operator(:) string<delimiter(')delimiter(')>operator(\)\))operator(;)
  operator(}\))operator(.)ident(flatten)operator(()operator(\))operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(setContentZoom) operator(=) keyword(function)operator(()ident(element)operator(,) ident(percent)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)  
  ident(element)operator(.)ident(setStyle)operator(({)key(fontSize)operator(:) operator(()ident(percent)operator(/)integer(100)operator(\)) operator(+) string<delimiter(')content(em)delimiter(')>operator(}\))operator(;)   
  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) ident(window)operator(.)ident(scrollBy)operator(()integer(0)operator(,)integer(0)operator(\))operator(;)
  keyword(return) ident(element)operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(getInlineOpacity) operator(=) keyword(function)operator(()ident(element)operator(\))operator({)
  keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(style)operator(.)ident(opacity) operator(||) string<delimiter(')delimiter(')>operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(forceRerendering) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  keyword(try) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(n) operator(=) ident(document)operator(.)ident(createTextNode)operator(()string<delimiter(')content( )delimiter(')>operator(\))operator(;)
    ident(element)operator(.)ident(appendChild)operator(()ident(n)operator(\))operator(;)
    ident(element)operator(.)ident(removeChild)operator(()ident(n)operator(\))operator(;)
  operator(}) keyword(catch)operator(()ident(e)operator(\)) operator({) operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(Effect) operator(=) operator({)
  key(_elementDoesNotExistError)operator(:) operator({)
    key(name)operator(:) string<delimiter(')content(ElementDoesNotExistError)delimiter(')>operator(,)
    key(message)operator(:) string<delimiter(')content(The specified DOM element does not exist, but is required for this effect to operate)delimiter(')>
  operator(})operator(,)
  key(Transitions)operator(:) operator({)
    key(linear)operator(:) ident(Prototype)operator(.)ident(K)operator(,)
    key(sinoidal)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(return) operator((-)ident(Math)operator(.)ident(cos)operator(()ident(pos)operator(*)ident(Math)operator(.)ident(PI)operator(\))operator(/)integer(2)operator(\)) operator(+) float(0.5)operator(;)
    operator(})operator(,)
    key(reverse)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(return) integer(1)operator(-)ident(pos)operator(;)
    operator(})operator(,)
    key(flicker)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(var) ident(pos) operator(=) operator(((-)ident(Math)operator(.)ident(cos)operator(()ident(pos)operator(*)ident(Math)operator(.)ident(PI)operator(\))operator(/)integer(4)operator(\)) operator(+) float(0.75)operator(\)) operator(+) ident(Math)operator(.)ident(random)operator(()operator(\))operator(/)integer(4)operator(;)
      keyword(return) ident(pos) operator(>) integer(1) operator(?) integer(1) operator(:) ident(pos)operator(;)
    operator(})operator(,)
    key(wobble)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(return) operator((-)ident(Math)operator(.)ident(cos)operator(()ident(pos)operator(*)ident(Math)operator(.)ident(PI)operator(*()integer(9)operator(*)ident(pos)operator(\)\))operator(/)integer(2)operator(\)) operator(+) float(0.5)operator(;)
    operator(})operator(,)
    key(pulse)operator(:) keyword(function)operator(()ident(pos)operator(,) ident(pulses)operator(\)) operator({) 
      ident(pulses) operator(=) ident(pulses) operator(||) integer(5)operator(;) 
      keyword(return) operator(()
        operator((()ident(pos) operator(%) operator(()integer(1)operator(/)ident(pulses)operator(\)\)) operator(*) ident(pulses)operator(\))operator(.)ident(round)operator(()operator(\)) operator(==) integer(0) operator(?) 
              operator((()ident(pos) operator(*) ident(pulses) operator(*) integer(2)operator(\)) operator(-) operator(()ident(pos) operator(*) ident(pulses) operator(*) integer(2)operator(\))operator(.)ident(floor)operator(()operator(\)\)) operator(:) 
          integer(1) operator(-) operator((()ident(pos) operator(*) ident(pulses) operator(*) integer(2)operator(\)) operator(-) operator(()ident(pos) operator(*) ident(pulses) operator(*) integer(2)operator(\))operator(.)ident(floor)operator(()operator(\)\))
        operator(\))operator(;)
    operator(})operator(,)
    key(spring)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({) 
      keyword(return) integer(1) operator(-) operator(()ident(Math)operator(.)ident(cos)operator(()ident(pos) operator(*) float(4.5) operator(*) ident(Math)operator(.)ident(PI)operator(\)) operator(*) ident(Math)operator(.)ident(exp)operator((-)ident(pos) operator(*) integer(6)operator(\)\))operator(;) 
    operator(})operator(,)
    key(none)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(return) integer(0)operator(;)
    operator(})operator(,)
    key(full)operator(:) keyword(function)operator(()ident(pos)operator(\)) operator({)
      keyword(return) integer(1)operator(;)
    operator(})
  operator(})operator(,)
  key(DefaultOptions)operator(:) operator({)
    key(duration)operator(:)   float(1.0)operator(,)   comment(// seconds)
    key(fps)operator(:)        integer(100)operator(,)   comment(// 100= assume 66fps max.)
    key(sync)operator(:)       keyword(false)operator(,) comment(// true for combining)
    key(from)operator(:)       float(0.0)operator(,)
    key(to)operator(:)         float(1.0)operator(,)
    key(delay)operator(:)      float(0.0)operator(,)
    key(queue)operator(:)      string<delimiter(')content(parallel)delimiter(')>
  operator(})operator(,)
  key(tagifyText)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(tagifyStyle) operator(=) string<delimiter(')content(position:relative)delimiter(')>operator(;)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) ident(tagifyStyle) operator(+=) string<delimiter(')content(;zoom:1)delimiter(')>operator(;)
    
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    predefined($A)operator(()ident(element)operator(.)ident(childNodes)operator(\))operator(.)ident(each)operator(() keyword(function)operator(()ident(child)operator(\)) operator({)
      keyword(if) operator(()ident(child)operator(.)ident(nodeType)operator(==)integer(3)operator(\)) operator({)
        ident(child)operator(.)ident(nodeValue)operator(.)ident(toArray)operator(()operator(\))operator(.)ident(each)operator(() keyword(function)operator(()ident(character)operator(\)) operator({)
          ident(element)operator(.)ident(insertBefore)operator(()
            keyword(new) ident(Element)operator(()string<delimiter(')content(span)delimiter(')>operator(,) operator({)key(style)operator(:) ident(tagifyStyle)operator(}\))operator(.)ident(update)operator(()
              ident(character) operator(==) string<delimiter(')content( )delimiter(')> operator(?) ident(String)operator(.)ident(fromCharCode)operator(()integer(160)operator(\)) operator(:) ident(character)operator(\))operator(,) 
              ident(child)operator(\))operator(;)
        operator(}\))operator(;)
        ident(Element)operator(.)ident(remove)operator(()ident(child)operator(\))operator(;)
      operator(})
    operator(}\))operator(;)
  operator(})operator(,)
  key(multiple)operator(:) keyword(function)operator(()ident(element)operator(,) ident(effect)operator(\)) operator({)
    keyword(var) ident(elements)operator(;)
    keyword(if) operator(((()keyword(typeof) ident(element) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) operator(||) 
        ident(Object)operator(.)ident(isFunction)operator(()ident(element)operator(\)\)) operator(&&) 
       operator(()ident(element)operator(.)ident(length)operator(\)\))
      ident(elements) operator(=) ident(element)operator(;)
    keyword(else)
      ident(elements) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(childNodes)operator(;)
      
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(speed)operator(:) float(0.1)operator(,)
      key(delay)operator(:) float(0.0)
    operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)
    keyword(var) ident(masterDelay) operator(=) ident(options)operator(.)ident(delay)operator(;)

    predefined($A)operator(()ident(elements)operator(\))operator(.)ident(each)operator(() keyword(function)operator(()ident(element)operator(,) ident(index)operator(\)) operator({)
      keyword(new) ident(effect)operator(()ident(element)operator(,) ident(Object)operator(.)ident(extend)operator(()ident(options)operator(,) operator({) key(delay)operator(:) ident(index) operator(*) ident(options)operator(.)ident(speed) operator(+) ident(masterDelay) operator(}\)\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)
  key(PAIRS)operator(:) operator({)
    key<delimiter(')content(slide)delimiter(')>operator(:)  operator([)string<delimiter(')content(SlideDown)delimiter(')>operator(,)string<delimiter(')content(SlideUp)delimiter(')>operator(])operator(,)
    key<delimiter(')content(blind)delimiter(')>operator(:)  operator([)string<delimiter(')content(BlindDown)delimiter(')>operator(,)string<delimiter(')content(BlindUp)delimiter(')>operator(])operator(,)
    key<delimiter(')content(appear)delimiter(')>operator(:) operator([)string<delimiter(')content(Appear)delimiter(')>operator(,)string<delimiter(')content(Fade)delimiter(')>operator(])
  operator(})operator(,)
  key(toggle)operator(:) keyword(function)operator(()ident(element)operator(,) ident(effect)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(effect) operator(=) operator(()ident(effect) operator(||) string<delimiter(')content(appear)delimiter(')>operator(\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(queue)operator(:) operator({) key(position)operator(:)string<delimiter(')content(end)delimiter(')>operator(,) key(scope)operator(:()ident(element)operator(.)ident(id) operator(||) string<delimiter(')content(global)delimiter(')>operator(\))operator(,) key(limit)operator(:) integer(1) operator(})
    operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)
    ident(Effect)operator([)ident(element)operator(.)ident(visible)operator(()operator(\)) operator(?) 
      ident(Effect)operator(.)ident(PAIRS)operator([)ident(effect)operator(])operator([)integer(1)operator(]) operator(:) ident(Effect)operator(.)ident(PAIRS)operator([)ident(effect)operator(])operator([)integer(0)operator(]])operator(()ident(element)operator(,) ident(options)operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Effect)operator(.)ident(DefaultOptions)operator(.)ident(transition) operator(=) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(;)

comment(/* ------------- core effects ------------- */)

ident(Effect)operator(.)ident(ScopedQueue) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Enumerable)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(effects)  operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(interval) operator(=) keyword(null)operator(;)    
  operator(})operator(,)
  key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(effects)operator(.)ident(_each)operator(()ident(iterator)operator(\))operator(;)
  operator(})operator(,)
  key(add)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(var) ident(timestamp) operator(=) keyword(new) ident(Date)operator(()operator(\))operator(.)ident(getTime)operator(()operator(\))operator(;)
    
    keyword(var) ident(position) operator(=) ident(Object)operator(.)ident(isString)operator(()ident(effect)operator(.)ident(options)operator(.)ident(queue)operator(\)) operator(?) 
      ident(effect)operator(.)ident(options)operator(.)ident(queue) operator(:) ident(effect)operator(.)ident(options)operator(.)ident(queue)operator(.)ident(position)operator(;)
    
    keyword(switch)operator(()ident(position)operator(\)) operator({)
      keyword(case) string<delimiter(')content(front)delimiter(')>operator(:)
        comment(// move unstarted effects after this effect  )
        local_variable(this)operator(.)ident(effects)operator(.)ident(findAll)operator(()keyword(function)operator(()ident(e)operator(\))operator({) keyword(return) ident(e)operator(.)ident(state)operator(==)string<delimiter(')content(idle)delimiter(')> operator(}\))operator(.)ident(each)operator(() keyword(function)operator(()ident(e)operator(\)) operator({)
            ident(e)operator(.)ident(startOn)  operator(+=) ident(effect)operator(.)ident(finishOn)operator(;)
            ident(e)operator(.)ident(finishOn) operator(+=) ident(effect)operator(.)ident(finishOn)operator(;)
          operator(}\))operator(;)
        keyword(break)operator(;)
      keyword(case) string<delimiter(')content(with-last)delimiter(')>operator(:)
        ident(timestamp) operator(=) local_variable(this)operator(.)ident(effects)operator(.)ident(pluck)operator(()string<delimiter(')content(startOn)delimiter(')>operator(\))operator(.)ident(max)operator(()operator(\)) operator(||) ident(timestamp)operator(;)
        keyword(break)operator(;)
      keyword(case) string<delimiter(')content(end)delimiter(')>operator(:)
        comment(// start effect after last queued effect has finished)
        ident(timestamp) operator(=) local_variable(this)operator(.)ident(effects)operator(.)ident(pluck)operator(()string<delimiter(')content(finishOn)delimiter(')>operator(\))operator(.)ident(max)operator(()operator(\)) operator(||) ident(timestamp)operator(;)
        keyword(break)operator(;)
    operator(})
    
    ident(effect)operator(.)ident(startOn)  operator(+=) ident(timestamp)operator(;)
    ident(effect)operator(.)ident(finishOn) operator(+=) ident(timestamp)operator(;)

    keyword(if) operator((!)ident(effect)operator(.)ident(options)operator(.)ident(queue)operator(.)ident(limit) operator(||) operator(()local_variable(this)operator(.)ident(effects)operator(.)ident(length) operator(<) ident(effect)operator(.)ident(options)operator(.)ident(queue)operator(.)ident(limit)operator(\)\))
      local_variable(this)operator(.)ident(effects)operator(.)ident(push)operator(()ident(effect)operator(\))operator(;)
    
    keyword(if) operator((!)local_variable(this)operator(.)ident(interval)operator(\))
      local_variable(this)operator(.)ident(interval) operator(=) ident(setInterval)operator(()local_variable(this)operator(.)ident(loop)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) integer(15)operator(\))operator(;)
  operator(})operator(,)
  key(remove)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    local_variable(this)operator(.)ident(effects) operator(=) local_variable(this)operator(.)ident(effects)operator(.)ident(reject)operator(()keyword(function)operator(()ident(e)operator(\)) operator({) keyword(return) ident(e)operator(==)ident(effect) operator(}\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(effects)operator(.)ident(length) operator(==) integer(0)operator(\)) operator({)
      ident(clearInterval)operator(()local_variable(this)operator(.)ident(interval)operator(\))operator(;)
      local_variable(this)operator(.)ident(interval) operator(=) keyword(null)operator(;)
    operator(})
  operator(})operator(,)
  key(loop)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(timePos) operator(=) keyword(new) ident(Date)operator(()operator(\))operator(.)ident(getTime)operator(()operator(\))operator(;)
    keyword(for)operator(()keyword(var) ident(i)operator(=)integer(0)operator(,) ident(len)operator(=)local_variable(this)operator(.)ident(effects)operator(.)ident(length)operator(;)ident(i)operator(<)ident(len)operator(;)ident(i)operator(++)operator(\)) 
      local_variable(this)operator(.)ident(effects)operator([)ident(i)operator(]) operator(&&) local_variable(this)operator(.)ident(effects)operator([)ident(i)operator(])operator(.)ident(loop)operator(()ident(timePos)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Queues) operator(=) operator({)
  key(instances)operator(:) predefined($H)operator(()operator(\))operator(,)
  key(get)operator(:) keyword(function)operator(()ident(queueName)operator(\)) operator({)
    keyword(if) operator((!)ident(Object)operator(.)ident(isString)operator(()ident(queueName)operator(\)\)) keyword(return) ident(queueName)operator(;)
    
    keyword(return) local_variable(this)operator(.)ident(instances)operator(.)ident(get)operator(()ident(queueName)operator(\)) operator(||)
      local_variable(this)operator(.)ident(instances)operator(.)ident(set)operator(()ident(queueName)operator(,) keyword(new) ident(Effect)operator(.)ident(ScopedQueue)operator(()operator(\)\))operator(;)
  operator(})
operator(})operator(;)
ident(Effect)operator(.)ident(Queue) operator(=) ident(Effect)operator(.)ident(Queues)operator(.)ident(get)operator(()string<delimiter(')content(global)delimiter(')>operator(\))operator(;)

ident(Effect)operator(.)ident(Base) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(position)operator(:) keyword(null)operator(,)
  key(start)operator(:) keyword(function)operator(()ident(options)operator(\)) operator({)
    keyword(function) ident(codeForEvent)operator(()ident(options)operator(,)ident(eventName)operator(\))operator({)
      keyword(return) operator(()
        operator(()ident(options)operator([)ident(eventName)operator(+)string<delimiter(')content(Internal)delimiter(')>operator(]) operator(?) string<delimiter(')content(this.options.)delimiter(')>operator(+)ident(eventName)operator(+)string<delimiter(')content(Internal(this\);)delimiter(')> operator(:) string<delimiter(')delimiter(')>operator(\)) operator(+)
        operator(()ident(options)operator([)ident(eventName)operator(]) operator(?) string<delimiter(')content(this.options.)delimiter(')>operator(+)ident(eventName)operator(+)string<delimiter(')content((this\);)delimiter(')> operator(:) string<delimiter(')delimiter(')>operator(\))
      operator(\))operator(;)
    operator(})
    keyword(if) operator(()ident(options) operator(&&) ident(options)operator(.)ident(transition) operator(===) keyword(false)operator(\)) ident(options)operator(.)ident(transition) operator(=) ident(Effect)operator(.)ident(Transitions)operator(.)ident(linear)operator(;)
    local_variable(this)operator(.)ident(options)      operator(=) ident(Object)operator(.)ident(extend)operator(()ident(Object)operator(.)ident(extend)operator(({) operator(})operator(,)ident(Effect)operator(.)ident(DefaultOptions)operator(\))operator(,) ident(options) operator(||) operator({) operator(}\))operator(;)
    local_variable(this)operator(.)ident(currentFrame) operator(=) integer(0)operator(;)
    local_variable(this)operator(.)ident(state)        operator(=) string<delimiter(')content(idle)delimiter(')>operator(;)
    local_variable(this)operator(.)ident(startOn)      operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(delay)operator(*)integer(1000)operator(;)
    local_variable(this)operator(.)ident(finishOn)     operator(=) local_variable(this)operator(.)ident(startOn)operator(+()local_variable(this)operator(.)ident(options)operator(.)ident(duration)operator(*)integer(1000)operator(\))operator(;)
    local_variable(this)operator(.)ident(fromToDelta)  operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(to)operator(-)local_variable(this)operator(.)ident(options)operator(.)ident(from)operator(;)
    local_variable(this)operator(.)ident(totalTime)    operator(=) local_variable(this)operator(.)ident(finishOn)operator(-)local_variable(this)operator(.)ident(startOn)operator(;)
    local_variable(this)operator(.)ident(totalFrames)  operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(fps)operator(*)local_variable(this)operator(.)ident(options)operator(.)ident(duration)operator(;)
    
    ident(eval)operator(()string<delimiter(')content(this.render = function(pos\){ )delimiter(')>operator(+)
      string<delimiter(')content(if (this.state=="idle"\){this.state="running";)delimiter(')>operator(+)
      ident(codeForEvent)operator(()local_variable(this)operator(.)ident(options)operator(,)string<delimiter(')content(beforeSetup)delimiter(')>operator(\))operator(+)
      operator(()local_variable(this)operator(.)ident(setup) operator(?) string<delimiter(')content(this.setup(\);)delimiter(')>operator(:)string<delimiter(')delimiter(')>operator(\))operator(+) 
      ident(codeForEvent)operator(()local_variable(this)operator(.)ident(options)operator(,)string<delimiter(')content(afterSetup)delimiter(')>operator(\))operator(+)
      string<delimiter(')content(};if (this.state=="running"\){)delimiter(')>operator(+)
      string<delimiter(')content(pos=this.options.transition(pos\)*)delimiter(')>operator(+)local_variable(this)operator(.)ident(fromToDelta)operator(+)string<delimiter(')content(+)delimiter(')>operator(+)local_variable(this)operator(.)ident(options)operator(.)ident(from)operator(+)string<delimiter(')content(;)delimiter(')>operator(+)
      string<delimiter(')content(this.position=pos;)delimiter(')>operator(+)
      ident(codeForEvent)operator(()local_variable(this)operator(.)ident(options)operator(,)string<delimiter(')content(beforeUpdate)delimiter(')>operator(\))operator(+)
      operator(()local_variable(this)operator(.)ident(update) operator(?) string<delimiter(')content(this.update(pos\);)delimiter(')>operator(:)string<delimiter(')delimiter(')>operator(\))operator(+)
      ident(codeForEvent)operator(()local_variable(this)operator(.)ident(options)operator(,)string<delimiter(')content(afterUpdate)delimiter(')>operator(\))operator(+)
      string<delimiter(')content(}})delimiter(')>operator(\))operator(;)
    
    local_variable(this)operator(.)ident(event)operator(()string<delimiter(')content(beforeStart)delimiter(')>operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(sync)operator(\))
      ident(Effect)operator(.)ident(Queues)operator(.)ident(get)operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(queue)operator(\)) operator(?) 
        string<delimiter(')content(global)delimiter(')> operator(:) local_variable(this)operator(.)ident(options)operator(.)ident(queue)operator(.)ident(scope)operator(\))operator(.)ident(add)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)
  key(loop)operator(:) keyword(function)operator(()ident(timePos)operator(\)) operator({)
    keyword(if) operator(()ident(timePos) operator(>=) local_variable(this)operator(.)ident(startOn)operator(\)) operator({)
      keyword(if) operator(()ident(timePos) operator(>=) local_variable(this)operator(.)ident(finishOn)operator(\)) operator({)
        local_variable(this)operator(.)ident(render)operator(()float(1.0)operator(\))operator(;)
        local_variable(this)operator(.)ident(cancel)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(event)operator(()string<delimiter(')content(beforeFinish)delimiter(')>operator(\))operator(;)
        keyword(if) operator(()local_variable(this)operator(.)ident(finish)operator(\)) local_variable(this)operator(.)ident(finish)operator(()operator(\))operator(;) 
        local_variable(this)operator(.)ident(event)operator(()string<delimiter(')content(afterFinish)delimiter(')>operator(\))operator(;)
        keyword(return)operator(;)  
      operator(})
      keyword(var) ident(pos)   operator(=) operator(()ident(timePos) operator(-) local_variable(this)operator(.)ident(startOn)operator(\)) operator(/) local_variable(this)operator(.)ident(totalTime)operator(,)
          ident(frame) operator(=) operator(()ident(pos) operator(*) local_variable(this)operator(.)ident(totalFrames)operator(\))operator(.)ident(round)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(frame) operator(>) local_variable(this)operator(.)ident(currentFrame)operator(\)) operator({)
        local_variable(this)operator(.)ident(render)operator(()ident(pos)operator(\))operator(;)
        local_variable(this)operator(.)ident(currentFrame) operator(=) ident(frame)operator(;)
      operator(})
    operator(})
  operator(})operator(,)
  key(cancel)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(sync)operator(\))
      ident(Effect)operator(.)ident(Queues)operator(.)ident(get)operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(queue)operator(\)) operator(?) 
        string<delimiter(')content(global)delimiter(')> operator(:) local_variable(this)operator(.)ident(options)operator(.)ident(queue)operator(.)ident(scope)operator(\))operator(.)ident(remove)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(state) operator(=) string<delimiter(')content(finished)delimiter(')>operator(;)
  operator(})operator(,)
  key(event)operator(:) keyword(function)operator(()ident(eventName)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator([)ident(eventName) operator(+) string<delimiter(')content(Internal)delimiter(')>operator(]\)) local_variable(this)operator(.)ident(options)operator([)ident(eventName) operator(+) string<delimiter(')content(Internal)delimiter(')>operator(])operator(()local_variable(this)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator([)ident(eventName)operator(]\)) local_variable(this)operator(.)ident(options)operator([)ident(eventName)operator(])operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)
  key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(data) operator(=) predefined($H)operator(()operator(\))operator(;)
    keyword(for)operator(()ident(property) keyword(in) local_variable(this)operator(\))
      keyword(if) operator((!)ident(Object)operator(.)ident(isFunction)operator(()local_variable(this)operator([)ident(property)operator(]\)\)) ident(data)operator(.)ident(set)operator(()ident(property)operator(,) local_variable(this)operator([)ident(property)operator(]\))operator(;)
    keyword(return) string<delimiter(')content(#<Effect:)delimiter(')> operator(+) ident(data)operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(')content(,options:)delimiter(')> operator(+) predefined($H)operator(()local_variable(this)operator(.)ident(options)operator(\))operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(')content(>)delimiter(')>operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Parallel) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(effects)operator(\)) operator({)
    local_variable(this)operator(.)ident(effects) operator(=) ident(effects) operator(||) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(start)operator(()local_variable(arguments)operator([)integer(1)operator(]\))operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(effects)operator(.)ident(invoke)operator(()string<delimiter(')content(render)delimiter(')>operator(,) ident(position)operator(\))operator(;)
  operator(})operator(,)
  key(finish)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(effects)operator(.)ident(each)operator(() keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(render)operator(()float(1.0)operator(\))operator(;)
      ident(effect)operator(.)ident(cancel)operator(()operator(\))operator(;)
      ident(effect)operator(.)ident(event)operator(()string<delimiter(')content(beforeFinish)delimiter(')>operator(\))operator(;)
      keyword(if) operator(()ident(effect)operator(.)ident(finish)operator(\)) ident(effect)operator(.)ident(finish)operator(()ident(position)operator(\))operator(;)
      ident(effect)operator(.)ident(event)operator(()string<delimiter(')content(afterFinish)delimiter(')>operator(\))operator(;)
    operator(}\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Tween) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(object)operator(,) ident(from)operator(,) ident(to)operator(\)) operator({)
    ident(object) operator(=) ident(Object)operator(.)ident(isString)operator(()ident(object)operator(\)) operator(?) predefined($)operator(()ident(object)operator(\)) operator(:) ident(object)operator(;)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(method) operator(=) ident(args)operator(.)ident(last)operator(()operator(\))operator(,) 
      ident(options) operator(=) ident(args)operator(.)ident(length) operator(==) integer(5) operator(?) ident(args)operator([)integer(3)operator(]) operator(:) keyword(null)operator(;)
    local_variable(this)operator(.)ident(method) operator(=) ident(Object)operator(.)ident(isFunction)operator(()ident(method)operator(\)) operator(?) ident(method)operator(.)ident(bind)operator(()ident(object)operator(\)) operator(:)
      ident(Object)operator(.)ident(isFunction)operator(()ident(object)operator([)ident(method)operator(]\)) operator(?) ident(object)operator([)ident(method)operator(])operator(.)ident(bind)operator(()ident(object)operator(\)) operator(:) 
      keyword(function)operator(()ident(value)operator(\)) operator({) ident(object)operator([)ident(method)operator(]) operator(=) ident(value) operator(})operator(;)
    local_variable(this)operator(.)ident(start)operator(()ident(Object)operator(.)ident(extend)operator(({) key(from)operator(:) ident(from)operator(,) key(to)operator(:) ident(to) operator(})operator(,) ident(options) operator(||) operator({) operator(}\)\))operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(method)operator(()ident(position)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Event) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(start)operator(()ident(Object)operator(.)ident(extend)operator(({) key(duration)operator(:) integer(0) operator(})operator(,) local_variable(arguments)operator([)integer(0)operator(]) operator(||) operator({) operator(}\)\))operator(;)
  operator(})operator(,)
  key(update)operator(:) ident(Prototype)operator(.)ident(emptyFunction)
operator(}\))operator(;)

ident(Effect)operator(.)ident(Opacity) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(\)) keyword(throw)operator(()ident(Effect)operator(.)ident(_elementDoesNotExistError)operator(\))operator(;)
    comment(// make this work on IE on elements without 'layout')
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(&&) operator((!)local_variable(this)operator(.)ident(element)operator(.)ident(currentStyle)operator(.)ident(hasLayout)operator(\)\))
      local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(zoom)operator(:) integer(1)operator(}\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(from)operator(:) local_variable(this)operator(.)ident(element)operator(.)ident(getOpacity)operator(()operator(\)) operator(||) float(0.0)operator(,)
      key(to)operator(:)   float(1.0)
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    local_variable(this)operator(.)ident(start)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(setOpacity)operator(()ident(position)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Move) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(\)) keyword(throw)operator(()ident(Effect)operator(.)ident(_elementDoesNotExistError)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(x)operator(:)    integer(0)operator(,)
      key(y)operator(:)    integer(0)operator(,)
      key(mode)operator(:) string<delimiter(')content(relative)delimiter(')>
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    local_variable(this)operator(.)ident(start)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  key(setup)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(originalLeft) operator(=) ident(parseFloat)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(left)delimiter(')>operator(\)) operator(||) string<delimiter(')content(0)delimiter(')>operator(\))operator(;)
    local_variable(this)operator(.)ident(originalTop)  operator(=) ident(parseFloat)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(top)delimiter(')>operator(\))  operator(||) string<delimiter(')content(0)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(mode) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) operator({)
      local_variable(this)operator(.)ident(options)operator(.)ident(x) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(x) operator(-) local_variable(this)operator(.)ident(originalLeft)operator(;)
      local_variable(this)operator(.)ident(options)operator(.)ident(y) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(y) operator(-) local_variable(this)operator(.)ident(originalTop)operator(;)
    operator(})
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)
      key(left)operator(:) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(x)  operator(*) ident(position) operator(+) local_variable(this)operator(.)ident(originalLeft)operator(\))operator(.)ident(round)operator(()operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(,)
      key(top)operator(:)  operator(()local_variable(this)operator(.)ident(options)operator(.)ident(y)  operator(*) ident(position) operator(+) local_variable(this)operator(.)ident(originalTop)operator(\))operator(.)ident(round)operator(()operator(\))  operator(+) string<delimiter(')content(px)delimiter(')>
    operator(}\))operator(;)
  operator(})
operator(}\))operator(;)

comment(// for backwards compatibility)
ident(Effect)operator(.)ident(MoveBy) operator(=) keyword(function)operator(()ident(element)operator(,) ident(toTop)operator(,) ident(toLeft)operator(\)) operator({)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,) 
    ident(Object)operator(.)ident(extend)operator(({) key(x)operator(:) ident(toLeft)operator(,) key(y)operator(:) ident(toTop) operator(})operator(,) local_variable(arguments)operator([)integer(3)operator(]) operator(||) operator({) operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Scale) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(percent)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(\)) keyword(throw)operator(()ident(Effect)operator(.)ident(_elementDoesNotExistError)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(scaleX)operator(:) keyword(true)operator(,)
      key(scaleY)operator(:) keyword(true)operator(,)
      key(scaleContent)operator(:) keyword(true)operator(,)
      key(scaleFromCenter)operator(:) keyword(false)operator(,)
      key(scaleMode)operator(:) string<delimiter(')content(box)delimiter(')>operator(,)        comment(// 'box' or 'contents' or { } with provided values)
      key(scaleFrom)operator(:) float(100.0)operator(,)
      key(scaleTo)operator(:)   ident(percent)
    operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)
    local_variable(this)operator(.)ident(start)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  key(setup)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(restoreAfterFinish) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(restoreAfterFinish) operator(||) keyword(false)operator(;)
    local_variable(this)operator(.)ident(elementPositioning) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
    
    local_variable(this)operator(.)ident(originalStyle) operator(=) operator({) operator(})operator(;)
    operator([)string<delimiter(')content(top)delimiter(')>operator(,)string<delimiter(')content(left)delimiter(')>operator(,)string<delimiter(')content(width)delimiter(')>operator(,)string<delimiter(')content(height)delimiter(')>operator(,)string<delimiter(')content(fontSize)delimiter(')>operator(])operator(.)ident(each)operator(() keyword(function)operator(()ident(k)operator(\)) operator({)
      local_variable(this)operator(.)ident(originalStyle)operator([)ident(k)operator(]) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(style)operator([)ident(k)operator(])operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
      
    local_variable(this)operator(.)ident(originalTop)  operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(offsetTop)operator(;)
    local_variable(this)operator(.)ident(originalLeft) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(offsetLeft)operator(;)
    
    keyword(var) ident(fontSize) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(font-size)delimiter(')>operator(\)) operator(||) string<delimiter(')content(100%)delimiter(')>operator(;)
    operator([)string<delimiter(')content(em)delimiter(')>operator(,)string<delimiter(')content(px)delimiter(')>operator(,)string<delimiter(')content(%)delimiter(')>operator(,)string<delimiter(')content(pt)delimiter(')>operator(])operator(.)ident(each)operator(() keyword(function)operator(()ident(fontSizeType)operator(\)) operator({)
      keyword(if) operator(()ident(fontSize)operator(.)ident(indexOf)operator(()ident(fontSizeType)operator(\))operator(>)integer(0)operator(\)) operator({)
        local_variable(this)operator(.)ident(fontSize)     operator(=) ident(parseFloat)operator(()ident(fontSize)operator(\))operator(;)
        local_variable(this)operator(.)ident(fontSizeType) operator(=) ident(fontSizeType)operator(;)
      operator(})
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    
    local_variable(this)operator(.)ident(factor) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleTo) operator(-) local_variable(this)operator(.)ident(options)operator(.)ident(scaleFrom)operator(\))operator(/)integer(100)operator(;)
    
    local_variable(this)operator(.)ident(dims) operator(=) keyword(null)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleMode)operator(==)string<delimiter(')content(box)delimiter(')>operator(\))
      local_variable(this)operator(.)ident(dims) operator(=) operator([)local_variable(this)operator(.)ident(element)operator(.)ident(offsetHeight)operator(,) local_variable(this)operator(.)ident(element)operator(.)ident(offsetWidth)operator(])operator(;)
    keyword(if) operator(()regexp<delimiter(/)content(^content)delimiter(/)>operator(.)ident(test)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleMode)operator(\)\))
      local_variable(this)operator(.)ident(dims) operator(=) operator([)local_variable(this)operator(.)ident(element)operator(.)ident(scrollHeight)operator(,) local_variable(this)operator(.)ident(element)operator(.)ident(scrollWidth)operator(])operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(dims)operator(\))
      local_variable(this)operator(.)ident(dims) operator(=) operator([)local_variable(this)operator(.)ident(options)operator(.)ident(scaleMode)operator(.)ident(originalHeight)operator(,)
                   local_variable(this)operator(.)ident(options)operator(.)ident(scaleMode)operator(.)ident(originalWidth)operator(])operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    keyword(var) ident(currentScale) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleFrom)operator(/)float(100.0)operator(\)) operator(+) operator(()local_variable(this)operator(.)ident(factor) operator(*) ident(position)operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleContent) operator(&&) local_variable(this)operator(.)ident(fontSize)operator(\))
      local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(fontSize)operator(:) local_variable(this)operator(.)ident(fontSize) operator(*) ident(currentScale) operator(+) local_variable(this)operator(.)ident(fontSizeType) operator(}\))operator(;)
    local_variable(this)operator(.)ident(setDimensions)operator(()local_variable(this)operator(.)ident(dims)operator([)integer(0)operator(]) operator(*) ident(currentScale)operator(,) local_variable(this)operator(.)ident(dims)operator([)integer(1)operator(]) operator(*) ident(currentScale)operator(\))operator(;)
  operator(})operator(,)
  key(finish)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(restoreAfterFinish)operator(\)) local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(()local_variable(this)operator(.)ident(originalStyle)operator(\))operator(;)
  operator(})operator(,)
  key(setDimensions)operator(:) keyword(function)operator(()ident(height)operator(,) ident(width)operator(\)) operator({)
    keyword(var) ident(d) operator(=) operator({) operator(})operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleX)operator(\)) ident(d)operator(.)ident(width) operator(=) ident(width)operator(.)ident(round)operator(()operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleY)operator(\)) ident(d)operator(.)ident(height) operator(=) ident(height)operator(.)ident(round)operator(()operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleFromCenter)operator(\)) operator({)
      keyword(var) ident(topd)  operator(=) operator(()ident(height) operator(-) local_variable(this)operator(.)ident(dims)operator([)integer(0)operator(]\))operator(/)integer(2)operator(;)
      keyword(var) ident(leftd) operator(=) operator(()ident(width)  operator(-) local_variable(this)operator(.)ident(dims)operator([)integer(1)operator(]\))operator(/)integer(2)operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(elementPositioning) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) operator({)
        keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleY)operator(\)) ident(d)operator(.)ident(top) operator(=) local_variable(this)operator(.)ident(originalTop)operator(-)ident(topd) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
        keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleX)operator(\)) ident(d)operator(.)ident(left) operator(=) local_variable(this)operator(.)ident(originalLeft)operator(-)ident(leftd) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
      operator(}) keyword(else) operator({)
        keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleY)operator(\)) ident(d)operator(.)ident(top) operator(=) operator(-)ident(topd) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
        keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(scaleX)operator(\)) ident(d)operator(.)ident(left) operator(=) operator(-)ident(leftd) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
      operator(})
    operator(})
    local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(()ident(d)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Highlight) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(\)) keyword(throw)operator(()ident(Effect)operator(.)ident(_elementDoesNotExistError)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({) key(startcolor)operator(:) string<delimiter(')content(#ffff99)delimiter(')> operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    local_variable(this)operator(.)ident(start)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  key(setup)operator(:) keyword(function)operator(()operator(\)) operator({)
    comment(// Prevent executing on elements not in the layout flow)
    keyword(if) operator(()local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\))operator(==)string<delimiter(')content(none)delimiter(')>operator(\)) operator({) local_variable(this)operator(.)ident(cancel)operator(()operator(\))operator(;) keyword(return)operator(;) operator(})
    comment(// Disable background image during the effect)
    local_variable(this)operator(.)ident(oldStyle) operator(=) operator({) operator(})operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(keepBackgroundImage)operator(\)) operator({)
      local_variable(this)operator(.)ident(oldStyle)operator(.)ident(backgroundImage) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(background-image)delimiter(')>operator(\))operator(;)
      local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(backgroundImage)operator(:) string<delimiter(')content(none)delimiter(')>operator(}\))operator(;)
    operator(})
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(endcolor)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(endcolor) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(background-color)delimiter(')>operator(\))operator(.)ident(parseColor)operator(()string<delimiter(')content(#ffffff)delimiter(')>operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(restorecolor)operator(\))
      local_variable(this)operator(.)ident(options)operator(.)ident(restorecolor) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(background-color)delimiter(')>operator(\))operator(;)
    comment(// init color calculations)
    local_variable(this)operator(.)ident(_base)  operator(=) predefined($R)operator(()integer(0)operator(,)integer(2)operator(\))operator(.)ident(map)operator(()keyword(function)operator(()ident(i)operator(\))operator({) keyword(return) ident(parseInt)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(startcolor)operator(.)ident(slice)operator(()ident(i)operator(*)integer(2)operator(+)integer(1)operator(,)ident(i)operator(*)integer(2)operator(+)integer(3)operator(\))operator(,)integer(16)operator(\)) operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    local_variable(this)operator(.)ident(_delta) operator(=) predefined($R)operator(()integer(0)operator(,)integer(2)operator(\))operator(.)ident(map)operator(()keyword(function)operator(()ident(i)operator(\))operator({) keyword(return) ident(parseInt)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(endcolor)operator(.)ident(slice)operator(()ident(i)operator(*)integer(2)operator(+)integer(1)operator(,)ident(i)operator(*)integer(2)operator(+)integer(3)operator(\))operator(,)integer(16)operator(\))operator(-)local_variable(this)operator(.)ident(_base)operator([)ident(i)operator(]) operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(backgroundColor)operator(:) predefined($R)operator(()integer(0)operator(,)integer(2)operator(\))operator(.)ident(inject)operator(()string<delimiter(')content(#)delimiter(')>operator(,)keyword(function)operator(()ident(m)operator(,)ident(v)operator(,)ident(i)operator(\))operator({)
      keyword(return) ident(m)operator(+(()local_variable(this)operator(.)ident(_base)operator([)ident(i)operator(])operator(+()local_variable(this)operator(.)ident(_delta)operator([)ident(i)operator(])operator(*)ident(position)operator(\)\))operator(.)ident(round)operator(()operator(\))operator(.)ident(toColorPart)operator(()operator(\)\))operator(;) operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\)) operator(}\))operator(;)
  operator(})operator(,)
  key(finish)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(()ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(oldStyle)operator(,) operator({)
      key(backgroundColor)operator(:) local_variable(this)operator(.)ident(options)operator(.)ident(restorecolor)
    operator(}\)\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(ScrollTo) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  keyword(var) ident(options) operator(=) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(})operator(,)
    ident(scrollOffsets) operator(=) ident(document)operator(.)ident(viewport)operator(.)ident(getScrollOffsets)operator(()operator(\))operator(,)
    ident(elementOffsets) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(cumulativeOffset)operator(()operator(\))operator(,)
    ident(max) operator(=) operator(()ident(window)operator(.)ident(height) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollHeight)operator(\)) operator(-) ident(document)operator(.)ident(viewport)operator(.)ident(getHeight)operator(()operator(\))operator(;)  

  keyword(if) operator(()ident(options)operator(.)ident(offset)operator(\)) ident(elementOffsets)operator([)integer(1)operator(]) operator(+=) ident(options)operator(.)ident(offset)operator(;)

  keyword(return) keyword(new) ident(Effect)operator(.)ident(Tween)operator(()keyword(null)operator(,)
    ident(scrollOffsets)operator(.)ident(top)operator(,)
    ident(elementOffsets)operator([)integer(1)operator(]) operator(>) ident(max) operator(?) ident(max) operator(:) ident(elementOffsets)operator([)integer(1)operator(])operator(,)
    ident(options)operator(,)
    keyword(function)operator(()ident(p)operator(\))operator({) ident(scrollTo)operator(()ident(scrollOffsets)operator(.)ident(left)operator(,) ident(p)operator(.)ident(round)operator(()operator(\)\)) operator(})
  operator(\))operator(;)
operator(})operator(;)

comment(/* ------------- combination effects ------------- */)

ident(Effect)operator(.)ident(Fade) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(oldOpacity) operator(=) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\))operator(;)
  keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
    key(from)operator(:) ident(element)operator(.)ident(getOpacity)operator(()operator(\)) operator(||) float(1.0)operator(,)
    key(to)operator(:)   float(0.0)operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({) 
      keyword(if) operator(()ident(effect)operator(.)ident(options)operator(.)ident(to)operator(!=)integer(0)operator(\)) keyword(return)operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(opacity)operator(:) ident(oldOpacity)operator(}\))operator(;) 
    operator(})
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,)ident(options)operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Appear) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
  key(from)operator(:) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\)) operator(==) string<delimiter(')content(none)delimiter(')> operator(?) float(0.0) operator(:) ident(element)operator(.)ident(getOpacity)operator(()operator(\)) operator(||) float(0.0)operator(\))operator(,)
  key(to)operator(:)   float(1.0)operator(,)
  comment(// force Safari to render floated elements properly)
  key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    ident(effect)operator(.)ident(element)operator(.)ident(forceRerendering)operator(()operator(\))operator(;)
  operator(})operator(,)
  key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    ident(effect)operator(.)ident(element)operator(.)ident(setOpacity)operator(()ident(effect)operator(.)ident(options)operator(.)ident(from)operator(\))operator(.)ident(show)operator(()operator(\))operator(;) 
  operator(}})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,)ident(options)operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Puff) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({) 
    key(opacity)operator(:) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\))operator(,) 
    key(position)operator(:) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\))operator(,)
    key(top)operator(:)  ident(element)operator(.)ident(style)operator(.)ident(top)operator(,)
    key(left)operator(:) ident(element)operator(.)ident(style)operator(.)ident(left)operator(,)
    key(width)operator(:) ident(element)operator(.)ident(style)operator(.)ident(width)operator(,)
    key(height)operator(:) ident(element)operator(.)ident(style)operator(.)ident(height)
  operator(})operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Parallel)operator(()
   operator([) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(200)operator(,) 
      operator({) key(sync)operator(:) keyword(true)operator(,) key(scaleFromCenter)operator(:) keyword(true)operator(,) key(scaleContent)operator(:) keyword(true)operator(,) key(restoreAfterFinish)operator(:) keyword(true) operator(}\))operator(,) 
     keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) operator({) key(sync)operator(:) keyword(true)operator(,) key(to)operator(:) float(0.0) operator(}) operator(\)) operator(])operator(,) 
     ident(Object)operator(.)ident(extend)operator(({) key(duration)operator(:) float(1.0)operator(,) 
      key(beforeSetupInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
        ident(Position)operator(.)ident(absolutize)operator(()ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(\))
      operator(})operator(,)
      key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
         ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;) operator(})
     operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))
   operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(BlindUp) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(0)operator(,)
    ident(Object)operator(.)ident(extend)operator(({) key(scaleContent)operator(:) keyword(false)operator(,) 
      key(scaleX)operator(:) keyword(false)operator(,) 
      key(restoreAfterFinish)operator(:) keyword(true)operator(,)
      key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
        ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(;)
      operator(}) 
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))
  operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(BlindDown) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(elementDimensions) operator(=) ident(element)operator(.)ident(getDimensions)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(100)operator(,) ident(Object)operator(.)ident(extend)operator(({) 
    key(scaleContent)operator(:) keyword(false)operator(,) 
    key(scaleX)operator(:) keyword(false)operator(,)
    key(scaleFrom)operator(:) integer(0)operator(,)
    key(scaleMode)operator(:) operator({)key(originalHeight)operator(:) ident(elementDimensions)operator(.)ident(height)operator(,) key(originalWidth)operator(:) ident(elementDimensions)operator(.)ident(width)operator(})operator(,)
    key(restoreAfterFinish)operator(:) keyword(true)operator(,)
    key(afterSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(height)operator(:) string<delimiter(')content(0px)delimiter(')>operator(}\))operator(.)ident(show)operator(()operator(\))operator(;) 
    operator(})operator(,)  
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(undoClipping)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(SwitchOff) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(oldOpacity) operator(=) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Appear)operator(()ident(element)operator(,) ident(Object)operator(.)ident(extend)operator(({)
    key(duration)operator(:) float(0.4)operator(,)
    key(from)operator(:) integer(0)operator(,)
    key(transition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(flicker)operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(effect)operator(.)ident(element)operator(,) integer(1)operator(,) operator({) 
        key(duration)operator(:) float(0.3)operator(,) key(scaleFromCenter)operator(:) keyword(true)operator(,)
        key(scaleX)operator(:) keyword(false)operator(,) key(scaleContent)operator(:) keyword(false)operator(,) key(restoreAfterFinish)operator(:) keyword(true)operator(,)
        key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({) 
          ident(effect)operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(.)ident(makeClipping)operator(()operator(\))operator(;)
        operator(})operator(,)
        key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
          ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(opacity)operator(:) ident(oldOpacity)operator(}\))operator(;)
        operator(})
      operator(}\))
    operator(})
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(DropOut) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({)
    key(top)operator(:) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(top)delimiter(')>operator(\))operator(,)
    key(left)operator(:) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(left)delimiter(')>operator(\))operator(,)
    key(opacity)operator(:) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\)) operator(})operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Parallel)operator(()
    operator([) keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,) operator({)key(x)operator(:) integer(0)operator(,) key(y)operator(:) integer(100)operator(,) key(sync)operator(:) keyword(true) operator(}\))operator(,) 
      keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) operator({) key(sync)operator(:) keyword(true)operator(,) key(to)operator(:) float(0.0) operator(}\)) operator(])operator(,)
    ident(Object)operator(.)ident(extend)operator(()
      operator({) key(duration)operator(:) float(0.5)operator(,)
        key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
          ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(;) 
        operator(})operator(,)
        key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
          ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;)
        operator(}) 
      operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Shake) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
    key(distance)operator(:) integer(20)operator(,)
    key(duration)operator(:) float(0.5)
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({)operator(}\))operator(;)
  keyword(var) ident(distance) operator(=) ident(parseFloat)operator(()ident(options)operator(.)ident(distance)operator(\))operator(;)
  keyword(var) ident(split) operator(=) ident(parseFloat)operator(()ident(options)operator(.)ident(duration)operator(\)) operator(/) float(10.0)operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({)
    key(top)operator(:) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(top)delimiter(')>operator(\))operator(,)
    key(left)operator(:) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(left)delimiter(')>operator(\)) operator(})operator(;)
    keyword(return) keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,)
      operator({) key(x)operator(:)  ident(distance)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(,) key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,)
      operator({) key(x)operator(:) operator(-)ident(distance)operator(*)integer(2)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(*)integer(2)operator(,)  key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,)
      operator({) key(x)operator(:)  ident(distance)operator(*)integer(2)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(*)integer(2)operator(,)  key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,)
      operator({) key(x)operator(:) operator(-)ident(distance)operator(*)integer(2)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(*)integer(2)operator(,)  key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,)
      operator({) key(x)operator(:)  ident(distance)operator(*)integer(2)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(*)integer(2)operator(,)  key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,)
      operator({) key(x)operator(:) operator(-)ident(distance)operator(,) key(y)operator(:) integer(0)operator(,) key(duration)operator(:) ident(split)operator(,) key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
        ident(effect)operator(.)ident(element)operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;)
  operator(}}\)) operator(}}\)) operator(}}\)) operator(}}\)) operator(}}\)) operator(}}\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(SlideDown) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(cleanWhitespace)operator(()operator(\))operator(;)
  comment(// SlideDown need to have the content of the element wrapped in a container element with fixed height!)
  keyword(var) ident(oldInnerBottom) operator(=) ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(getStyle)operator(()string<delimiter(')content(bottom)delimiter(')>operator(\))operator(;)
  keyword(var) ident(elementDimensions) operator(=) ident(element)operator(.)ident(getDimensions)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(100)operator(,) ident(Object)operator(.)ident(extend)operator(({) 
    key(scaleContent)operator(:) keyword(false)operator(,) 
    key(scaleX)operator(:) keyword(false)operator(,) 
    key(scaleFrom)operator(:) ident(window)operator(.)ident(opera) operator(?) integer(0) operator(:) integer(1)operator(,)
    key(scaleMode)operator(:) operator({)key(originalHeight)operator(:) ident(elementDimensions)operator(.)ident(height)operator(,) key(originalWidth)operator(:) ident(elementDimensions)operator(.)ident(width)operator(})operator(,)
    key(restoreAfterFinish)operator(:) keyword(true)operator(,)
    key(afterSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(makePositioned)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(window)operator(.)ident(opera)operator(\)) ident(effect)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(top)operator(:) string<delimiter(')delimiter(')>operator(}\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(height)operator(:) string<delimiter(')content(0px)delimiter(')>operator(}\))operator(.)ident(show)operator(()operator(\))operator(;) 
    operator(})operator(,)
    key(afterUpdateInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(bottom)operator(:)
        operator(()ident(effect)operator(.)ident(dims)operator([)integer(0)operator(]) operator(-) ident(effect)operator(.)ident(element)operator(.)ident(clientHeight)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')> operator(}\))operator(;) 
    operator(})operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(bottom)operator(:) ident(oldInnerBottom)operator(}\))operator(;) operator(})
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))
  operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(SlideUp) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(cleanWhitespace)operator(()operator(\))operator(;)
  keyword(var) ident(oldInnerBottom) operator(=) ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(getStyle)operator(()string<delimiter(')content(bottom)delimiter(')>operator(\))operator(;)
  keyword(var) ident(elementDimensions) operator(=) ident(element)operator(.)ident(getDimensions)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) ident(window)operator(.)ident(opera) operator(?) integer(0) operator(:) integer(1)operator(,)
   ident(Object)operator(.)ident(extend)operator(({) key(scaleContent)operator(:) keyword(false)operator(,) 
    key(scaleX)operator(:) keyword(false)operator(,) 
    key(scaleMode)operator(:) string<delimiter(')content(box)delimiter(')>operator(,)
    key(scaleFrom)operator(:) integer(100)operator(,)
    key(scaleMode)operator(:) operator({)key(originalHeight)operator(:) ident(elementDimensions)operator(.)ident(height)operator(,) key(originalWidth)operator(:) ident(elementDimensions)operator(.)ident(width)operator(})operator(,)
    key(restoreAfterFinish)operator(:) keyword(true)operator(,)
    key(afterSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(makePositioned)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(window)operator(.)ident(opera)operator(\)) ident(effect)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(top)operator(:) string<delimiter(')delimiter(')>operator(}\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(.)ident(show)operator(()operator(\))operator(;)
    operator(})operator(,)  
    key(afterUpdateInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(bottom)operator(:)
        operator(()ident(effect)operator(.)ident(dims)operator([)integer(0)operator(]) operator(-) ident(effect)operator(.)ident(element)operator(.)ident(clientHeight)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')> operator(}\))operator(;)
    operator(})operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(;)
      ident(effect)operator(.)ident(element)operator(.)ident(down)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(({)key(bottom)operator(:) ident(oldInnerBottom)operator(}\))operator(;)
    operator(})
   operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))
  operator(\))operator(;)
operator(})operator(;)

comment(// Bug in opera makes the TD containing this element expand for a instance after finish )
ident(Effect)operator(.)ident(Squish) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) ident(window)operator(.)ident(opera) operator(?) integer(1) operator(:) integer(0)operator(,) operator({) 
    key(restoreAfterFinish)operator(:) keyword(true)operator(,)
    key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(;) 
    operator(})operator(,)  
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(;) 
    operator(})
  operator(}\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Grow) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
    key(direction)operator(:) string<delimiter(')content(center)delimiter(')>operator(,)
    key(moveTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(,)
    key(scaleTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(,)
    key(opacityTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(full)
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({)
    key(top)operator(:) ident(element)operator(.)ident(style)operator(.)ident(top)operator(,)
    key(left)operator(:) ident(element)operator(.)ident(style)operator(.)ident(left)operator(,)
    key(height)operator(:) ident(element)operator(.)ident(style)operator(.)ident(height)operator(,)
    key(width)operator(:) ident(element)operator(.)ident(style)operator(.)ident(width)operator(,)
    key(opacity)operator(:) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\)) operator(})operator(;)

  keyword(var) ident(dims) operator(=) ident(element)operator(.)ident(getDimensions)operator(()operator(\))operator(;)    
  keyword(var) ident(initialMoveX)operator(,) ident(initialMoveY)operator(;)
  keyword(var) ident(moveX)operator(,) ident(moveY)operator(;)
  
  keyword(switch) operator(()ident(options)operator(.)ident(direction)operator(\)) operator({)
    keyword(case) string<delimiter(')content(top-left)delimiter(')>operator(:)
      ident(initialMoveX) operator(=) ident(initialMoveY) operator(=) ident(moveX) operator(=) ident(moveY) operator(=) integer(0)operator(;) 
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(top-right)delimiter(')>operator(:)
      ident(initialMoveX) operator(=) ident(dims)operator(.)ident(width)operator(;)
      ident(initialMoveY) operator(=) ident(moveY) operator(=) integer(0)operator(;)
      ident(moveX) operator(=) operator(-)ident(dims)operator(.)ident(width)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(bottom-left)delimiter(')>operator(:)
      ident(initialMoveX) operator(=) ident(moveX) operator(=) integer(0)operator(;)
      ident(initialMoveY) operator(=) ident(dims)operator(.)ident(height)operator(;)
      ident(moveY) operator(=) operator(-)ident(dims)operator(.)ident(height)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(bottom-right)delimiter(')>operator(:)
      ident(initialMoveX) operator(=) ident(dims)operator(.)ident(width)operator(;)
      ident(initialMoveY) operator(=) ident(dims)operator(.)ident(height)operator(;)
      ident(moveX) operator(=) operator(-)ident(dims)operator(.)ident(width)operator(;)
      ident(moveY) operator(=) operator(-)ident(dims)operator(.)ident(height)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(center)delimiter(')>operator(:)
      ident(initialMoveX) operator(=) ident(dims)operator(.)ident(width) operator(/) integer(2)operator(;)
      ident(initialMoveY) operator(=) ident(dims)operator(.)ident(height) operator(/) integer(2)operator(;)
      ident(moveX) operator(=) operator(-)ident(dims)operator(.)ident(width) operator(/) integer(2)operator(;)
      ident(moveY) operator(=) operator(-)ident(dims)operator(.)ident(height) operator(/) integer(2)operator(;)
      keyword(break)operator(;)
  operator(})
  
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,) operator({)
    key(x)operator(:) ident(initialMoveX)operator(,)
    key(y)operator(:) ident(initialMoveY)operator(,)
    key(duration)operator(:) float(0.01)operator(,) 
    key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(makeClipping)operator(()operator(\))operator(.)ident(makePositioned)operator(()operator(\))operator(;)
    operator(})operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
      keyword(new) ident(Effect)operator(.)ident(Parallel)operator(()
        operator([) keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(effect)operator(.)ident(element)operator(,) operator({) key(sync)operator(:) keyword(true)operator(,) key(to)operator(:) float(1.0)operator(,) key(from)operator(:) float(0.0)operator(,) key(transition)operator(:) ident(options)operator(.)ident(opacityTransition) operator(}\))operator(,)
          keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(effect)operator(.)ident(element)operator(,) operator({) key(x)operator(:) ident(moveX)operator(,) key(y)operator(:) ident(moveY)operator(,) key(sync)operator(:) keyword(true)operator(,) key(transition)operator(:) ident(options)operator(.)ident(moveTransition) operator(}\))operator(,)
          keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(effect)operator(.)ident(element)operator(,) integer(100)operator(,) operator({)
            key(scaleMode)operator(:) operator({) key(originalHeight)operator(:) ident(dims)operator(.)ident(height)operator(,) key(originalWidth)operator(:) ident(dims)operator(.)ident(width) operator(})operator(,) 
            key(sync)operator(:) keyword(true)operator(,) key(scaleFrom)operator(:) ident(window)operator(.)ident(opera) operator(?) integer(1) operator(:) integer(0)operator(,) key(transition)operator(:) ident(options)operator(.)ident(scaleTransition)operator(,) key(restoreAfterFinish)operator(:) keyword(true)operator(}\))
        operator(])operator(,) ident(Object)operator(.)ident(extend)operator(({)
             key(beforeSetup)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
               ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(height)operator(:) string<delimiter(')content(0px)delimiter(')>operator(}\))operator(.)ident(show)operator(()operator(\))operator(;) 
             operator(})operator(,)
             key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
               ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;) 
             operator(})
           operator(})operator(,) ident(options)operator(\))
      operator(\))
    operator(})
  operator(}\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Shrink) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
    key(direction)operator(:) string<delimiter(')content(center)delimiter(')>operator(,)
    key(moveTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(,)
    key(scaleTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(,)
    key(opacityTransition)operator(:) ident(Effect)operator(.)ident(Transitions)operator(.)ident(none)
  operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({)
    key(top)operator(:) ident(element)operator(.)ident(style)operator(.)ident(top)operator(,)
    key(left)operator(:) ident(element)operator(.)ident(style)operator(.)ident(left)operator(,)
    key(height)operator(:) ident(element)operator(.)ident(style)operator(.)ident(height)operator(,)
    key(width)operator(:) ident(element)operator(.)ident(style)operator(.)ident(width)operator(,)
    key(opacity)operator(:) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\)) operator(})operator(;)

  keyword(var) ident(dims) operator(=) ident(element)operator(.)ident(getDimensions)operator(()operator(\))operator(;)
  keyword(var) ident(moveX)operator(,) ident(moveY)operator(;)
  
  keyword(switch) operator(()ident(options)operator(.)ident(direction)operator(\)) operator({)
    keyword(case) string<delimiter(')content(top-left)delimiter(')>operator(:)
      ident(moveX) operator(=) ident(moveY) operator(=) integer(0)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(top-right)delimiter(')>operator(:)
      ident(moveX) operator(=) ident(dims)operator(.)ident(width)operator(;)
      ident(moveY) operator(=) integer(0)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(bottom-left)delimiter(')>operator(:)
      ident(moveX) operator(=) integer(0)operator(;)
      ident(moveY) operator(=) ident(dims)operator(.)ident(height)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(bottom-right)delimiter(')>operator(:)
      ident(moveX) operator(=) ident(dims)operator(.)ident(width)operator(;)
      ident(moveY) operator(=) ident(dims)operator(.)ident(height)operator(;)
      keyword(break)operator(;)
    keyword(case) string<delimiter(')content(center)delimiter(')>operator(:)  
      ident(moveX) operator(=) ident(dims)operator(.)ident(width) operator(/) integer(2)operator(;)
      ident(moveY) operator(=) ident(dims)operator(.)ident(height) operator(/) integer(2)operator(;)
      keyword(break)operator(;)
  operator(})
  
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Parallel)operator(()
    operator([) keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) operator({) key(sync)operator(:) keyword(true)operator(,) key(to)operator(:) float(0.0)operator(,) key(from)operator(:) float(1.0)operator(,) key(transition)operator(:) ident(options)operator(.)ident(opacityTransition) operator(}\))operator(,)
      keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) ident(window)operator(.)ident(opera) operator(?) integer(1) operator(:) integer(0)operator(,) operator({) key(sync)operator(:) keyword(true)operator(,) key(transition)operator(:) ident(options)operator(.)ident(scaleTransition)operator(,) key(restoreAfterFinish)operator(:) keyword(true)operator(}\))operator(,)
      keyword(new) ident(Effect)operator(.)ident(Move)operator(()ident(element)operator(,) operator({) key(x)operator(:) ident(moveX)operator(,) key(y)operator(:) ident(moveY)operator(,) key(sync)operator(:) keyword(true)operator(,) key(transition)operator(:) ident(options)operator(.)ident(moveTransition) operator(}\))
    operator(])operator(,) ident(Object)operator(.)ident(extend)operator(({)            
         key(beforeStartInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
           ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(makePositioned)operator(()operator(\))operator(.)ident(makeClipping)operator(()operator(\))operator(;) 
         operator(})operator(,)
         key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
           ident(effect)operator(.)ident(effects)operator([)integer(0)operator(])operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(undoPositioned)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;) operator(})
       operator(})operator(,) ident(options)operator(\))
  operator(\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Pulsate) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(options)    operator(=) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(})operator(;)
  keyword(var) ident(oldOpacity) operator(=) ident(element)operator(.)ident(getInlineOpacity)operator(()operator(\))operator(;)
  keyword(var) ident(transition) operator(=) ident(options)operator(.)ident(transition) operator(||) ident(Effect)operator(.)ident(Transitions)operator(.)ident(sinoidal)operator(;)
  keyword(var) ident(reverser)   operator(=) keyword(function)operator(()ident(pos)operator(\))operator({) keyword(return) ident(transition)operator(()integer(1)operator(-)ident(Effect)operator(.)ident(Transitions)operator(.)ident(pulse)operator(()ident(pos)operator(,) ident(options)operator(.)ident(pulses)operator(\)\)) operator(})operator(;)
  ident(reverser)operator(.)ident(bind)operator(()ident(transition)operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Opacity)operator(()ident(element)operator(,) 
    ident(Object)operator(.)ident(extend)operator(()ident(Object)operator(.)ident(extend)operator(({)  key(duration)operator(:) float(2.0)operator(,) key(from)operator(:) integer(0)operator(,)
      key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({) ident(effect)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(opacity)operator(:) ident(oldOpacity)operator(}\))operator(;) operator(})
    operator(})operator(,) ident(options)operator(\))operator(,) operator({)key(transition)operator(:) ident(reverser)operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Fold) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
  ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  keyword(var) ident(oldStyle) operator(=) operator({)
    key(top)operator(:) ident(element)operator(.)ident(style)operator(.)ident(top)operator(,)
    key(left)operator(:) ident(element)operator(.)ident(style)operator(.)ident(left)operator(,)
    key(width)operator(:) ident(element)operator(.)ident(style)operator(.)ident(width)operator(,)
    key(height)operator(:) ident(element)operator(.)ident(style)operator(.)ident(height) operator(})operator(;)
  ident(element)operator(.)ident(makeClipping)operator(()operator(\))operator(;)
  keyword(return) keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(5)operator(,) ident(Object)operator(.)ident(extend)operator(({)   
    key(scaleContent)operator(:) keyword(false)operator(,)
    key(scaleX)operator(:) keyword(false)operator(,)
    key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
    keyword(new) ident(Effect)operator(.)ident(Scale)operator(()ident(element)operator(,) integer(1)operator(,) operator({) 
      key(scaleContent)operator(:) keyword(false)operator(,) 
      key(scaleY)operator(:) keyword(false)operator(,)
      key(afterFinishInternal)operator(:) keyword(function)operator(()ident(effect)operator(\)) operator({)
        ident(effect)operator(.)ident(element)operator(.)ident(hide)operator(()operator(\))operator(.)ident(undoClipping)operator(()operator(\))operator(.)ident(setStyle)operator(()ident(oldStyle)operator(\))operator(;)
      operator(}) operator(}\))operator(;)
  operator(}})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\)\))operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Morph) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Effect)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)local_variable(this)operator(.)ident(element)operator(\)) keyword(throw)operator(()ident(Effect)operator(.)ident(_elementDoesNotExistError)operator(\))operator(;)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(style)operator(:) operator({) operator(})
    operator(})operator(,) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(}\))operator(;)
    
    keyword(if) operator((!)ident(Object)operator(.)ident(isString)operator(()ident(options)operator(.)ident(style)operator(\)\)) local_variable(this)operator(.)ident(style) operator(=) predefined($H)operator(()ident(options)operator(.)ident(style)operator(\))operator(;)
    keyword(else) operator({)
      keyword(if) operator(()ident(options)operator(.)ident(style)operator(.)ident(include)operator(()string<delimiter(')content(:)delimiter(')>operator(\)\))
        local_variable(this)operator(.)ident(style) operator(=) ident(options)operator(.)ident(style)operator(.)ident(parseStyle)operator(()operator(\))operator(;)
      keyword(else) operator({)
        local_variable(this)operator(.)ident(element)operator(.)ident(addClassName)operator(()ident(options)operator(.)ident(style)operator(\))operator(;)
        local_variable(this)operator(.)ident(style) operator(=) predefined($H)operator(()local_variable(this)operator(.)ident(element)operator(.)ident(getStyles)operator(()operator(\)\))operator(;)
        local_variable(this)operator(.)ident(element)operator(.)ident(removeClassName)operator(()ident(options)operator(.)ident(style)operator(\))operator(;)
        keyword(var) ident(css) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyles)operator(()operator(\))operator(;)
        local_variable(this)operator(.)ident(style) operator(=) local_variable(this)operator(.)ident(style)operator(.)ident(reject)operator(()keyword(function)operator(()ident(style)operator(\)) operator({)
          keyword(return) ident(style)operator(.)ident(value) operator(==) ident(css)operator([)ident(style)operator(.)ident(key)operator(])operator(;)
        operator(}\))operator(;)
        ident(options)operator(.)ident(afterFinishInternal) operator(=) keyword(function)operator(()ident(effect)operator(\)) operator({)
          ident(effect)operator(.)ident(element)operator(.)ident(addClassName)operator(()ident(effect)operator(.)ident(options)operator(.)ident(style)operator(\))operator(;)
          ident(effect)operator(.)ident(transforms)operator(.)ident(each)operator(()keyword(function)operator(()ident(transform)operator(\)) operator({)
            ident(effect)operator(.)ident(element)operator(.)ident(style)operator([)ident(transform)operator(.)ident(style)operator(]) operator(=) string<delimiter(')delimiter(')>operator(;)
          operator(}\))operator(;)
        operator(})
      operator(})
    operator(})
    local_variable(this)operator(.)ident(start)operator(()ident(options)operator(\))operator(;)
  operator(})operator(,)
  
  key(setup)operator(:) keyword(function)operator(()operator(\))operator({)
    keyword(function) ident(parseColor)operator(()ident(color)operator(\))operator({)
      keyword(if) operator((!)ident(color) operator(||) operator([)string<delimiter(')content(rgba(0, 0, 0, 0\))delimiter(')>operator(,)string<delimiter(')content(transparent)delimiter(')>operator(])operator(.)ident(include)operator(()ident(color)operator(\)\)) ident(color) operator(=) string<delimiter(')content(#ffffff)delimiter(')>operator(;)
      ident(color) operator(=) ident(color)operator(.)ident(parseColor)operator(()operator(\))operator(;)
      keyword(return) predefined($R)operator(()integer(0)operator(,)integer(2)operator(\))operator(.)ident(map)operator(()keyword(function)operator(()ident(i)operator(\))operator({)
        keyword(return) ident(parseInt)operator(() ident(color)operator(.)ident(slice)operator(()ident(i)operator(*)integer(2)operator(+)integer(1)operator(,)ident(i)operator(*)integer(2)operator(+)integer(3)operator(\))operator(,) integer(16) operator(\)) 
      operator(}\))operator(;)
    operator(})
    local_variable(this)operator(.)ident(transforms) operator(=) local_variable(this)operator(.)ident(style)operator(.)ident(map)operator(()keyword(function)operator(()ident(pair)operator(\))operator({)
      keyword(var) ident(property) operator(=) ident(pair)operator([)integer(0)operator(])operator(,) ident(value) operator(=) ident(pair)operator([)integer(1)operator(])operator(,) ident(unit) operator(=) keyword(null)operator(;)

      keyword(if) operator(()ident(value)operator(.)ident(parseColor)operator(()string<delimiter(')content(#zzzzzz)delimiter(')>operator(\)) operator(!=) string<delimiter(')content(#zzzzzz)delimiter(')>operator(\)) operator({)
        ident(value) operator(=) ident(value)operator(.)ident(parseColor)operator(()operator(\))operator(;)
        ident(unit)  operator(=) string<delimiter(')content(color)delimiter(')>operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(property) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) operator({)
        ident(value) operator(=) ident(parseFloat)operator(()ident(value)operator(\))operator(;)
        keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(&&) operator((!)local_variable(this)operator(.)ident(element)operator(.)ident(currentStyle)operator(.)ident(hasLayout)operator(\)\))
          local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(({)key(zoom)operator(:) integer(1)operator(}\))operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(Element)operator(.)ident(CSS_LENGTH)operator(.)ident(test)operator(()ident(value)operator(\)\)) operator({)
          keyword(var) ident(components) operator(=) ident(value)operator(.)ident(match)operator(()regexp<delimiter(/)content(^([)content(\\+)content(\\-)content(]?[0-9)content(\\.)content(]+\)(.*\)$)delimiter(/)>operator(\))operator(;)
          ident(value) operator(=) ident(parseFloat)operator(()ident(components)operator([)integer(1)operator(]\))operator(;)
          ident(unit) operator(=) operator(()ident(components)operator(.)ident(length) operator(==) integer(3)operator(\)) operator(?) ident(components)operator([)integer(2)operator(]) operator(:) keyword(null)operator(;)
      operator(})

      keyword(var) ident(originalValue) operator(=) local_variable(this)operator(.)ident(element)operator(.)ident(getStyle)operator(()ident(property)operator(\))operator(;)
      keyword(return) operator({) 
        key(style)operator(:) ident(property)operator(.)ident(camelize)operator(()operator(\))operator(,) 
        key(originalValue)operator(:) ident(unit)operator(==)string<delimiter(')content(color)delimiter(')> operator(?) ident(parseColor)operator(()ident(originalValue)operator(\)) operator(:) ident(parseFloat)operator(()ident(originalValue) operator(||) integer(0)operator(\))operator(,) 
        key(targetValue)operator(:) ident(unit)operator(==)string<delimiter(')content(color)delimiter(')> operator(?) ident(parseColor)operator(()ident(value)operator(\)) operator(:) ident(value)operator(,)
        key(unit)operator(:) ident(unit)
      operator(})operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(.)ident(reject)operator(()keyword(function)operator(()ident(transform)operator(\))operator({)
      keyword(return) operator(()
        operator(()ident(transform)operator(.)ident(originalValue) operator(==) ident(transform)operator(.)ident(targetValue)operator(\)) operator(||)
        operator(()
          ident(transform)operator(.)ident(unit) operator(!=) string<delimiter(')content(color)delimiter(')> operator(&&)
          operator(()ident(isNaN)operator(()ident(transform)operator(.)ident(originalValue)operator(\)) operator(||) ident(isNaN)operator(()ident(transform)operator(.)ident(targetValue)operator(\)\))
        operator(\))
      operator(\))
    operator(}\))operator(;)
  operator(})operator(,)
  key(update)operator(:) keyword(function)operator(()ident(position)operator(\)) operator({)
    keyword(var) ident(style) operator(=) operator({) operator(})operator(,) ident(transform)operator(,) ident(i) operator(=) local_variable(this)operator(.)ident(transforms)operator(.)ident(length)operator(;)
    keyword(while)operator(()ident(i)operator(--)operator(\))
      ident(style)operator([()ident(transform) operator(=) local_variable(this)operator(.)ident(transforms)operator([)ident(i)operator(]\))operator(.)ident(style)operator(]) operator(=) 
        ident(transform)operator(.)ident(unit)operator(==)string<delimiter(')content(color)delimiter(')> operator(?) string<delimiter(')content(#)delimiter(')>operator(+)
          operator(()ident(Math)operator(.)ident(round)operator(()ident(transform)operator(.)ident(originalValue)operator([)integer(0)operator(])operator(+)
            operator(()ident(transform)operator(.)ident(targetValue)operator([)integer(0)operator(])operator(-)ident(transform)operator(.)ident(originalValue)operator([)integer(0)operator(]\))operator(*)ident(position)operator(\)\))operator(.)ident(toColorPart)operator(()operator(\)) operator(+)
          operator(()ident(Math)operator(.)ident(round)operator(()ident(transform)operator(.)ident(originalValue)operator([)integer(1)operator(])operator(+)
            operator(()ident(transform)operator(.)ident(targetValue)operator([)integer(1)operator(])operator(-)ident(transform)operator(.)ident(originalValue)operator([)integer(1)operator(]\))operator(*)ident(position)operator(\)\))operator(.)ident(toColorPart)operator(()operator(\)) operator(+)
          operator(()ident(Math)operator(.)ident(round)operator(()ident(transform)operator(.)ident(originalValue)operator([)integer(2)operator(])operator(+)
            operator(()ident(transform)operator(.)ident(targetValue)operator([)integer(2)operator(])operator(-)ident(transform)operator(.)ident(originalValue)operator([)integer(2)operator(]\))operator(*)ident(position)operator(\)\))operator(.)ident(toColorPart)operator(()operator(\)) operator(:)
        operator(()ident(transform)operator(.)ident(originalValue) operator(+)
          operator(()ident(transform)operator(.)ident(targetValue) operator(-) ident(transform)operator(.)ident(originalValue)operator(\)) operator(*) ident(position)operator(\))operator(.)ident(toFixed)operator(()integer(3)operator(\)) operator(+) 
            operator(()ident(transform)operator(.)ident(unit) operator(===) keyword(null) operator(?) string<delimiter(')delimiter(')> operator(:) ident(transform)operator(.)ident(unit)operator(\))operator(;)
    local_variable(this)operator(.)ident(element)operator(.)ident(setStyle)operator(()ident(style)operator(,) keyword(true)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Effect)operator(.)ident(Transform) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(tracks)operator(\))operator({)
    local_variable(this)operator(.)ident(tracks)  operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(options) operator(=) local_variable(arguments)operator([)integer(1)operator(]) operator(||) operator({) operator(})operator(;)
    local_variable(this)operator(.)ident(addTracks)operator(()ident(tracks)operator(\))operator(;)
  operator(})operator(,)
  key(addTracks)operator(:) keyword(function)operator(()ident(tracks)operator(\))operator({)
    ident(tracks)operator(.)ident(each)operator(()keyword(function)operator(()ident(track)operator(\))operator({)
      ident(track) operator(=) predefined($H)operator(()ident(track)operator(\))operator(;)
      keyword(var) ident(data) operator(=) ident(track)operator(.)ident(values)operator(()operator(\))operator(.)ident(first)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(tracks)operator(.)ident(push)operator(()predefined($H)operator(({)
        key(ids)operator(:)     ident(track)operator(.)ident(keys)operator(()operator(\))operator(.)ident(first)operator(()operator(\))operator(,)
        key(effect)operator(:)  ident(Effect)operator(.)ident(Morph)operator(,)
        key(options)operator(:) operator({) key(style)operator(:) ident(data) operator(})
      operator(}\)\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)
  key(play)operator(:) keyword(function)operator(()operator(\))operator({)
    keyword(return) keyword(new) ident(Effect)operator(.)ident(Parallel)operator(()
      local_variable(this)operator(.)ident(tracks)operator(.)ident(map)operator(()keyword(function)operator(()ident(track)operator(\))operator({)
        keyword(var) ident(ids) operator(=) ident(track)operator(.)ident(get)operator(()string<delimiter(')content(ids)delimiter(')>operator(\))operator(,) ident(effect) operator(=) ident(track)operator(.)ident(get)operator(()string<delimiter(')content(effect)delimiter(')>operator(\))operator(,) ident(options) operator(=) ident(track)operator(.)ident(get)operator(()string<delimiter(')content(options)delimiter(')>operator(\))operator(;)
        keyword(var) ident(elements) operator(=) operator([)predefined($)operator(()ident(ids)operator(\)) operator(||) predefined($$)operator(()ident(ids)operator(\)])operator(.)ident(flatten)operator(()operator(\))operator(;)
        keyword(return) ident(elements)operator(.)ident(map)operator(()keyword(function)operator(()ident(e)operator(\))operator({) keyword(return) keyword(new) ident(effect)operator(()ident(e)operator(,) ident(Object)operator(.)ident(extend)operator(({) key(sync)operator(:)keyword(true) operator(})operator(,) ident(options)operator(\)\)) operator(}\))operator(;)
      operator(}\))operator(.)ident(flatten)operator(()operator(\))operator(,)
      local_variable(this)operator(.)ident(options)
    operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Element)operator(.)ident(CSS_PROPERTIES) operator(=) predefined($w)operator(()
  string<delimiter(')content(backgroundColor backgroundPosition borderBottomColor borderBottomStyle )delimiter(')> operator(+) 
  string<delimiter(')content(borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth )delimiter(')> operator(+)
  string<delimiter(')content(borderRightColor borderRightStyle borderRightWidth borderSpacing )delimiter(')> operator(+)
  string<delimiter(')content(borderTopColor borderTopStyle borderTopWidth bottom clip color )delimiter(')> operator(+)
  string<delimiter(')content(fontSize fontWeight height left letterSpacing lineHeight )delimiter(')> operator(+)
  string<delimiter(')content(marginBottom marginLeft marginRight marginTop markerOffset maxHeight )delimiter(')>operator(+)
  string<delimiter(')content(maxWidth minHeight minWidth opacity outlineColor outlineOffset )delimiter(')> operator(+)
  string<delimiter(')content(outlineWidth paddingBottom paddingLeft paddingRight paddingTop )delimiter(')> operator(+)
  string<delimiter(')content(right textIndent top width wordSpacing zIndex)delimiter(')>operator(\))operator(;)
  
ident(Element)operator(.)ident(CSS_LENGTH) operator(=) regexp<delimiter(/)content(^(([)content(\\+)content(\\-)content(]?[0-9)content(\\.)content(]+\)(em|ex|px|in|cm|mm|pt|pc|)content(\\%)content(\)\)|0$)delimiter(/)>operator(;)

ident(String)operator(.)ident(__parseStyleElement) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(;)
ident(String)operator(.)ident(prototype)operator(.)ident(parseStyle) operator(=) keyword(function)operator(()operator(\))operator({)
  keyword(var) ident(style)operator(,) ident(styleRules) operator(=) predefined($H)operator(()operator(\))operator(;)
  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\))
    ident(style) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(,{)key(style)operator(:)local_variable(this)operator(}\))operator(.)ident(style)operator(;)
  keyword(else) operator({)
    ident(String)operator(.)ident(__parseStyleElement)operator(.)ident(innerHTML) operator(=) string<delimiter(')content(<div style=")delimiter(')> operator(+) local_variable(this) operator(+) string<delimiter(')content("></div>)delimiter(')>operator(;)
    ident(style) operator(=) ident(String)operator(.)ident(__parseStyleElement)operator(.)ident(childNodes)operator([)integer(0)operator(])operator(.)ident(style)operator(;)
  operator(})
  
  ident(Element)operator(.)ident(CSS_PROPERTIES)operator(.)ident(each)operator(()keyword(function)operator(()ident(property)operator(\))operator({)
    keyword(if) operator(()ident(style)operator([)ident(property)operator(]\)) ident(styleRules)operator(.)ident(set)operator(()ident(property)operator(,) ident(style)operator([)ident(property)operator(]\))operator(;) 
  operator(}\))operator(;)
  
  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(&&) local_variable(this)operator(.)ident(include)operator(()string<delimiter(')content(opacity)delimiter(')>operator(\)\))
    ident(styleRules)operator(.)ident(set)operator(()string<delimiter(')content(opacity)delimiter(')>operator(,) local_variable(this)operator(.)ident(match)operator(()regexp<delimiter(/)content(opacity:)char(\\s)content(*((?:0|1\)?(?:)content(\\.)char(\\d)content(*\)?\))delimiter(/)>operator(\))operator([)integer(1)operator(]\))operator(;)

  keyword(return) ident(styleRules)operator(;)
operator(})operator(;)

keyword(if) operator(()ident(document)operator(.)ident(defaultView) operator(&&) ident(document)operator(.)ident(defaultView)operator(.)ident(getComputedStyle)operator(\)) operator({)
  ident(Element)operator(.)ident(getStyles) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(css) operator(=) ident(document)operator(.)ident(defaultView)operator(.)ident(getComputedStyle)operator(()predefined($)operator(()ident(element)operator(\))operator(,) keyword(null)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(CSS_PROPERTIES)operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(styles)operator(,) ident(property)operator(\)) operator({)
      ident(styles)operator([)ident(property)operator(]) operator(=) ident(css)operator([)ident(property)operator(])operator(;)
      keyword(return) ident(styles)operator(;)
    operator(}\))operator(;)
  operator(})operator(;)
operator(}) keyword(else) operator({)
  ident(Element)operator(.)ident(getStyles) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(css) operator(=) ident(element)operator(.)ident(currentStyle)operator(,) ident(styles)operator(;)
    ident(styles) operator(=) ident(Element)operator(.)ident(CSS_PROPERTIES)operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(hash)operator(,) ident(property)operator(\)) operator({)
      ident(hash)operator(.)ident(set)operator(()ident(property)operator(,) ident(css)operator([)ident(property)operator(]\))operator(;)
      keyword(return) ident(hash)operator(;)
    operator(}\))operator(;)
    keyword(if) operator((!)ident(styles)operator(.)ident(opacity)operator(\)) ident(styles)operator(.)ident(set)operator(()string<delimiter(')content(opacity)delimiter(')>operator(,) ident(element)operator(.)ident(getOpacity)operator(()operator(\)\))operator(;)
    keyword(return) ident(styles)operator(;)
  operator(})operator(;)
operator(})operator(;)

ident(Effect)operator(.)ident(Methods) operator(=) operator({)
  key(morph)operator(:) keyword(function)operator(()ident(element)operator(,) ident(style)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(new) ident(Effect)operator(.)ident(Morph)operator(()ident(element)operator(,) ident(Object)operator(.)ident(extend)operator(({) key(style)operator(:) ident(style) operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\)\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)
  key(visualEffect)operator(:) keyword(function)operator(()ident(element)operator(,) ident(effect)operator(,) ident(options)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))
    keyword(var) ident(s) operator(=) ident(effect)operator(.)ident(dasherize)operator(()operator(\))operator(.)ident(camelize)operator(()operator(\))operator(,) ident(klass) operator(=) ident(s)operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(s)operator(.)ident(substring)operator(()integer(1)operator(\))operator(;)
    keyword(new) ident(Effect)operator([)ident(klass)operator(])operator(()ident(element)operator(,) ident(options)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)
  key(highlight)operator(:) keyword(function)operator(()ident(element)operator(,) ident(options)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(new) ident(Effect)operator(.)ident(Highlight)operator(()ident(element)operator(,) ident(options)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

predefined($w)operator(()string<delimiter(')content(fade appear grow shrink fold blindUp blindDown slideUp slideDown )delimiter(')>operator(+)
  string<delimiter(')content(pulsate shake puff squish switchOff dropOut)delimiter(')>operator(\))operator(.)ident(each)operator(()
  keyword(function)operator(()ident(effect)operator(\)) operator({) 
    ident(Effect)operator(.)ident(Methods)operator([)ident(effect)operator(]) operator(=) keyword(function)operator(()ident(element)operator(,) ident(options)operator(\))operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      ident(Effect)operator([)ident(effect)operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(effect)operator(.)ident(substring)operator(()integer(1)operator(\)])operator(()ident(element)operator(,) ident(options)operator(\))operator(;)
      keyword(return) ident(element)operator(;)
    operator(})
  operator(})
operator(\))operator(;)

predefined($w)operator(()string<delimiter(')content(getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles)delimiter(')>operator(\))operator(.)ident(each)operator(() 
  keyword(function)operator(()ident(f)operator(\)) operator({) ident(Effect)operator(.)ident(Methods)operator([)ident(f)operator(]) operator(=) ident(Element)operator([)ident(f)operator(])operator(;) operator(})
operator(\))operator(;)

ident(Element)operator(.)ident(addMethods)operator(()ident(Effect)operator(.)ident(Methods)operator(\))operator(;)
comment(/*  Prototype JavaScript framework, version 1.6.0.1
 *  (c\) 2005-2007 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/)

keyword(var) ident(Prototype) operator(=) operator({)
  key(Version)operator(:) string<delimiter(')content(1.6.0.1)delimiter(')>operator(,)

  key(Browser)operator(:) operator({)
    key(IE)operator(:)     operator(!!()ident(window)operator(.)ident(attachEvent) operator(&&) operator(!)ident(window)operator(.)ident(opera)operator(\))operator(,)
    key(Opera)operator(:)  operator(!!)ident(window)operator(.)ident(opera)operator(,)
    key(WebKit)operator(:) ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(AppleWebKit/)delimiter(')>operator(\)) operator(>) operator(-)integer(1)operator(,)
    key(Gecko)operator(:)  ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(Gecko)delimiter(')>operator(\)) operator(>) operator(-)integer(1) operator(&&) ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(KHTML)delimiter(')>operator(\)) operator(==) operator(-)integer(1)operator(,)
    key(MobileSafari)operator(:) operator(!!)ident(navigator)operator(.)ident(userAgent)operator(.)ident(match)operator(()regexp<delimiter(/)content(Apple.*Mobile.*Safari)delimiter(/)>operator(\))
  operator(})operator(,)

  key(BrowserFeatures)operator(:) operator({)
    key(XPath)operator(:) operator(!!)ident(document)operator(.)ident(evaluate)operator(,)
    key(ElementExtensions)operator(:) operator(!!)ident(window)operator(.)ident(HTMLElement)operator(,)
    key(SpecificElementExtensions)operator(:)
      ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(.)ident(__proto__) operator(&&)
      ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(.)ident(__proto__) operator(!==)
        ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(form)delimiter(')>operator(\))operator(.)ident(__proto__)
  operator(})operator(,)

  key(ScriptFragment)operator(:) string<delimiter(')content(<script[^>]*>([)char(\\\\)content(S)char(\\\\)content(s]*?\)<)content(\\/)content(script>)delimiter(')>operator(,)
  key(JSONFilter)operator(:) regexp<delimiter(/)content(^)content(\\/)content(\\*)content(-secure-([)char(\\s)char(\\S)content(]*\))content(\\*)content(\\/)char(\\s)content(*$)delimiter(/)>operator(,)

  key(emptyFunction)operator(:) keyword(function)operator(()operator(\)) operator({) operator(})operator(,)
  key(K)operator(:) keyword(function)operator(()ident(x)operator(\)) operator({) keyword(return) ident(x) operator(})
operator(})operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(MobileSafari)operator(\))
  ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(SpecificElementExtensions) operator(=) keyword(false)operator(;)


comment(/* Based on Alex Arnell's inheritance implementation. */)
keyword(var) ident(Class) operator(=) operator({)
  key(create)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(parent) operator(=) keyword(null)operator(,) ident(properties) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(properties)operator([)integer(0)operator(]\)\))
      ident(parent) operator(=) ident(properties)operator(.)ident(shift)operator(()operator(\))operator(;)

    keyword(function) ident(klass)operator(()operator(\)) operator({)
      local_variable(this)operator(.)ident(initialize)operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\))operator(;)
    operator(})

    ident(Object)operator(.)ident(extend)operator(()ident(klass)operator(,) ident(Class)operator(.)ident(Methods)operator(\))operator(;)
    ident(klass)operator(.)ident(superclass) operator(=) ident(parent)operator(;)
    ident(klass)operator(.)ident(subclasses) operator(=) operator([)operator(])operator(;)

    keyword(if) operator(()ident(parent)operator(\)) operator({)
      keyword(var) ident(subclass) operator(=) keyword(function)operator(()operator(\)) operator({) operator(})operator(;)
      ident(subclass)operator(.)ident(prototype) operator(=) ident(parent)operator(.)ident(prototype)operator(;)
      ident(klass)operator(.)ident(prototype) operator(=) keyword(new) ident(subclass)operator(;)
      ident(parent)operator(.)ident(subclasses)operator(.)ident(push)operator(()ident(klass)operator(\))operator(;)
    operator(})

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) ident(properties)operator(.)ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(klass)operator(.)ident(addMethods)operator(()ident(properties)operator([)ident(i)operator(]\))operator(;)

    keyword(if) operator((!)ident(klass)operator(.)ident(prototype)operator(.)ident(initialize)operator(\))
      ident(klass)operator(.)ident(prototype)operator(.)ident(initialize) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)

    ident(klass)operator(.)ident(prototype)operator(.)ident(constructor) operator(=) ident(klass)operator(;)

    keyword(return) ident(klass)operator(;)
  operator(})
operator(})operator(;)

ident(Class)operator(.)ident(Methods) operator(=) operator({)
  key(addMethods)operator(:) keyword(function)operator(()ident(source)operator(\)) operator({)
    keyword(var) ident(ancestor)   operator(=) local_variable(this)operator(.)ident(superclass) operator(&&) local_variable(this)operator(.)ident(superclass)operator(.)ident(prototype)operator(;)
    keyword(var) ident(properties) operator(=) ident(Object)operator(.)ident(keys)operator(()ident(source)operator(\))operator(;)

    keyword(if) operator((!)ident(Object)operator(.)ident(keys)operator(({) key(toString)operator(:) keyword(true) operator(}\))operator(.)ident(length)operator(\))
      ident(properties)operator(.)ident(push)operator(()string<delimiter(")content(toString)delimiter(")>operator(,) string<delimiter(")content(valueOf)delimiter(")>operator(\))operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(properties)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(property) operator(=) ident(properties)operator([)ident(i)operator(])operator(,) ident(value) operator(=) ident(source)operator([)ident(property)operator(])operator(;)
      keyword(if) operator(()ident(ancestor) operator(&&) ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)) operator(&&)
          ident(value)operator(.)ident(argumentNames)operator(()operator(\))operator(.)ident(first)operator(()operator(\)) operator(==) string<delimiter(")content($super)delimiter(")>operator(\)) operator({)
        keyword(var) ident(method) operator(=) ident(value)operator(,) ident(value) operator(=) ident(Object)operator(.)ident(extend)operator((()keyword(function)operator(()ident(m)operator(\)) operator({)
          keyword(return) keyword(function)operator(()operator(\)) operator({) keyword(return) ident(ancestor)operator([)ident(m)operator(])operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\)) operator(})operator(;)
        operator(}\))operator(()ident(property)operator(\))operator(.)ident(wrap)operator(()ident(method)operator(\))operator(,) operator({)
          key(valueOf)operator(:)  keyword(function)operator(()operator(\)) operator({) keyword(return) ident(method) operator(})operator(,)
          key(toString)operator(:) keyword(function)operator(()operator(\)) operator({) keyword(return) ident(method)operator(.)ident(toString)operator(()operator(\)) operator(})
        operator(}\))operator(;)
      operator(})
      local_variable(this)operator(.)ident(prototype)operator([)ident(property)operator(]) operator(=) ident(value)operator(;)
    operator(})

    keyword(return) local_variable(this)operator(;)
  operator(})
operator(})operator(;)

keyword(var) ident(Abstract) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)ident(extend) operator(=) keyword(function)operator(()ident(destination)operator(,) ident(source)operator(\)) operator({)
  keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(source)operator(\))
    ident(destination)operator([)ident(property)operator(]) operator(=) ident(source)operator([)ident(property)operator(])operator(;)
  keyword(return) ident(destination)operator(;)
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Object)operator(,) operator({)
  key(inspect)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(try) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(object)operator(\)\)) keyword(return) string<delimiter(')content(undefined)delimiter(')>operator(;)
      keyword(if) operator(()ident(object) operator(===) keyword(null)operator(\)) keyword(return) string<delimiter(')content(null)delimiter(')>operator(;)
      keyword(return) ident(object)operator(.)ident(inspect) operator(?) ident(object)operator(.)ident(inspect)operator(()operator(\)) operator(:) ident(object)operator(.)ident(toString)operator(()operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      keyword(if) operator(()ident(e) keyword(instanceof) ident(RangeError)operator(\)) keyword(return) string<delimiter(')content(...)delimiter(')>operator(;)
      keyword(throw) ident(e)operator(;)
    operator(})
  operator(})operator(,)

  key(toJSON)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(type) operator(=) keyword(typeof) ident(object)operator(;)
    keyword(switch) operator(()ident(type)operator(\)) operator({)
      keyword(case) string<delimiter(')content(undefined)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(function)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(unknown)delimiter(')>operator(:) keyword(return)operator(;)
      keyword(case) string<delimiter(')content(boolean)delimiter(')>operator(:) keyword(return) ident(object)operator(.)ident(toString)operator(()operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(object) operator(===) keyword(null)operator(\)) keyword(return) string<delimiter(')content(null)delimiter(')>operator(;)
    keyword(if) operator(()ident(object)operator(.)ident(toJSON)operator(\)) keyword(return) ident(object)operator(.)ident(toJSON)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(object)operator(\)\)) keyword(return)operator(;)

    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(Object)operator(.)ident(toJSON)operator(()ident(object)operator([)ident(property)operator(]\))operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(property)operator(.)ident(toJSON)operator(()operator(\)) operator(+) string<delimiter(')content(: )delimiter(')> operator(+) ident(value)operator(\))operator(;)
    operator(})

    keyword(return) string<delimiter(')content({)delimiter(')> operator(+) ident(results)operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(})delimiter(')>operator(;)
  operator(})operator(,)

  key(toQueryString)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) predefined($H)operator(()ident(object)operator(\))operator(.)ident(toQueryString)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(toHTML)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) operator(&&) ident(object)operator(.)ident(toHTML) operator(?) ident(object)operator(.)ident(toHTML)operator(()operator(\)) operator(:) ident(String)operator(.)ident(interpret)operator(()ident(object)operator(\))operator(;)
  operator(})operator(,)

  key(keys)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(keys) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\))
      ident(keys)operator(.)ident(push)operator(()ident(property)operator(\))operator(;)
    keyword(return) ident(keys)operator(;)
  operator(})operator(,)

  key(values)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(values) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\))
      ident(values)operator(.)ident(push)operator(()ident(object)operator([)ident(property)operator(]\))operator(;)
    keyword(return) ident(values)operator(;)
  operator(})operator(,)

  key(clone)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(Object)operator(.)ident(extend)operator(({) operator(})operator(,) ident(object)operator(\))operator(;)
  operator(})operator(,)

  key(isElement)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) operator(&&) ident(object)operator(.)ident(nodeType) operator(==) integer(1)operator(;)
  operator(})operator(,)

  key(isArray)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) operator(&&) ident(object)operator(.)ident(constructor) operator(===) ident(Array)operator(;)
  operator(})operator(,)

  key(isHash)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) keyword(instanceof) ident(Hash)operator(;)
  operator(})operator(,)

  key(isFunction)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(function)delimiter(")>operator(;)
  operator(})operator(,)

  key(isString)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(string)delimiter(")>operator(;)
  operator(})operator(,)

  key(isNumber)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(number)delimiter(")>operator(;)
  operator(})operator(,)

  key(isUndefined)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(undefined)delimiter(")>operator(;)
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Function)operator(.)ident(prototype)operator(,) operator({)
  key(argumentNames)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(names) operator(=) local_variable(this)operator(.)ident(toString)operator(()operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(^[)char(\\s)content(\\()content(]*function[^(]*)content(\\()content((.*?\))content(\\\))delimiter(/)>operator(\))operator([)integer(1)operator(])operator(.)ident(split)operator(()string<delimiter(")content(,)delimiter(")>operator(\))operator(.)ident(invoke)operator(()string<delimiter(")content(strip)delimiter(")>operator(\))operator(;)
    keyword(return) ident(names)operator(.)ident(length) operator(==) integer(1) operator(&&) operator(!)ident(names)operator([)integer(0)operator(]) operator(?) operator([)operator(]) operator(:) ident(names)operator(;)
  operator(})operator(,)

  key(bind)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(<) integer(2) operator(&&) ident(Object)operator(.)ident(isUndefined)operator(()local_variable(arguments)operator([)integer(0)operator(]\)\)) keyword(return) local_variable(this)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(object) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\))operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(object)operator(,) ident(args)operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  key(bindAsEventListener)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(object) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\))operator(;)
    keyword(return) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(object)operator(,) operator([)ident(event) operator(||) ident(window)operator(.)ident(event)operator(])operator(.)ident(concat)operator(()ident(args)operator(\)\))operator(;)
    operator(})
  operator(})operator(,)

  key(curry)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(arguments)operator(.)ident(length)operator(\)) keyword(return) local_variable(this)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()local_variable(this)operator(,) ident(args)operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  key(delay)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(timeout) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\)) operator(*) integer(1000)operator(;)
    keyword(return) ident(window)operator(.)ident(setTimeout)operator(()keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(__method)operator(,) ident(args)operator(\))operator(;)
    operator(})operator(,) ident(timeout)operator(\))operator(;)
  operator(})operator(,)

  key(wrap)operator(:) keyword(function)operator(()ident(wrapper)operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(wrapper)operator(.)ident(apply)operator(()local_variable(this)operator(,) operator([)ident(__method)operator(.)ident(bind)operator(()local_variable(this)operator(\)])operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  key(methodize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(_methodized)operator(\)) keyword(return) local_variable(this)operator(.)ident(_methodized)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(;)
    keyword(return) local_variable(this)operator(.)ident(_methodized) operator(=) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()keyword(null)operator(,) operator([)local_variable(this)operator(])operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})operator(;)
  operator(})
operator(}\))operator(;)

ident(Function)operator(.)ident(prototype)operator(.)ident(defer) operator(=) ident(Function)operator(.)ident(prototype)operator(.)ident(delay)operator(.)ident(curry)operator(()float(0.01)operator(\))operator(;)

ident(Date)operator(.)ident(prototype)operator(.)ident(toJSON) operator(=) keyword(function)operator(()operator(\)) operator({)
  keyword(return) string<delimiter(')content(")delimiter(')> operator(+) local_variable(this)operator(.)ident(getUTCFullYear)operator(()operator(\)) operator(+) string<delimiter(')content(-)delimiter(')> operator(+)
    operator(()local_variable(this)operator(.)ident(getUTCMonth)operator(()operator(\)) operator(+) integer(1)operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(-)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCDate)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(T)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCHours)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(:)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCMinutes)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(:)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCSeconds)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(Z")delimiter(')>operator(;)
operator(})operator(;)

keyword(var) ident(Try) operator(=) operator({)
  key(these)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(returnValue)operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(lambda) operator(=) local_variable(arguments)operator([)ident(i)operator(])operator(;)
      keyword(try) operator({)
        ident(returnValue) operator(=) ident(lambda)operator(()operator(\))operator(;)
        keyword(break)operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    operator(})

    keyword(return) ident(returnValue)operator(;)
  operator(})
operator(})operator(;)

ident(RegExp)operator(.)ident(prototype)operator(.)ident(match) operator(=) ident(RegExp)operator(.)ident(prototype)operator(.)ident(test)operator(;)

ident(RegExp)operator(.)ident(escape) operator(=) keyword(function)operator(()ident(str)operator(\)) operator({)
  keyword(return) ident(String)operator(()ident(str)operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(([.*+?^=!:${}(\)|[)content(\\])content(\\/)char(\\\\)content(]\))delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content($1)delimiter(')>operator(\))operator(;)
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(PeriodicalExecuter) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(callback)operator(,) ident(frequency)operator(\)) operator({)
    local_variable(this)operator(.)ident(callback) operator(=) ident(callback)operator(;)
    local_variable(this)operator(.)ident(frequency) operator(=) ident(frequency)operator(;)
    local_variable(this)operator(.)ident(currentlyExecuting) operator(=) keyword(false)operator(;)

    local_variable(this)operator(.)ident(registerCallback)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(registerCallback)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(timer) operator(=) ident(setInterval)operator(()local_variable(this)operator(.)ident(onTimerEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) local_variable(this)operator(.)ident(frequency) operator(*) integer(1000)operator(\))operator(;)
  operator(})operator(,)

  key(execute)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(stop)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(timer)operator(\)) keyword(return)operator(;)
    ident(clearInterval)operator(()local_variable(this)operator(.)ident(timer)operator(\))operator(;)
    local_variable(this)operator(.)ident(timer) operator(=) keyword(null)operator(;)
  operator(})operator(,)

  key(onTimerEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(currentlyExecuting)operator(\)) operator({)
      keyword(try) operator({)
        local_variable(this)operator(.)ident(currentlyExecuting) operator(=) keyword(true)operator(;)
        local_variable(this)operator(.)ident(execute)operator(()operator(\))operator(;)
      operator(}) keyword(finally) operator({)
        local_variable(this)operator(.)ident(currentlyExecuting) operator(=) keyword(false)operator(;)
      operator(})
    operator(})
  operator(})
operator(}\))operator(;)
ident(Object)operator(.)ident(extend)operator(()ident(String)operator(,) operator({)
  key(interpret)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
    keyword(return) ident(value) operator(==) keyword(null) operator(?) string<delimiter(')delimiter(')> operator(:) ident(String)operator(()ident(value)operator(\))operator(;)
  operator(})operator(,)
  key(specialChar)operator(:) operator({)
    key<delimiter(')content(\\b)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(b)delimiter(')>operator(,)
    key<delimiter(')content(\\t)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(t)delimiter(')>operator(,)
    key<delimiter(')content(\\n)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(n)delimiter(')>operator(,)
    key<delimiter(')content(\\f)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(f)delimiter(')>operator(,)
    key<delimiter(')content(\\r)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(r)delimiter(')>operator(,)
    key<delimiter(')char(\\\\)delimiter(')>operator(:) string<delimiter(')char(\\\\)char(\\\\)delimiter(')>
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(,) operator({)
  key(gsub)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(replacement)operator(\)) operator({)
    keyword(var) ident(result) operator(=) string<delimiter(')delimiter(')>operator(,) ident(source) operator(=) local_variable(this)operator(,) ident(match)operator(;)
    ident(replacement) operator(=) local_variable(arguments)operator(.)ident(callee)operator(.)ident(prepareReplacement)operator(()ident(replacement)operator(\))operator(;)

    keyword(while) operator(()ident(source)operator(.)ident(length) operator(>) integer(0)operator(\)) operator({)
      keyword(if) operator(()ident(match) operator(=) ident(source)operator(.)ident(match)operator(()ident(pattern)operator(\)\)) operator({)
        ident(result) operator(+=) ident(source)operator(.)ident(slice)operator(()integer(0)operator(,) ident(match)operator(.)ident(index)operator(\))operator(;)
        ident(result) operator(+=) ident(String)operator(.)ident(interpret)operator(()ident(replacement)operator(()ident(match)operator(\)\))operator(;)
        ident(source)  operator(=) ident(source)operator(.)ident(slice)operator(()ident(match)operator(.)ident(index) operator(+) ident(match)operator([)integer(0)operator(])operator(.)ident(length)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(result) operator(+=) ident(source)operator(,) ident(source) operator(=) string<delimiter(')delimiter(')>operator(;)
      operator(})
    operator(})
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(sub)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(replacement)operator(,) ident(count)operator(\)) operator({)
    ident(replacement) operator(=) local_variable(this)operator(.)ident(gsub)operator(.)ident(prepareReplacement)operator(()ident(replacement)operator(\))operator(;)
    ident(count) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(count)operator(\)) operator(?) integer(1) operator(:) ident(count)operator(;)

    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()ident(pattern)operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(if) operator((--)ident(count) operator(<) integer(0)operator(\)) keyword(return) ident(match)operator([)integer(0)operator(])operator(;)
      keyword(return) ident(replacement)operator(()ident(match)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(scan)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(gsub)operator(()ident(pattern)operator(,) ident(iterator)operator(\))operator(;)
    keyword(return) ident(String)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(truncate)operator(:) keyword(function)operator(()ident(length)operator(,) ident(truncation)operator(\)) operator({)
    ident(length) operator(=) ident(length) operator(||) integer(30)operator(;)
    ident(truncation) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(truncation)operator(\)) operator(?) string<delimiter(')content(...)delimiter(')> operator(:) ident(truncation)operator(;)
    keyword(return) local_variable(this)operator(.)ident(length) operator(>) ident(length) operator(?)
      local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) ident(length) operator(-) ident(truncation)operator(.)ident(length)operator(\)) operator(+) ident(truncation) operator(:) ident(String)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(strip)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(^)char(\\s)content(+)delimiter(/)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)char(\\s)content(+$)delimiter(/)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(stripTags)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(<)content(\\/)content(?[^>]+>)delimiter(/)modifier(gi)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(stripScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(img)delimiter(')>operator(\))operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(extractScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(matchAll) operator(=) keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(img)delimiter(')>operator(\))operator(;)
    keyword(var) ident(matchOne) operator(=) keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(im)delimiter(')>operator(\))operator(;)
    keyword(return) operator(()local_variable(this)operator(.)ident(match)operator(()ident(matchAll)operator(\)) operator(||) operator([)operator(]\))operator(.)ident(map)operator(()keyword(function)operator(()ident(scriptTag)operator(\)) operator({)
      keyword(return) operator(()ident(scriptTag)operator(.)ident(match)operator(()ident(matchOne)operator(\)) operator(||) operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(]\))operator([)integer(1)operator(])operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(evalScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(extractScripts)operator(()operator(\))operator(.)ident(map)operator(()keyword(function)operator(()ident(script)operator(\)) operator({) keyword(return) ident(eval)operator(()ident(script)operator(\)) operator(}\))operator(;)
  operator(})operator(,)

  key(escapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(self) operator(=) local_variable(arguments)operator(.)ident(callee)operator(;)
    ident(self)operator(.)ident(text)operator(.)ident(data) operator(=) local_variable(this)operator(;)
    keyword(return) ident(self)operator(.)ident(div)operator(.)ident(innerHTML)operator(;)
  operator(})operator(,)

  key(unescapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(div) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(;)
    ident(div)operator(.)ident(innerHTML) operator(=) local_variable(this)operator(.)ident(stripTags)operator(()operator(\))operator(;)
    keyword(return) ident(div)operator(.)ident(childNodes)operator([)integer(0)operator(]) operator(?) operator(()ident(div)operator(.)ident(childNodes)operator(.)ident(length) operator(>) integer(1) operator(?)
      predefined($A)operator(()ident(div)operator(.)ident(childNodes)operator(\))operator(.)ident(inject)operator(()string<delimiter(')delimiter(')>operator(,) keyword(function)operator(()ident(memo)operator(,) ident(node)operator(\)) operator({) keyword(return) ident(memo)operator(+)ident(node)operator(.)ident(nodeValue) operator(}\)) operator(:)
      ident(div)operator(.)ident(childNodes)operator([)integer(0)operator(])operator(.)ident(nodeValue)operator(\)) operator(:) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  key(toQueryParams)operator(:) keyword(function)operator(()ident(separator)operator(\)) operator({)
    keyword(var) ident(match) operator(=) local_variable(this)operator(.)ident(strip)operator(()operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(([^?#]*\)(#.*\)?$)delimiter(/)>operator(\))operator(;)
    keyword(if) operator((!)ident(match)operator(\)) keyword(return) operator({) operator(})operator(;)

    keyword(return) ident(match)operator([)integer(1)operator(])operator(.)ident(split)operator(()ident(separator) operator(||) string<delimiter(')content(&)delimiter(')>operator(\))operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(hash)operator(,) ident(pair)operator(\)) operator({)
      keyword(if) operator((()ident(pair) operator(=) ident(pair)operator(.)ident(split)operator(()string<delimiter(')content(=)delimiter(')>operator(\)\))operator([)integer(0)operator(]\)) operator({)
        keyword(var) ident(key) operator(=) ident(decodeURIComponent)operator(()ident(pair)operator(.)ident(shift)operator(()operator(\)\))operator(;)
        keyword(var) ident(value) operator(=) ident(pair)operator(.)ident(length) operator(>) integer(1) operator(?) ident(pair)operator(.)ident(join)operator(()string<delimiter(')content(=)delimiter(')>operator(\)) operator(:) ident(pair)operator([)integer(0)operator(])operator(;)
        keyword(if) operator(()ident(value) operator(!=) ident(undefined)operator(\)) ident(value) operator(=) ident(decodeURIComponent)operator(()ident(value)operator(\))operator(;)

        keyword(if) operator(()ident(key) keyword(in) ident(hash)operator(\)) operator({)
          keyword(if) operator((!)ident(Object)operator(.)ident(isArray)operator(()ident(hash)operator([)ident(key)operator(]\)\)) ident(hash)operator([)ident(key)operator(]) operator(=) operator([)ident(hash)operator([)ident(key)operator(]])operator(;)
          ident(hash)operator([)ident(key)operator(])operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
        operator(})
        keyword(else) ident(hash)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
      operator(})
      keyword(return) ident(hash)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(toArray)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(split)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(succ)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+)
      ident(String)operator(.)ident(fromCharCode)operator(()local_variable(this)operator(.)ident(charCodeAt)operator(()local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+) integer(1)operator(\))operator(;)
  operator(})operator(,)

  key(times)operator(:) keyword(function)operator(()ident(count)operator(\)) operator({)
    keyword(return) ident(count) operator(<) integer(1) operator(?) string<delimiter(')delimiter(')> operator(:) keyword(new) ident(Array)operator(()ident(count) operator(+) integer(1)operator(\))operator(.)ident(join)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(camelize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(parts) operator(=) local_variable(this)operator(.)ident(split)operator(()string<delimiter(')content(-)delimiter(')>operator(\))operator(,) ident(len) operator(=) ident(parts)operator(.)ident(length)operator(;)
    keyword(if) operator(()ident(len) operator(==) integer(1)operator(\)) keyword(return) ident(parts)operator([)integer(0)operator(])operator(;)

    keyword(var) ident(camelized) operator(=) local_variable(this)operator(.)ident(charAt)operator(()integer(0)operator(\)) operator(==) string<delimiter(')content(-)delimiter(')>
      operator(?) ident(parts)operator([)integer(0)operator(])operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(parts)operator([)integer(0)operator(])operator(.)ident(substring)operator(()integer(1)operator(\))
      operator(:) ident(parts)operator([)integer(0)operator(])operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(1)operator(;) ident(i) operator(<) ident(len)operator(;) ident(i)operator(++)operator(\))
      ident(camelized) operator(+=) ident(parts)operator([)ident(i)operator(])operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(parts)operator([)ident(i)operator(])operator(.)ident(substring)operator(()integer(1)operator(\))operator(;)

    keyword(return) ident(camelized)operator(;)
  operator(})operator(,)

  key(capitalize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) local_variable(this)operator(.)ident(substring)operator(()integer(1)operator(\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(underscore)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content(::)delimiter(/)>operator(,) string<delimiter(')content(/)delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(([A-Z]+\)([A-Z][a-z]\))delimiter(/)>operator(,)string<delimiter(')content(#{1}_#{2})delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(([a-z)char(\\d)content(]\)([A-Z]\))delimiter(/)>operator(,)string<delimiter(')content(#{1}_#{2})delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(-)delimiter(/)>operator(,)string<delimiter(')content(_)delimiter(')>operator(\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(dasherize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content(_)delimiter(/)>operator(,)string<delimiter(')content(-)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(inspect)operator(:) keyword(function)operator(()ident(useDoubleQuotes)operator(\)) operator({)
    keyword(var) ident(escapedString) operator(=) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content([)char(\\x00)content(-)char(\\x1f)char(\\\\)content(])delimiter(/)>operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(var) ident(character) operator(=) ident(String)operator(.)ident(specialChar)operator([)ident(match)operator([)integer(0)operator(]])operator(;)
      keyword(return) ident(character) operator(?) ident(character) operator(:) string<delimiter(')char(\\\\)content(u00)delimiter(')> operator(+) ident(match)operator([)integer(0)operator(])operator(.)ident(charCodeAt)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(,) integer(16)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(if) operator(()ident(useDoubleQuotes)operator(\)) keyword(return) string<delimiter(')content(")delimiter(')> operator(+) ident(escapedString)operator(.)ident(replace)operator(()regexp<delimiter(/)content(")delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content(")delimiter(')>operator(\)) operator(+) string<delimiter(')content(")delimiter(')>operator(;)
    keyword(return) string<delimiter(")content(')delimiter(")> operator(+) ident(escapedString)operator(.)ident(replace)operator(()regexp<delimiter(/)content(')delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)char(\\')delimiter(')>operator(\)) operator(+) string<delimiter(")content(')delimiter(")>operator(;)
  operator(})operator(,)

  key(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inspect)operator(()keyword(true)operator(\))operator(;)
  operator(})operator(,)

  key(unfilterJSON)operator(:) keyword(function)operator(()ident(filter)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(sub)operator(()ident(filter) operator(||) ident(Prototype)operator(.)ident(JSONFilter)operator(,) string<delimiter(')content(#{1})delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(isJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(str) operator(=) local_variable(this)operator(;)
    keyword(if) operator(()ident(str)operator(.)ident(blank)operator(()operator(\)\)) keyword(return) keyword(false)operator(;)
    ident(str) operator(=) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)char(\\\\)content(.)delimiter(/)modifier(g)>operator(,) string<delimiter(')content(@)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content("[^")char(\\\\)char(\\n)char(\\r)content(]*")delimiter(/)modifier(g)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(return) operator(()regexp<delimiter(/)content(^[,:{})content(\\[)content(\\])content(0-9.)content(\\-)content(+Eaeflnr-u )char(\\n)char(\\r)char(\\t)content(]*$)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(str)operator(\))operator(;)
  operator(})operator(,)

  key(evalJSON)operator(:) keyword(function)operator(()ident(sanitize)operator(\)) operator({)
    keyword(var) ident(json) operator(=) local_variable(this)operator(.)ident(unfilterJSON)operator(()operator(\))operator(;)
    keyword(try) operator({)
      keyword(if) operator((!)ident(sanitize) operator(||) ident(json)operator(.)ident(isJSON)operator(()operator(\)\)) keyword(return) ident(eval)operator(()string<delimiter(')content(()delimiter(')> operator(+) ident(json) operator(+) string<delimiter(')content(\))delimiter(')>operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    keyword(throw) keyword(new) ident(SyntaxError)operator(()string<delimiter(')content(Badly formed JSON string: )delimiter(')> operator(+) local_variable(this)operator(.)ident(inspect)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  key(include)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(indexOf)operator(()ident(pattern)operator(\)) operator(>) operator(-)integer(1)operator(;)
  operator(})operator(,)

  key(startsWith)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(indexOf)operator(()ident(pattern)operator(\)) operator(===) integer(0)operator(;)
  operator(})operator(,)

  key(endsWith)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(var) ident(d) operator(=) local_variable(this)operator(.)ident(length) operator(-) ident(pattern)operator(.)ident(length)operator(;)
    keyword(return) ident(d) operator(>=) integer(0) operator(&&) local_variable(this)operator(.)ident(lastIndexOf)operator(()ident(pattern)operator(\)) operator(===) ident(d)operator(;)
  operator(})operator(,)

  key(empty)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this) operator(==) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  key(blank)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) regexp<delimiter(/)content(^)char(\\s)content(*$)delimiter(/)>operator(.)ident(test)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(interpolate)operator(:) keyword(function)operator(()ident(object)operator(,) ident(pattern)operator(\)) operator({)
    keyword(return) keyword(new) ident(Template)operator(()local_variable(this)operator(,) ident(pattern)operator(\))operator(.)ident(evaluate)operator(()ident(object)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit) operator(||) ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(,) operator({)
  key(escapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(&)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&amp;)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(<)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&lt;)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(>)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&gt;)delimiter(')>operator(\))operator(;)
  operator(})operator(,)
  key(unescapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(&amp;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(&lt;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(<)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(&gt;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(>)delimiter(')>operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(String)operator(.)ident(prototype)operator(.)ident(gsub)operator(.)ident(prepareReplacement) operator(=) keyword(function)operator(()ident(replacement)operator(\)) operator({)
  keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(replacement)operator(\)\)) keyword(return) ident(replacement)operator(;)
  keyword(var) ident(template) operator(=) keyword(new) ident(Template)operator(()ident(replacement)operator(\))operator(;)
  keyword(return) keyword(function)operator(()ident(match)operator(\)) operator({) keyword(return) ident(template)operator(.)ident(evaluate)operator(()ident(match)operator(\)) operator(})operator(;)
operator(})operator(;)

ident(String)operator(.)ident(prototype)operator(.)ident(parseQuery) operator(=) ident(String)operator(.)ident(prototype)operator(.)ident(toQueryParams)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(.)ident(escapeHTML)operator(,) operator({)
  key(div)operator(:)  ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(,)
  key(text)operator(:) ident(document)operator(.)ident(createTextNode)operator(()string<delimiter(')delimiter(')>operator(\))
operator(}\))operator(;)

keyword(with) operator(()ident(String)operator(.)ident(prototype)operator(.)ident(escapeHTML)operator(\)) ident(div)operator(.)ident(appendChild)operator(()ident(text)operator(\))operator(;)

keyword(var) ident(Template) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(template)operator(,) ident(pattern)operator(\)) operator({)
    local_variable(this)operator(.)ident(template) operator(=) ident(template)operator(.)ident(toString)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(pattern) operator(=) ident(pattern) operator(||) ident(Template)operator(.)ident(Pattern)operator(;)
  operator(})operator(,)

  key(evaluate)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(object)operator(.)ident(toTemplateReplacements)operator(\)\))
      ident(object) operator(=) ident(object)operator(.)ident(toTemplateReplacements)operator(()operator(\))operator(;)

    keyword(return) local_variable(this)operator(.)ident(template)operator(.)ident(gsub)operator(()local_variable(this)operator(.)ident(pattern)operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(if) operator(()ident(object) operator(==) keyword(null)operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)

      keyword(var) ident(before) operator(=) ident(match)operator([)integer(1)operator(]) operator(||) string<delimiter(')delimiter(')>operator(;)
      keyword(if) operator(()ident(before) operator(==) string<delimiter(')char(\\\\)delimiter(')>operator(\)) keyword(return) ident(match)operator([)integer(2)operator(])operator(;)

      keyword(var) ident(ctx) operator(=) ident(object)operator(,) ident(expr) operator(=) ident(match)operator([)integer(3)operator(])operator(;)
      keyword(var) ident(pattern) operator(=) regexp<delimiter(/)content(^([^.[]+|)content(\\[)content(((?:.*?[^)char(\\\\)content(]\)?\))content(\\])content(\)()content(\\.)content(|)content(\\[)content(|$\))delimiter(/)>operator(;)
      ident(match) operator(=) ident(pattern)operator(.)ident(exec)operator(()ident(expr)operator(\))operator(;)
      keyword(if) operator(()ident(match) operator(==) keyword(null)operator(\)) keyword(return) ident(before)operator(;)

      keyword(while) operator(()ident(match) operator(!=) keyword(null)operator(\)) operator({)
        keyword(var) ident(comp) operator(=) ident(match)operator([)integer(1)operator(])operator(.)ident(startsWith)operator(()string<delimiter(')content([)delimiter(')>operator(\)) operator(?) ident(match)operator([)integer(2)operator(])operator(.)ident(gsub)operator(()string<delimiter(')char(\\\\)char(\\\\)content(])delimiter(')>operator(,) string<delimiter(')content(])delimiter(')>operator(\)) operator(:) ident(match)operator([)integer(1)operator(])operator(;)
        ident(ctx) operator(=) ident(ctx)operator([)ident(comp)operator(])operator(;)
        keyword(if) operator(()keyword(null) operator(==) ident(ctx) operator(||) string<delimiter(')delimiter(')> operator(==) ident(match)operator([)integer(3)operator(]\)) keyword(break)operator(;)
        ident(expr) operator(=) ident(expr)operator(.)ident(substring)operator(()string<delimiter(')content([)delimiter(')> operator(==) ident(match)operator([)integer(3)operator(]) operator(?) ident(match)operator([)integer(1)operator(])operator(.)ident(length) operator(:) ident(match)operator([)integer(0)operator(])operator(.)ident(length)operator(\))operator(;)
        ident(match) operator(=) ident(pattern)operator(.)ident(exec)operator(()ident(expr)operator(\))operator(;)
      operator(})

      keyword(return) ident(before) operator(+) ident(String)operator(.)ident(interpret)operator(()ident(ctx)operator(\))operator(;)
    operator(})operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
  operator(})
operator(}\))operator(;)
ident(Template)operator(.)ident(Pattern) operator(=) regexp<delimiter(/)content((^|.|)char(\\r)content(|)char(\\n)content(\)(#)content(\\{)content((.*?\))content(\\})content(\))delimiter(/)>operator(;)

keyword(var) predefined($break) operator(=) operator({) operator(})operator(;)

keyword(var) ident(Enumerable) operator(=) operator({)
  key(each)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(index) operator(=) integer(0)operator(;)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    keyword(try) operator({)
      local_variable(this)operator(.)ident(_each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
        ident(iterator)operator(()ident(value)operator(,) ident(index)operator(++)operator(\))operator(;)
      operator(}\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      keyword(if) operator(()ident(e) operator(!=) predefined($break)operator(\)) keyword(throw) ident(e)operator(;)
    operator(})
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  key(eachSlice)operator(:) keyword(function)operator(()ident(number)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(index) operator(=) operator(-)ident(number)operator(,) ident(slices) operator(=) operator([)operator(])operator(,) ident(array) operator(=) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(;)
    keyword(while) operator((()ident(index) operator(+=) ident(number)operator(\)) operator(<) ident(array)operator(.)ident(length)operator(\))
      ident(slices)operator(.)ident(push)operator(()ident(array)operator(.)ident(slice)operator(()ident(index)operator(,) ident(index)operator(+)ident(number)operator(\)\))operator(;)
    keyword(return) ident(slices)operator(.)ident(collect)operator(()ident(iterator)operator(,) ident(context)operator(\))operator(;)
  operator(})operator(,)

  key(all)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result) operator(=) keyword(true)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(result) operator(=) ident(result) operator(&&) operator(!!)ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator((!)ident(result)operator(\)) keyword(throw) predefined($break)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(any)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(result) operator(=) operator(!!)ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\))
        keyword(throw) predefined($break)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(collect)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(results)operator(.)ident(push)operator(()ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(detect)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\)) operator({)
        ident(result) operator(=) ident(value)operator(;)
        keyword(throw) predefined($break)operator(;)
      operator(})
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(findAll)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(grep)operator(:) keyword(function)operator(()ident(filter)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(filter)operator(\)\))
      ident(filter) operator(=) keyword(new) ident(RegExp)operator(()ident(filter)operator(\))operator(;)

    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(filter)operator(.)ident(match)operator(()ident(value)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(include)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()local_variable(this)operator(.)ident(indexOf)operator(\)\))
      keyword(if) operator(()local_variable(this)operator(.)ident(indexOf)operator(()ident(object)operator(\)) operator(!=) operator(-)integer(1)operator(\)) keyword(return) keyword(true)operator(;)

    keyword(var) ident(found) operator(=) keyword(false)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(if) operator(()ident(value) operator(==) ident(object)operator(\)) operator({)
        ident(found) operator(=) keyword(true)operator(;)
        keyword(throw) predefined($break)operator(;)
      operator(})
    operator(}\))operator(;)
    keyword(return) ident(found)operator(;)
  operator(})operator(,)

  key(inGroupsOf)operator(:) keyword(function)operator(()ident(number)operator(,) ident(fillWith)operator(\)) operator({)
    ident(fillWith) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(fillWith)operator(\)) operator(?) keyword(null) operator(:) ident(fillWith)operator(;)
    keyword(return) local_variable(this)operator(.)ident(eachSlice)operator(()ident(number)operator(,) keyword(function)operator(()ident(slice)operator(\)) operator({)
      keyword(while)operator(()ident(slice)operator(.)ident(length) operator(<) ident(number)operator(\)) ident(slice)operator(.)ident(push)operator(()ident(fillWith)operator(\))operator(;)
      keyword(return) ident(slice)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(inject)operator(:) keyword(function)operator(()ident(memo)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(memo) operator(=) ident(iterator)operator(()ident(memo)operator(,) ident(value)operator(,) ident(index)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(memo)operator(;)
  operator(})operator(,)

  key(invoke)operator(:) keyword(function)operator(()ident(method)operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(.)ident(slice)operator(()integer(1)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) ident(value)operator([)ident(method)operator(])operator(.)ident(apply)operator(()ident(value)operator(,) ident(args)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(max)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(value) operator(=) ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator(()ident(result) operator(==) keyword(null) operator(||) ident(value) operator(>=) ident(result)operator(\))
        ident(result) operator(=) ident(value)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(min)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(value) operator(=) ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator(()ident(result) operator(==) keyword(null) operator(||) ident(value) operator(<) ident(result)operator(\))
        ident(result) operator(=) ident(value)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  key(partition)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(?) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\)) operator(:) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(trues) operator(=) operator([)operator(])operator(,) ident(falses) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      operator(()ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)) operator(?)
        ident(trues) operator(:) ident(falses)operator(\))operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) operator([)ident(trues)operator(,) ident(falses)operator(])operator(;)
  operator(})operator(,)

  key(pluck)operator(:) keyword(function)operator(()ident(property)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      ident(results)operator(.)ident(push)operator(()ident(value)operator([)ident(property)operator(]\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(reject)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator((!)ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(sortBy)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator)operator(.)ident(bind)operator(()ident(context)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(return) operator({)key(value)operator(:) ident(value)operator(,) key(criteria)operator(:) ident(iterator)operator(()ident(value)operator(,) ident(index)operator(\)})operator(;)
    operator(}\))operator(.)ident(sort)operator(()keyword(function)operator(()ident(left)operator(,) ident(right)operator(\)) operator({)
      keyword(var) ident(a) operator(=) ident(left)operator(.)ident(criteria)operator(,) ident(b) operator(=) ident(right)operator(.)ident(criteria)operator(;)
      keyword(return) ident(a) operator(<) ident(b) operator(?) operator(-)integer(1) operator(:) ident(a) operator(>) ident(b) operator(?) integer(1) operator(:) integer(0)operator(;)
    operator(}\))operator(.)ident(pluck)operator(()string<delimiter(')content(value)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(toArray)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(zip)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(iterator) operator(=) ident(Prototype)operator(.)ident(K)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(args)operator(.)ident(last)operator(()operator(\)\)\))
      ident(iterator) operator(=) ident(args)operator(.)ident(pop)operator(()operator(\))operator(;)

    keyword(var) ident(collections) operator(=) operator([)local_variable(this)operator(])operator(.)ident(concat)operator(()ident(args)operator(\))operator(.)ident(map)operator(()predefined($A)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(return) ident(iterator)operator(()ident(collections)operator(.)ident(pluck)operator(()ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(size)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(.)ident(length)operator(;)
  operator(})operator(,)

  key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(')content(#<Enumerable:)delimiter(')> operator(+) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(')content(>)delimiter(')>operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Enumerable)operator(,) operator({)
  key(map)operator(:)     ident(Enumerable)operator(.)ident(collect)operator(,)
  key(find)operator(:)    ident(Enumerable)operator(.)ident(detect)operator(,)
  key(select)operator(:)  ident(Enumerable)operator(.)ident(findAll)operator(,)
  key(filter)operator(:)  ident(Enumerable)operator(.)ident(findAll)operator(,)
  key(member)operator(:)  ident(Enumerable)operator(.)ident(include)operator(,)
  key(entries)operator(:) ident(Enumerable)operator(.)ident(toArray)operator(,)
  key(every)operator(:)   ident(Enumerable)operator(.)ident(all)operator(,)
  key(some)operator(:)    ident(Enumerable)operator(.)ident(any)
operator(}\))operator(;)
keyword(function) predefined($A)operator(()ident(iterable)operator(\)) operator({)
  keyword(if) operator((!)ident(iterable)operator(\)) keyword(return) operator([)operator(])operator(;)
  keyword(if) operator(()ident(iterable)operator(.)ident(toArray)operator(\)) keyword(return) ident(iterable)operator(.)ident(toArray)operator(()operator(\))operator(;)
  keyword(var) ident(length) operator(=) ident(iterable)operator(.)ident(length)operator(,) ident(results) operator(=) keyword(new) ident(Array)operator(()ident(length)operator(\))operator(;)
  keyword(while) operator(()ident(length)operator(--)operator(\)) ident(results)operator([)ident(length)operator(]) operator(=) ident(iterable)operator([)ident(length)operator(])operator(;)
  keyword(return) ident(results)operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
  keyword(function) predefined($A)operator(()ident(iterable)operator(\)) operator({)
    keyword(if) operator((!)ident(iterable)operator(\)) keyword(return) operator([)operator(])operator(;)
    keyword(if) operator((!()ident(Object)operator(.)ident(isFunction)operator(()ident(iterable)operator(\)) operator(&&) ident(iterable) operator(==) string<delimiter(')content([object NodeList])delimiter(')>operator(\)) operator(&&)
        ident(iterable)operator(.)ident(toArray)operator(\)) keyword(return) ident(iterable)operator(.)ident(toArray)operator(()operator(\))operator(;)
    keyword(var) ident(length) operator(=) ident(iterable)operator(.)ident(length)operator(,) ident(results) operator(=) keyword(new) ident(Array)operator(()ident(length)operator(\))operator(;)
    keyword(while) operator(()ident(length)operator(--)operator(\)) ident(results)operator([)ident(length)operator(]) operator(=) ident(iterable)operator([)ident(length)operator(])operator(;)
    keyword(return) ident(results)operator(;)
  operator(})
operator(})

ident(Array)operator(.)ident(from) operator(=) predefined($A)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Array)operator(.)ident(prototype)operator(,) ident(Enumerable)operator(\))operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(_reverse)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)ident(_reverse) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(reverse)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Array)operator(.)ident(prototype)operator(,) operator({)
  key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(iterator)operator(()local_variable(this)operator([)ident(i)operator(]\))operator(;)
  operator(})operator(,)

  key(clear)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(length) operator(=) integer(0)operator(;)
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  key(first)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator([)integer(0)operator(])operator(;)
  operator(})operator(,)

  key(last)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator([)local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(])operator(;)
  operator(})operator(,)

  key(compact)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(select)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) ident(value) operator(!=) keyword(null)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(flatten)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(array)operator(,) ident(value)operator(\)) operator({)
      keyword(return) ident(array)operator(.)ident(concat)operator(()ident(Object)operator(.)ident(isArray)operator(()ident(value)operator(\)) operator(?)
        ident(value)operator(.)ident(flatten)operator(()operator(\)) operator(:) operator([)ident(value)operator(]\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(without)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(values) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(select)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) operator(!)ident(values)operator(.)ident(include)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(reverse)operator(:) keyword(function)operator(()ident(inline)operator(\)) operator({)
    keyword(return) operator(()ident(inline) operator(!==) keyword(false) operator(?) local_variable(this) operator(:) local_variable(this)operator(.)ident(toArray)operator(()operator(\)\))operator(.)ident(_reverse)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(reduce)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(length) operator(>) integer(1) operator(?) local_variable(this) operator(:) local_variable(this)operator([)integer(0)operator(])operator(;)
  operator(})operator(,)

  key(uniq)operator(:) keyword(function)operator(()ident(sorted)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(array)operator(,) ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()integer(0) operator(==) ident(index) operator(||) operator(()ident(sorted) operator(?) ident(array)operator(.)ident(last)operator(()operator(\)) operator(!=) ident(value) operator(:) operator(!)ident(array)operator(.)ident(include)operator(()ident(value)operator(\)\)\))
        ident(array)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
      keyword(return) ident(array)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(intersect)operator(:) keyword(function)operator(()ident(array)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(uniq)operator(()operator(\))operator(.)ident(findAll)operator(()keyword(function)operator(()ident(item)operator(\)) operator({)
      keyword(return) ident(array)operator(.)ident(detect)operator(()keyword(function)operator(()ident(value)operator(\)) operator({) keyword(return) ident(item) operator(===) ident(value) operator(}\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(clone)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) operator([)operator(])operator(.)ident(concat)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(size)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(length)operator(;)
  operator(})operator(,)

  key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(')content([)delimiter(')> operator(+) local_variable(this)operator(.)ident(map)operator(()ident(Object)operator(.)ident(inspect)operator(\))operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
  operator(})operator(,)

  key(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(Object)operator(.)ident(toJSON)operator(()ident(object)operator(\))operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) string<delimiter(')content([)delimiter(')> operator(+) ident(results)operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
  operator(})
operator(}\))operator(;)

comment(// use native browser JS 1.6 implementation if available)
keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(Array)operator(.)ident(prototype)operator(.)ident(forEach)operator(\)\))
  ident(Array)operator(.)ident(prototype)operator(.)ident(_each) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(forEach)operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(indexOf)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)ident(indexOf) operator(=) keyword(function)operator(()ident(item)operator(,) ident(i)operator(\)) operator({)
  ident(i) operator(||) operator(()ident(i) operator(=) integer(0)operator(\))operator(;)
  keyword(var) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;)
  keyword(if) operator(()ident(i) operator(<) integer(0)operator(\)) ident(i) operator(=) ident(length) operator(+) ident(i)operator(;)
  keyword(for) operator((;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
    keyword(if) operator(()local_variable(this)operator([)ident(i)operator(]) operator(===) ident(item)operator(\)) keyword(return) ident(i)operator(;)
  keyword(return) operator(-)integer(1)operator(;)
operator(})operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(lastIndexOf)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)ident(lastIndexOf) operator(=) keyword(function)operator(()ident(item)operator(,) ident(i)operator(\)) operator({)
  ident(i) operator(=) ident(isNaN)operator(()ident(i)operator(\)) operator(?) local_variable(this)operator(.)ident(length) operator(:) operator(()ident(i) operator(<) integer(0) operator(?) local_variable(this)operator(.)ident(length) operator(+) ident(i) operator(:) ident(i)operator(\)) operator(+) integer(1)operator(;)
  keyword(var) ident(n) operator(=) local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) ident(i)operator(\))operator(.)ident(reverse)operator(()operator(\))operator(.)ident(indexOf)operator(()ident(item)operator(\))operator(;)
  keyword(return) operator(()ident(n) operator(<) integer(0)operator(\)) operator(?) ident(n) operator(:) ident(i) operator(-) ident(n) operator(-) integer(1)operator(;)
operator(})operator(;)

ident(Array)operator(.)ident(prototype)operator(.)ident(toArray) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(clone)operator(;)

keyword(function) predefined($w)operator(()ident(string)operator(\)) operator({)
  keyword(if) operator((!)ident(Object)operator(.)ident(isString)operator(()ident(string)operator(\)\)) keyword(return) operator([)operator(])operator(;)
  ident(string) operator(=) ident(string)operator(.)ident(strip)operator(()operator(\))operator(;)
  keyword(return) ident(string) operator(?) ident(string)operator(.)ident(split)operator(()regexp<delimiter(/)char(\\s)content(+)delimiter(/)>operator(\)) operator(:) operator([)operator(])operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\))operator({)
  ident(Array)operator(.)ident(prototype)operator(.)ident(concat) operator(=) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(array) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) ident(array)operator(.)ident(push)operator(()local_variable(this)operator([)ident(i)operator(]\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()local_variable(arguments)operator([)ident(i)operator(]\)\)) operator({)
        keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(,) ident(arrayLength) operator(=) local_variable(arguments)operator([)ident(i)operator(])operator(.)ident(length)operator(;) ident(j) operator(<) ident(arrayLength)operator(;) ident(j)operator(++)operator(\))
          ident(array)operator(.)ident(push)operator(()local_variable(arguments)operator([)ident(i)operator(])operator([)ident(j)operator(]\))operator(;)
      operator(}) keyword(else) operator({)
        ident(array)operator(.)ident(push)operator(()local_variable(arguments)operator([)ident(i)operator(]\))operator(;)
      operator(})
    operator(})
    keyword(return) ident(array)operator(;)
  operator(})operator(;)
operator(})
ident(Object)operator(.)ident(extend)operator(()ident(Number)operator(.)ident(prototype)operator(,) operator({)
  key(toColorPart)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(toPaddedString)operator(()integer(2)operator(,) integer(16)operator(\))operator(;)
  operator(})operator(,)

  key(succ)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this) operator(+) integer(1)operator(;)
  operator(})operator(,)

  key(times)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    predefined($R)operator(()integer(0)operator(,) local_variable(this)operator(,) keyword(true)operator(\))operator(.)ident(each)operator(()ident(iterator)operator(\))operator(;)
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  key(toPaddedString)operator(:) keyword(function)operator(()ident(length)operator(,) ident(radix)operator(\)) operator({)
    keyword(var) ident(string) operator(=) local_variable(this)operator(.)ident(toString)operator(()ident(radix) operator(||) integer(10)operator(\))operator(;)
    keyword(return) string<delimiter(')content(0)delimiter(')>operator(.)ident(times)operator(()ident(length) operator(-) ident(string)operator(.)ident(length)operator(\)) operator(+) ident(string)operator(;)
  operator(})operator(,)

  key(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(isFinite)operator(()local_variable(this)operator(\)) operator(?) local_variable(this)operator(.)ident(toString)operator(()operator(\)) operator(:) string<delimiter(')content(null)delimiter(')>operator(;)
  operator(})
operator(}\))operator(;)

predefined($w)operator(()string<delimiter(')content(abs round ceil floor)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(method)operator(\))operator({)
  ident(Number)operator(.)ident(prototype)operator([)ident(method)operator(]) operator(=) ident(Math)operator([)ident(method)operator(])operator(.)ident(methodize)operator(()operator(\))operator(;)
operator(}\))operator(;)
keyword(function) predefined($H)operator(()ident(object)operator(\)) operator({)
  keyword(return) keyword(new) ident(Hash)operator(()ident(object)operator(\))operator(;)
operator(})operator(;)

keyword(var) ident(Hash) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Enumerable)operator(,) operator(()keyword(function)operator(()operator(\)) operator({)

  keyword(function) ident(toQueryPair)operator(()ident(key)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(key)operator(;)
    keyword(return) ident(key) operator(+) string<delimiter(')content(=)delimiter(')> operator(+) ident(encodeURIComponent)operator(()ident(String)operator(.)ident(interpret)operator(()ident(value)operator(\)\))operator(;)
  operator(})

  keyword(return) operator({)
    key(initialize)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      local_variable(this)operator(.)ident(_object) operator(=) ident(Object)operator(.)ident(isHash)operator(()ident(object)operator(\)) operator(?) ident(object)operator(.)ident(toObject)operator(()operator(\)) operator(:) ident(Object)operator(.)ident(clone)operator(()ident(object)operator(\))operator(;)
    operator(})operator(,)

    key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(key) keyword(in) local_variable(this)operator(.)ident(_object)operator(\)) operator({)
        keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(,) ident(pair) operator(=) operator([)ident(key)operator(,) ident(value)operator(])operator(;)
        ident(pair)operator(.)ident(key) operator(=) ident(key)operator(;)
        ident(pair)operator(.)ident(value) operator(=) ident(value)operator(;)
        ident(iterator)operator(()ident(pair)operator(\))operator(;)
      operator(})
    operator(})operator(,)

    key(set)operator(:) keyword(function)operator(()ident(key)operator(,) ident(value)operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
    operator(})operator(,)

    key(get)operator(:) keyword(function)operator(()ident(key)operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
    operator(})operator(,)

    key(unset)operator(:) keyword(function)operator(()ident(key)operator(\)) operator({)
      keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
      keyword(delete) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
      keyword(return) ident(value)operator(;)
    operator(})operator(,)

    key(toObject)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(Object)operator(.)ident(clone)operator(()local_variable(this)operator(.)ident(_object)operator(\))operator(;)
    operator(})operator(,)

    key(keys)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(pluck)operator(()string<delimiter(')content(key)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    key(values)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(pluck)operator(()string<delimiter(')content(value)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    key(index)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(var) ident(match) operator(=) local_variable(this)operator(.)ident(detect)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
        keyword(return) ident(pair)operator(.)ident(value) operator(===) ident(value)operator(;)
      operator(}\))operator(;)
      keyword(return) ident(match) operator(&&) ident(match)operator(.)ident(key)operator(;)
    operator(})operator(,)

    key(merge)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(clone)operator(()operator(\))operator(.)ident(update)operator(()ident(object)operator(\))operator(;)
    operator(})operator(,)

    key(update)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(return) keyword(new) ident(Hash)operator(()ident(object)operator(\))operator(.)ident(inject)operator(()local_variable(this)operator(,) keyword(function)operator(()ident(result)operator(,) ident(pair)operator(\)) operator({)
        ident(result)operator(.)ident(set)operator(()ident(pair)operator(.)ident(key)operator(,) ident(pair)operator(.)ident(value)operator(\))operator(;)
        keyword(return) ident(result)operator(;)
      operator(}\))operator(;)
    operator(})operator(,)

    key(toQueryString)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
        keyword(var) ident(key) operator(=) ident(encodeURIComponent)operator(()ident(pair)operator(.)ident(key)operator(\))operator(,) ident(values) operator(=) ident(pair)operator(.)ident(value)operator(;)

        keyword(if) operator(()ident(values) operator(&&) keyword(typeof) ident(values) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) operator({)
          keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()ident(values)operator(\)\))
            keyword(return) ident(values)operator(.)ident(map)operator(()ident(toQueryPair)operator(.)ident(curry)operator(()ident(key)operator(\)\))operator(.)ident(join)operator(()string<delimiter(')content(&)delimiter(')>operator(\))operator(;)
        operator(})
        keyword(return) ident(toQueryPair)operator(()ident(key)operator(,) ident(values)operator(\))operator(;)
      operator(}\))operator(.)ident(join)operator(()string<delimiter(')content(&)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) string<delimiter(')content(#<Hash:{)delimiter(')> operator(+) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
        keyword(return) ident(pair)operator(.)ident(map)operator(()ident(Object)operator(.)ident(inspect)operator(\))operator(.)ident(join)operator(()string<delimiter(')content(: )delimiter(')>operator(\))operator(;)
      operator(}\))operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(}>)delimiter(')>operator(;)
    operator(})operator(,)

    key(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(Object)operator(.)ident(toJSON)operator(()local_variable(this)operator(.)ident(toObject)operator(()operator(\)\))operator(;)
    operator(})operator(,)

    key(clone)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) keyword(new) ident(Hash)operator(()local_variable(this)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(()operator(\)\))operator(;)

ident(Hash)operator(.)ident(prototype)operator(.)ident(toTemplateReplacements) operator(=) ident(Hash)operator(.)ident(prototype)operator(.)ident(toObject)operator(;)
ident(Hash)operator(.)ident(from) operator(=) predefined($H)operator(;)
keyword(var) ident(ObjectRange) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Enumerable)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\)) operator({)
    local_variable(this)operator(.)ident(start) operator(=) ident(start)operator(;)
    local_variable(this)operator(.)ident(end) operator(=) ident(end)operator(;)
    local_variable(this)operator(.)ident(exclusive) operator(=) ident(exclusive)operator(;)
  operator(})operator(,)

  key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(start)operator(;)
    keyword(while) operator(()local_variable(this)operator(.)ident(include)operator(()ident(value)operator(\)\)) operator({)
      ident(iterator)operator(()ident(value)operator(\))operator(;)
      ident(value) operator(=) ident(value)operator(.)ident(succ)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(include)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(value) operator(<) local_variable(this)operator(.)ident(start)operator(\))
      keyword(return) keyword(false)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(exclusive)operator(\))
      keyword(return) ident(value) operator(<) local_variable(this)operator(.)ident(end)operator(;)
    keyword(return) ident(value) operator(<=) local_variable(this)operator(.)ident(end)operator(;)
  operator(})
operator(}\))operator(;)

keyword(var) predefined($R) operator(=) keyword(function)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\)) operator({)
  keyword(return) keyword(new) ident(ObjectRange)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\))operator(;)
operator(})operator(;)

keyword(var) ident(Ajax) operator(=) operator({)
  key(getTransport)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Try)operator(.)ident(these)operator(()
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(XMLHttpRequest)operator(()operator(\)})operator(,)
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(ActiveXObject)operator(()string<delimiter(')content(Msxml2.XMLHTTP)delimiter(')>operator(\)})operator(,)
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(ActiveXObject)operator(()string<delimiter(')content(Microsoft.XMLHTTP)delimiter(')>operator(\)})
    operator(\)) operator(||) keyword(false)operator(;)
  operator(})operator(,)

  key(activeRequestCount)operator(:) integer(0)
operator(})operator(;)

ident(Ajax)operator(.)ident(Responders) operator(=) operator({)
  key(responders)operator(:) operator([)operator(])operator(,)

  key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(responders)operator(.)ident(_each)operator(()ident(iterator)operator(\))operator(;)
  operator(})operator(,)

  key(register)operator(:) keyword(function)operator(()ident(responder)operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(include)operator(()ident(responder)operator(\)\))
      local_variable(this)operator(.)ident(responders)operator(.)ident(push)operator(()ident(responder)operator(\))operator(;)
  operator(})operator(,)

  key(unregister)operator(:) keyword(function)operator(()ident(responder)operator(\)) operator({)
    local_variable(this)operator(.)ident(responders) operator(=) local_variable(this)operator(.)ident(responders)operator(.)ident(without)operator(()ident(responder)operator(\))operator(;)
  operator(})operator(,)

  key(dispatch)operator(:) keyword(function)operator(()ident(callback)operator(,) ident(request)operator(,) ident(transport)operator(,) ident(json)operator(\)) operator({)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(responder)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(responder)operator([)ident(callback)operator(]\)\)) operator({)
        keyword(try) operator({)
          ident(responder)operator([)ident(callback)operator(])operator(.)ident(apply)operator(()ident(responder)operator(,) operator([)ident(request)operator(,) ident(transport)operator(,) ident(json)operator(]\))operator(;)
        operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
      operator(})
    operator(}\))operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Ajax)operator(.)ident(Responders)operator(,) ident(Enumerable)operator(\))operator(;)

ident(Ajax)operator(.)ident(Responders)operator(.)ident(register)operator(({)
  key(onCreate)operator(:)   keyword(function)operator(()operator(\)) operator({) ident(Ajax)operator(.)ident(activeRequestCount)operator(++) operator(})operator(,)
  key(onComplete)operator(:) keyword(function)operator(()operator(\)) operator({) ident(Ajax)operator(.)ident(activeRequestCount)operator(--) operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Base) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(options) operator(=) operator({)
      key(method)operator(:)       string<delimiter(')content(post)delimiter(')>operator(,)
      key(asynchronous)operator(:) keyword(true)operator(,)
      key(contentType)operator(:)  string<delimiter(')content(application/x-www-form-urlencoded)delimiter(')>operator(,)
      key(encoding)operator(:)     string<delimiter(')content(UTF-8)delimiter(')>operator(,)
      key(parameters)operator(:)   string<delimiter(')delimiter(')>operator(,)
      key(evalJSON)operator(:)     keyword(true)operator(,)
      key(evalJS)operator(:)       keyword(true)
    operator(})operator(;)
    ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(,) ident(options) operator(||) operator({) operator(}\))operator(;)

    local_variable(this)operator(.)ident(options)operator(.)ident(method) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(method)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\)\))
      local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(.)ident(toQueryParams)operator(()operator(\))operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isHash)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\)\))
      local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(.)ident(toObject)operator(()operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Request) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Base)operator(,) operator({)
  key(_complete)operator(:) keyword(false)operator(,)

  key(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    predefined($super)operator(()ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(transport) operator(=) ident(Ajax)operator(.)ident(getTransport)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(request)operator(()ident(url)operator(\))operator(;)
  operator(})operator(,)

  key(request)operator(:) keyword(function)operator(()ident(url)operator(\)) operator({)
    local_variable(this)operator(.)ident(url) operator(=) ident(url)operator(;)
    local_variable(this)operator(.)ident(method) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(method)operator(;)
    keyword(var) ident(params) operator(=) ident(Object)operator(.)ident(clone)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\))operator(;)

    keyword(if) operator((![)string<delimiter(')content(get)delimiter(')>operator(,) string<delimiter(')content(post)delimiter(')>operator(])operator(.)ident(include)operator(()local_variable(this)operator(.)ident(method)operator(\)\)) operator({)
      comment(// simulate other verbs over post)
      ident(params)operator([)string<delimiter(')content(_method)delimiter(')>operator(]) operator(=) local_variable(this)operator(.)ident(method)operator(;)
      local_variable(this)operator(.)ident(method) operator(=) string<delimiter(')content(post)delimiter(')>operator(;)
    operator(})

    local_variable(this)operator(.)ident(parameters) operator(=) ident(params)operator(;)

    keyword(if) operator(()ident(params) operator(=) ident(Object)operator(.)ident(toQueryString)operator(()ident(params)operator(\)\)) operator({)
      comment(// when GET, append parameters to URL)
      keyword(if) operator(()local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(get)delimiter(')>operator(\))
        local_variable(this)operator(.)ident(url) operator(+=) operator(()local_variable(this)operator(.)ident(url)operator(.)ident(include)operator(()string<delimiter(')content(?)delimiter(')>operator(\)) operator(?) string<delimiter(')content(&)delimiter(')> operator(:) string<delimiter(')content(?)delimiter(')>operator(\)) operator(+) ident(params)operator(;)
      keyword(else) keyword(if) operator(()regexp<delimiter(/)content(Konqueror|Safari|KHTML)delimiter(/)>operator(.)ident(test)operator(()ident(navigator)operator(.)ident(userAgent)operator(\)\))
        ident(params) operator(+=) string<delimiter(')content(&_=)delimiter(')>operator(;)
    operator(})

    keyword(try) operator({)
      keyword(var) ident(response) operator(=) keyword(new) ident(Ajax)operator(.)ident(Response)operator(()local_variable(this)operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onCreate)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(onCreate)operator(()ident(response)operator(\))operator(;)
      ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(onCreate)delimiter(')>operator(,) local_variable(this)operator(,) ident(response)operator(\))operator(;)

      local_variable(this)operator(.)ident(transport)operator(.)ident(open)operator(()local_variable(this)operator(.)ident(method)operator(.)ident(toUpperCase)operator(()operator(\))operator(,) local_variable(this)operator(.)ident(url)operator(,)
        local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous)operator(\))operator(;)

      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous)operator(\)) local_variable(this)operator(.)ident(respondToReadyState)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(.)ident(defer)operator(()integer(1)operator(\))operator(;)

      local_variable(this)operator(.)ident(transport)operator(.)ident(onreadystatechange) operator(=) local_variable(this)operator(.)ident(onStateChange)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
      local_variable(this)operator(.)ident(setRequestHeaders)operator(()operator(\))operator(;)

      local_variable(this)operator(.)ident(body) operator(=) local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(post)delimiter(')> operator(?) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(postBody) operator(||) ident(params)operator(\)) operator(:) keyword(null)operator(;)
      local_variable(this)operator(.)ident(transport)operator(.)ident(send)operator(()local_variable(this)operator(.)ident(body)operator(\))operator(;)

      comment(/* Force Firefox to handle ready state 4 for synchronous requests */)
      keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous) operator(&&) local_variable(this)operator(.)ident(transport)operator(.)ident(overrideMimeType)operator(\))
        local_variable(this)operator(.)ident(onStateChange)operator(()operator(\))operator(;)

    operator(})
    keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(onStateChange)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(readyState) operator(=) local_variable(this)operator(.)ident(transport)operator(.)ident(readyState)operator(;)
    keyword(if) operator(()ident(readyState) operator(>) integer(1) operator(&&) operator(!(()ident(readyState) operator(==) integer(4)operator(\)) operator(&&) local_variable(this)operator(.)ident(_complete)operator(\)\))
      local_variable(this)operator(.)ident(respondToReadyState)operator(()local_variable(this)operator(.)ident(transport)operator(.)ident(readyState)operator(\))operator(;)
  operator(})operator(,)

  key(setRequestHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(headers) operator(=) operator({)
      key<delimiter(')content(X-Requested-With)delimiter(')>operator(:) string<delimiter(')content(XMLHttpRequest)delimiter(')>operator(,)
      key<delimiter(')content(X-Prototype-Version)delimiter(')>operator(:) ident(Prototype)operator(.)ident(Version)operator(,)
      key<delimiter(')content(Accept)delimiter(')>operator(:) string<delimiter(')content(text/javascript, text/html, application/xml, text/xml, */*)delimiter(')>
    operator(})operator(;)

    keyword(if) operator(()local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(post)delimiter(')>operator(\)) operator({)
      ident(headers)operator([)string<delimiter(')content(Content-type)delimiter(')>operator(]) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(contentType) operator(+)
        operator(()local_variable(this)operator(.)ident(options)operator(.)ident(encoding) operator(?) string<delimiter(')content(; charset=)delimiter(')> operator(+) local_variable(this)operator(.)ident(options)operator(.)ident(encoding) operator(:) string<delimiter(')delimiter(')>operator(\))operator(;)

      comment(/* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */)
      keyword(if) operator(()local_variable(this)operator(.)ident(transport)operator(.)ident(overrideMimeType) operator(&&)
          operator(()ident(navigator)operator(.)ident(userAgent)operator(.)ident(match)operator(()regexp<delimiter(/)content(Gecko)content(\\/)content(()char(\\d)content({4}\))delimiter(/)>operator(\)) operator(||) operator([)integer(0)operator(,)integer(2005)operator(]\))operator([)integer(1)operator(]) operator(<) integer(2005)operator(\))
            ident(headers)operator([)string<delimiter(')content(Connection)delimiter(')>operator(]) operator(=) string<delimiter(')content(close)delimiter(')>operator(;)
    operator(})

    comment(// user-defined headers)
    keyword(if) operator(()keyword(typeof) local_variable(this)operator(.)ident(options)operator(.)ident(requestHeaders) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) operator({)
      keyword(var) ident(extras) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(requestHeaders)operator(;)

      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(extras)operator(.)ident(push)operator(\)\))
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(extras)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i) operator(+=) integer(2)operator(\))
          ident(headers)operator([)ident(extras)operator([)ident(i)operator(]]) operator(=) ident(extras)operator([)ident(i)operator(+)integer(1)operator(])operator(;)
      keyword(else)
        predefined($H)operator(()ident(extras)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({) ident(headers)operator([)ident(pair)operator(.)ident(key)operator(]) operator(=) ident(pair)operator(.)ident(value) operator(}\))operator(;)
    operator(})

    keyword(for) operator(()keyword(var) ident(name) keyword(in) ident(headers)operator(\))
      local_variable(this)operator(.)ident(transport)operator(.)ident(setRequestHeader)operator(()ident(name)operator(,) ident(headers)operator([)ident(name)operator(]\))operator(;)
  operator(})operator(,)

  key(success)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(status) operator(=) local_variable(this)operator(.)ident(getStatus)operator(()operator(\))operator(;)
    keyword(return) operator(!)ident(status) operator(||) operator(()ident(status) operator(>=) integer(200) operator(&&) ident(status) operator(<) integer(300)operator(\))operator(;)
  operator(})operator(,)

  key(getStatus)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(status) operator(||) integer(0)operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) integer(0) operator(})
  operator(})operator(,)

  key(respondToReadyState)operator(:) keyword(function)operator(()ident(readyState)operator(\)) operator({)
    keyword(var) ident(state) operator(=) ident(Ajax)operator(.)ident(Request)operator(.)ident(Events)operator([)ident(readyState)operator(])operator(,) ident(response) operator(=) keyword(new) ident(Ajax)operator(.)ident(Response)operator(()local_variable(this)operator(\))operator(;)

    keyword(if) operator(()ident(state) operator(==) string<delimiter(')content(Complete)delimiter(')>operator(\)) operator({)
      keyword(try) operator({)
        local_variable(this)operator(.)ident(_complete) operator(=) keyword(true)operator(;)
        operator(()local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) ident(response)operator(.)ident(status)operator(])
         operator(||) local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) operator(()local_variable(this)operator(.)ident(success)operator(()operator(\)) operator(?) string<delimiter(')content(Success)delimiter(')> operator(:) string<delimiter(')content(Failure)delimiter(')>operator(\)])
         operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
        local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
      operator(})

      keyword(var) ident(contentType) operator(=) ident(response)operator(.)ident(getHeader)operator(()string<delimiter(')content(Content-type)delimiter(')>operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(evalJS) operator(==) string<delimiter(')content(force)delimiter(')>
          operator(||) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(evalJS) operator(&&) ident(contentType)
          operator(&&) ident(contentType)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\s)content(*(text|application\))content(\\/)content((x-\)?(java|ecma\)script(;.*\)?)char(\\s)content(*$)delimiter(/)modifier(i)>operator(\)\)\))
        local_variable(this)operator(.)ident(evalResponse)operator(()operator(\))operator(;)
    operator(})

    keyword(try) operator({)
      operator(()local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) ident(state)operator(]) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
      ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(on)delimiter(')> operator(+) ident(state)operator(,) local_variable(this)operator(,) ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(state) operator(==) string<delimiter(')content(Complete)delimiter(')>operator(\)) operator({)
      comment(// avoid memory leak in MSIE: clean up)
      local_variable(this)operator(.)ident(transport)operator(.)ident(onreadystatechange) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
    operator(})
  operator(})operator(,)

  key(getHeader)operator(:) keyword(function)operator(()ident(name)operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getResponseHeader)operator(()ident(name)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) keyword(null) operator(})
  operator(})operator(,)

  key(evalResponse)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) ident(eval)operator((()local_variable(this)operator(.)ident(transport)operator(.)ident(responseText) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(unfilterJSON)operator(()operator(\)\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(dispatchException)operator(:) keyword(function)operator(()ident(exception)operator(\)) operator({)
    operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onException) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()local_variable(this)operator(,) ident(exception)operator(\))operator(;)
    ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(onException)delimiter(')>operator(,) local_variable(this)operator(,) ident(exception)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Request)operator(.)ident(Events) operator(=)
  operator([)string<delimiter(')content(Uninitialized)delimiter(')>operator(,) string<delimiter(')content(Loading)delimiter(')>operator(,) string<delimiter(')content(Loaded)delimiter(')>operator(,) string<delimiter(')content(Interactive)delimiter(')>operator(,) string<delimiter(')content(Complete)delimiter(')>operator(])operator(;)

ident(Ajax)operator(.)ident(Response) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(request)operator(\))operator({)
    local_variable(this)operator(.)ident(request) operator(=) ident(request)operator(;)
    keyword(var) ident(transport)  operator(=) local_variable(this)operator(.)ident(transport)  operator(=) ident(request)operator(.)ident(transport)operator(,)
        ident(readyState) operator(=) local_variable(this)operator(.)ident(readyState) operator(=) ident(transport)operator(.)ident(readyState)operator(;)

    keyword(if)operator((()ident(readyState) operator(>) integer(2) operator(&&) operator(!)ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator(||) ident(readyState) operator(==) integer(4)operator(\)) operator({)
      local_variable(this)operator(.)ident(status)       operator(=) local_variable(this)operator(.)ident(getStatus)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(statusText)   operator(=) local_variable(this)operator(.)ident(getStatusText)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(responseText) operator(=) ident(String)operator(.)ident(interpret)operator(()ident(transport)operator(.)ident(responseText)operator(\))operator(;)
      local_variable(this)operator(.)ident(headerJSON)   operator(=) local_variable(this)operator(.)ident(_getHeaderJSON)operator(()operator(\))operator(;)
    operator(})

    keyword(if)operator(()ident(readyState) operator(==) integer(4)operator(\)) operator({)
      keyword(var) ident(xml) operator(=) ident(transport)operator(.)ident(responseXML)operator(;)
      local_variable(this)operator(.)ident(responseXML)  operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(xml)operator(\)) operator(?) keyword(null) operator(:) ident(xml)operator(;)
      local_variable(this)operator(.)ident(responseJSON) operator(=) local_variable(this)operator(.)ident(_getResponseJSON)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(status)operator(:)      integer(0)operator(,)
  key(statusText)operator(:) string<delimiter(')delimiter(')>operator(,)

  key(getStatus)operator(:) ident(Ajax)operator(.)ident(Request)operator(.)ident(prototype)operator(.)ident(getStatus)operator(,)

  key(getStatusText)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(statusText) operator(||) string<delimiter(')delimiter(')>operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) string<delimiter(')delimiter(')> operator(})
  operator(})operator(,)

  key(getHeader)operator(:) ident(Ajax)operator(.)ident(Request)operator(.)ident(prototype)operator(.)ident(getHeader)operator(,)

  key(getAllHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(getAllResponseHeaders)operator(()operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) keyword(null) operator(})
  operator(})operator(,)

  key(getResponseHeader)operator(:) keyword(function)operator(()ident(name)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getResponseHeader)operator(()ident(name)operator(\))operator(;)
  operator(})operator(,)

  key(getAllResponseHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getAllResponseHeaders)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(_getHeaderJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(json) operator(=) local_variable(this)operator(.)ident(getHeader)operator(()string<delimiter(')content(X-JSON)delimiter(')>operator(\))operator(;)
    keyword(if) operator((!)ident(json)operator(\)) keyword(return) keyword(null)operator(;)
    ident(json) operator(=) ident(decodeURIComponent)operator(()ident(escape)operator(()ident(json)operator(\)\))operator(;)
    keyword(try) operator({)
      keyword(return) ident(json)operator(.)ident(evalJSON)operator(()local_variable(this)operator(.)ident(request)operator(.)ident(options)operator(.)ident(sanitizeJSON)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(request)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(_getResponseJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(options) operator(=) local_variable(this)operator(.)ident(request)operator(.)ident(options)operator(;)
    keyword(if) operator((!)ident(options)operator(.)ident(evalJSON) operator(||) operator(()ident(options)operator(.)ident(evalJSON) operator(!=) string<delimiter(')content(force)delimiter(')> operator(&&)
      operator(!()local_variable(this)operator(.)ident(getHeader)operator(()string<delimiter(')content(Content-type)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content(application/json)delimiter(')>operator(\)\)) operator(||)
        local_variable(this)operator(.)ident(responseText)operator(.)ident(blank)operator(()operator(\)\))
          keyword(return) keyword(null)operator(;)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(responseText)operator(.)ident(evalJSON)operator(()ident(options)operator(.)ident(sanitizeJSON)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(request)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Updater) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Request)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(container)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(container) operator(=) operator({)
      key(success)operator(:) operator(()ident(container)operator(.)ident(success) operator(||) ident(container)operator(\))operator(,)
      key(failure)operator(:) operator(()ident(container)operator(.)ident(failure) operator(||) operator(()ident(container)operator(.)ident(success) operator(?) keyword(null) operator(:) ident(container)operator(\)\))
    operator(})operator(;)

    ident(options) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(options)operator(\))operator(;)
    keyword(var) ident(onComplete) operator(=) ident(options)operator(.)ident(onComplete)operator(;)
    ident(options)operator(.)ident(onComplete) operator(=) operator(()keyword(function)operator(()ident(response)operator(,) ident(json)operator(\)) operator({)
      local_variable(this)operator(.)ident(updateContent)operator(()ident(response)operator(.)ident(responseText)operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(onComplete)operator(\)\)) ident(onComplete)operator(()ident(response)operator(,) ident(json)operator(\))operator(;)
    operator(}\))operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)

    predefined($super)operator(()ident(url)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(updateContent)operator(:) keyword(function)operator(()ident(responseText)operator(\)) operator({)
    keyword(var) ident(receiver) operator(=) local_variable(this)operator(.)ident(container)operator([)local_variable(this)operator(.)ident(success)operator(()operator(\)) operator(?) string<delimiter(')content(success)delimiter(')> operator(:) string<delimiter(')content(failure)delimiter(')>operator(])operator(,)
        ident(options) operator(=) local_variable(this)operator(.)ident(options)operator(;)

    keyword(if) operator((!)ident(options)operator(.)ident(evalScripts)operator(\)) ident(responseText) operator(=) ident(responseText)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(receiver) operator(=) predefined($)operator(()ident(receiver)operator(\)\)) operator({)
      keyword(if) operator(()ident(options)operator(.)ident(insertion)operator(\)) operator({)
        keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(options)operator(.)ident(insertion)operator(\)\)) operator({)
          keyword(var) ident(insertion) operator(=) operator({) operator(})operator(;) ident(insertion)operator([)ident(options)operator(.)ident(insertion)operator(]) operator(=) ident(responseText)operator(;)
          ident(receiver)operator(.)ident(insert)operator(()ident(insertion)operator(\))operator(;)
        operator(})
        keyword(else) ident(options)operator(.)ident(insertion)operator(()ident(receiver)operator(,) ident(responseText)operator(\))operator(;)
      operator(})
      keyword(else) ident(receiver)operator(.)ident(update)operator(()ident(responseText)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(PeriodicalUpdater) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Base)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(container)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    predefined($super)operator(()ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(onComplete) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(onComplete)operator(;)

    local_variable(this)operator(.)ident(frequency) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(frequency) operator(||) integer(2)operator(\))operator(;)
    local_variable(this)operator(.)ident(decay) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(decay) operator(||) integer(1)operator(\))operator(;)

    local_variable(this)operator(.)ident(updater) operator(=) operator({) operator(})operator(;)
    local_variable(this)operator(.)ident(container) operator(=) ident(container)operator(;)
    local_variable(this)operator(.)ident(url) operator(=) ident(url)operator(;)

    local_variable(this)operator(.)ident(start)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(start)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(options)operator(.)ident(onComplete) operator(=) local_variable(this)operator(.)ident(updateComplete)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(onTimerEvent)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(stop)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(updater)operator(.)ident(options)operator(.)ident(onComplete) operator(=) ident(undefined)operator(;)
    ident(clearTimeout)operator(()local_variable(this)operator(.)ident(timer)operator(\))operator(;)
    operator(()local_variable(this)operator(.)ident(onComplete) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\))operator(;)
  operator(})operator(,)

  key(updateComplete)operator(:) keyword(function)operator(()ident(response)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(decay)operator(\)) operator({)
      local_variable(this)operator(.)ident(decay) operator(=) operator(()ident(response)operator(.)ident(responseText) operator(==) local_variable(this)operator(.)ident(lastText) operator(?)
        local_variable(this)operator(.)ident(decay) operator(*) local_variable(this)operator(.)ident(options)operator(.)ident(decay) operator(:) integer(1)operator(\))operator(;)

      local_variable(this)operator(.)ident(lastText) operator(=) ident(response)operator(.)ident(responseText)operator(;)
    operator(})
    local_variable(this)operator(.)ident(timer) operator(=) local_variable(this)operator(.)ident(onTimerEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(.)ident(delay)operator(()local_variable(this)operator(.)ident(decay) operator(*) local_variable(this)operator(.)ident(frequency)operator(\))operator(;)
  operator(})operator(,)

  key(onTimerEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(updater) operator(=) keyword(new) ident(Ajax)operator(.)ident(Updater)operator(()local_variable(this)operator(.)ident(container)operator(,) local_variable(this)operator(.)ident(url)operator(,) local_variable(this)operator(.)ident(options)operator(\))operator(;)
  operator(})
operator(}\))operator(;)
keyword(function) predefined($)operator(()ident(element)operator(\)) operator({)
  keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(>) integer(1)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(elements) operator(=) operator([)operator(])operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(elements)operator(.)ident(push)operator(()predefined($)operator(()local_variable(arguments)operator([)ident(i)operator(]\)\))operator(;)
    keyword(return) ident(elements)operator(;)
  operator(})
  keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(element)operator(\)\))
    ident(element) operator(=) ident(document)operator(.)ident(getElementById)operator(()ident(element)operator(\))operator(;)
  keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\))operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath)operator(\)) operator({)
  ident(document)operator(.)ident(_getElementsByXPath) operator(=) keyword(function)operator(()ident(expression)operator(,) ident(parentElement)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    keyword(var) ident(query) operator(=) ident(document)operator(.)ident(evaluate)operator(()ident(expression)operator(,) predefined($)operator(()ident(parentElement)operator(\)) operator(||) ident(document)operator(,)
      keyword(null)operator(,) ident(XPathResult)operator(.)ident(ORDERED_NODE_SNAPSHOT_TYPE)operator(,) keyword(null)operator(\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(query)operator(.)ident(snapshotLength)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(results)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(query)operator(.)ident(snapshotItem)operator(()ident(i)operator(\)\)\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(;)
operator(})

comment(/*--------------------------------------------------------------------------*/)

keyword(if) operator((!)ident(window)operator(.)ident(Node)operator(\)) keyword(var) ident(Node) operator(=) operator({) operator(})operator(;)

keyword(if) operator((!)ident(Node)operator(.)ident(ELEMENT_NODE)operator(\)) operator({)
  comment(// DOM level 2 ECMAScript Language Binding)
  ident(Object)operator(.)ident(extend)operator(()ident(Node)operator(,) operator({)
    key(ELEMENT_NODE)operator(:) integer(1)operator(,)
    key(ATTRIBUTE_NODE)operator(:) integer(2)operator(,)
    key(TEXT_NODE)operator(:) integer(3)operator(,)
    key(CDATA_SECTION_NODE)operator(:) integer(4)operator(,)
    key(ENTITY_REFERENCE_NODE)operator(:) integer(5)operator(,)
    key(ENTITY_NODE)operator(:) integer(6)operator(,)
    key(PROCESSING_INSTRUCTION_NODE)operator(:) integer(7)operator(,)
    key(COMMENT_NODE)operator(:) integer(8)operator(,)
    key(DOCUMENT_NODE)operator(:) integer(9)operator(,)
    key(DOCUMENT_TYPE_NODE)operator(:) integer(10)operator(,)
    key(DOCUMENT_FRAGMENT_NODE)operator(:) integer(11)operator(,)
    key(NOTATION_NODE)operator(:) integer(12)
  operator(}\))operator(;)
operator(})

operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(element) operator(=) local_variable(this)operator(.)ident(Element)operator(;)
  local_variable(this)operator(.)ident(Element) operator(=) keyword(function)operator(()ident(tagName)operator(,) ident(attributes)operator(\)) operator({)
    ident(attributes) operator(=) ident(attributes) operator(||) operator({) operator(})operator(;)
    ident(tagName) operator(=) ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    keyword(var) ident(cache) operator(=) ident(Element)operator(.)ident(cache)operator(;)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(&&) ident(attributes)operator(.)ident(name)operator(\)) operator({)
      ident(tagName) operator(=) string<delimiter(')content(<)delimiter(')> operator(+) ident(tagName) operator(+) string<delimiter(')content( name=")delimiter(')> operator(+) ident(attributes)operator(.)ident(name) operator(+) string<delimiter(')content(">)delimiter(')>operator(;)
      keyword(delete) ident(attributes)operator(.)ident(name)operator(;)
      keyword(return) ident(Element)operator(.)ident(writeAttribute)operator(()ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\))operator(,) ident(attributes)operator(\))operator(;)
    operator(})
    keyword(if) operator((!)ident(cache)operator([)ident(tagName)operator(]\)) ident(cache)operator([)ident(tagName)operator(]) operator(=) ident(Element)operator(.)ident(extend)operator(()ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\)\))operator(;)
    keyword(return) ident(Element)operator(.)ident(writeAttribute)operator(()ident(cache)operator([)ident(tagName)operator(])operator(.)ident(cloneNode)operator(()keyword(false)operator(\))operator(,) ident(attributes)operator(\))operator(;)
  operator(})operator(;)
  ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(Element)operator(,) ident(element) operator(||) operator({) operator(}\))operator(;)
operator(}\))operator(.)ident(call)operator(()ident(window)operator(\))operator(;)

ident(Element)operator(.)ident(cache) operator(=) operator({) operator(})operator(;)

ident(Element)operator(.)ident(Methods) operator(=) operator({)
  key(visible)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(style)operator(.)ident(display) operator(!=) string<delimiter(')content(none)delimiter(')>operator(;)
  operator(})operator(,)

  key(toggle)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(Element)operator([)ident(Element)operator(.)ident(visible)operator(()ident(element)operator(\)) operator(?) string<delimiter(')content(hide)delimiter(')> operator(:) string<delimiter(')content(show)delimiter(')>operator(])operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(hide)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(style)operator(.)ident(display) operator(=) string<delimiter(')content(none)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(show)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(style)operator(.)ident(display) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(remove)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(parentNode)operator(.)ident(removeChild)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(update)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) keyword(return) ident(element)operator(.)ident(update)operator(()operator(\))operator(.)ident(insert)operator(()ident(content)operator(\))operator(;)
    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    ident(element)operator(.)ident(innerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)
    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(replace)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(else) keyword(if) operator((!)ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
      ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
      keyword(var) ident(range) operator(=) ident(element)operator(.)ident(ownerDocument)operator(.)ident(createRange)operator(()operator(\))operator(;)
      ident(range)operator(.)ident(selectNode)operator(()ident(element)operator(\))operator(;)
      ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
      ident(content) operator(=) ident(range)operator(.)ident(createContextualFragment)operator(()ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)
    operator(})
    ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(content)operator(,) ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(insertions)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(insertions)operator(\)) operator(||) ident(Object)operator(.)ident(isNumber)operator(()ident(insertions)operator(\)) operator(||)
        ident(Object)operator(.)ident(isElement)operator(()ident(insertions)operator(\)) operator(||) operator(()ident(insertions) operator(&&) operator(()ident(insertions)operator(.)ident(toElement) operator(||) ident(insertions)operator(.)ident(toHTML)operator(\)\)\))
          ident(insertions) operator(=) operator({)key(bottom)operator(:)ident(insertions)operator(})operator(;)

    keyword(var) ident(content)operator(,) ident(t)operator(,) ident(range)operator(;)

    keyword(for) operator(()ident(position) keyword(in) ident(insertions)operator(\)) operator({)
      ident(content)  operator(=) ident(insertions)operator([)ident(position)operator(])operator(;)
      ident(position) operator(=) ident(position)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      ident(t) operator(=) ident(Element)operator(.)ident(_insertionTranslations)operator([)ident(position)operator(])operator(;)

      keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
        ident(t)operator(.)ident(insert)operator(()ident(element)operator(,) ident(content)operator(\))operator(;)
        keyword(continue)operator(;)
      operator(})

      ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)

      ident(range) operator(=) ident(element)operator(.)ident(ownerDocument)operator(.)ident(createRange)operator(()operator(\))operator(;)
      ident(t)operator(.)ident(initializeRange)operator(()ident(element)operator(,) ident(range)operator(\))operator(;)
      ident(t)operator(.)ident(insert)operator(()ident(element)operator(,) ident(range)operator(.)ident(createContextualFragment)operator(()ident(content)operator(.)ident(stripScripts)operator(()operator(\)\)\))operator(;)

      ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    operator(})

    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(wrap)operator(:) keyword(function)operator(()ident(element)operator(,) ident(wrapper)operator(,) ident(attributes)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(wrapper)operator(\)\))
      predefined($)operator(()ident(wrapper)operator(\))operator(.)ident(writeAttribute)operator(()ident(attributes) operator(||) operator({) operator(}\))operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(wrapper)operator(\)\)) ident(wrapper) operator(=) keyword(new) ident(Element)operator(()ident(wrapper)operator(,) ident(attributes)operator(\))operator(;)
    keyword(else) ident(wrapper) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(,) ident(wrapper)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(parentNode)operator(\))
      ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(wrapper)operator(,) ident(element)operator(\))operator(;)
    ident(wrapper)operator(.)ident(appendChild)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(wrapper)operator(;)
  operator(})operator(,)

  key(inspect)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(result) operator(=) string<delimiter(')content(<)delimiter(')> operator(+) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    predefined($H)operator(({)key<delimiter(')content(id)delimiter(')>operator(:) string<delimiter(')content(id)delimiter(')>operator(,) key<delimiter(')content(className)delimiter(')>operator(:) string<delimiter(')content(class)delimiter(')>operator(}\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
      keyword(var) ident(property) operator(=) ident(pair)operator(.)ident(first)operator(()operator(\))operator(,) ident(attribute) operator(=) ident(pair)operator(.)ident(last)operator(()operator(\))operator(;)
      keyword(var) ident(value) operator(=) operator(()ident(element)operator([)ident(property)operator(]) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(toString)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(value)operator(\)) ident(result) operator(+=) string<delimiter(')content( )delimiter(')> operator(+) ident(attribute) operator(+) string<delimiter(')content(=)delimiter(')> operator(+) ident(value)operator(.)ident(inspect)operator(()keyword(true)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result) operator(+) string<delimiter(')content(>)delimiter(')>operator(;)
  operator(})operator(,)

  key(recursivelyCollect)operator(:) keyword(function)operator(()ident(element)operator(,) ident(property)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(elements) operator(=) operator([)operator(])operator(;)
    keyword(while) operator(()ident(element) operator(=) ident(element)operator([)ident(property)operator(]\))
      keyword(if) operator(()ident(element)operator(.)ident(nodeType) operator(==) integer(1)operator(\))
        ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\)\))operator(;)
    keyword(return) ident(elements)operator(;)
  operator(})operator(,)

  key(ancestors)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(parentNode)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(descendants)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getElementsBySelector)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
  operator(})operator(,)

  key(firstDescendant)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(firstChild)operator(;)
    keyword(while) operator(()ident(element) operator(&&) ident(element)operator(.)ident(nodeType) operator(!=) integer(1)operator(\)) ident(element) operator(=) ident(element)operator(.)ident(nextSibling)operator(;)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(immediateDescendants)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(firstChild)operator(\)\)) keyword(return) operator([)operator(])operator(;)
    keyword(while) operator(()ident(element) operator(&&) ident(element)operator(.)ident(nodeType) operator(!=) integer(1)operator(\)) ident(element) operator(=) ident(element)operator(.)ident(nextSibling)operator(;)
    keyword(if) operator(()ident(element)operator(\)) keyword(return) operator([)ident(element)operator(])operator(.)ident(concat)operator(()predefined($)operator(()ident(element)operator(\))operator(.)ident(nextSiblings)operator(()operator(\)\))operator(;)
    keyword(return) operator([)operator(])operator(;)
  operator(})operator(,)

  key(previousSiblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(previousSibling)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(nextSiblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(nextSibling)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(siblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(.)ident(previousSiblings)operator(()operator(\))operator(.)ident(reverse)operator(()operator(\))operator(.)ident(concat)operator(()ident(element)operator(.)ident(nextSiblings)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  key(match)operator(:) keyword(function)operator(()ident(element)operator(,) ident(selector)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(selector)operator(\)\))
      ident(selector) operator(=) keyword(new) ident(Selector)operator(()ident(selector)operator(\))operator(;)
    keyword(return) ident(selector)operator(.)ident(match)operator(()predefined($)operator(()ident(element)operator(\)\))operator(;)
  operator(})operator(,)

  key(up)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(.)ident(parentNode)operator(\))operator(;)
    keyword(var) ident(ancestors) operator(=) ident(element)operator(.)ident(ancestors)operator(()operator(\))operator(;)
    keyword(return) ident(expression) operator(?) ident(Selector)operator(.)ident(findElement)operator(()ident(ancestors)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator(:)
      ident(ancestors)operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  key(down)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) ident(element)operator(.)ident(firstDescendant)operator(()operator(\))operator(;)
    keyword(var) ident(descendants) operator(=) ident(element)operator(.)ident(descendants)operator(()operator(\))operator(;)
    keyword(return) ident(expression) operator(?) ident(Selector)operator(.)ident(findElement)operator(()ident(descendants)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator(:)
      ident(descendants)operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  key(previous)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(element)operator(\)\))operator(;)
    keyword(var) ident(previousSiblings) operator(=) ident(element)operator(.)ident(previousSiblings)operator(()operator(\))operator(;)
    keyword(return) ident(expression) operator(?) ident(Selector)operator(.)ident(findElement)operator(()ident(previousSiblings)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator(:)
      ident(previousSiblings)operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  key(next)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(nextElementSibling)operator(()ident(element)operator(\)\))operator(;)
    keyword(var) ident(nextSiblings) operator(=) ident(element)operator(.)ident(nextSiblings)operator(()operator(\))operator(;)
    keyword(return) ident(expression) operator(?) ident(Selector)operator(.)ident(findElement)operator(()ident(nextSiblings)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator(:)
      ident(nextSiblings)operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  key(select)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(element) operator(=) predefined($)operator(()ident(args)operator(.)ident(shift)operator(()operator(\)\))operator(;)
    keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(element)operator(,) ident(args)operator(\))operator(;)
  operator(})operator(,)

  key(adjacent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(element) operator(=) predefined($)operator(()ident(args)operator(.)ident(shift)operator(()operator(\)\))operator(;)
    keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(element)operator(.)ident(parentNode)operator(,) ident(args)operator(\))operator(.)ident(without)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(identify)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(id) operator(=) ident(element)operator(.)ident(readAttribute)operator(()string<delimiter(')content(id)delimiter(')>operator(\))operator(,) ident(self) operator(=) local_variable(arguments)operator(.)ident(callee)operator(;)
    keyword(if) operator(()ident(id)operator(\)) keyword(return) ident(id)operator(;)
    keyword(do) operator({) ident(id) operator(=) string<delimiter(')content(anonymous_element_)delimiter(')> operator(+) ident(self)operator(.)ident(counter)operator(++) operator(}) keyword(while) operator(()predefined($)operator(()ident(id)operator(\)\))operator(;)
    ident(element)operator(.)ident(writeAttribute)operator(()string<delimiter(')content(id)delimiter(')>operator(,) ident(id)operator(\))operator(;)
    keyword(return) ident(id)operator(;)
  operator(})operator(,)

  key(readAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(name)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
      keyword(var) ident(t) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(values)operator([)ident(name)operator(]\)) keyword(return) ident(t)operator(.)ident(values)operator([)ident(name)operator(])operator(()ident(element)operator(,) ident(name)operator(\))operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(names)operator([)ident(name)operator(]\)) ident(name) operator(=) ident(t)operator(.)ident(names)operator([)ident(name)operator(])operator(;)
      keyword(if) operator(()ident(name)operator(.)ident(include)operator(()string<delimiter(')content(:)delimiter(')>operator(\)\)) operator({)
        keyword(return) operator((!)ident(element)operator(.)ident(attributes) operator(||) operator(!)ident(element)operator(.)ident(attributes)operator([)ident(name)operator(]\)) operator(?) keyword(null) operator(:)
         ident(element)operator(.)ident(attributes)operator([)ident(name)operator(])operator(.)ident(value)operator(;)
      operator(})
    operator(})
    keyword(return) ident(element)operator(.)ident(getAttribute)operator(()ident(name)operator(\))operator(;)
  operator(})operator(,)

  key(writeAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(name)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(attributes) operator(=) operator({) operator(})operator(,) ident(t) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write)operator(;)

    keyword(if) operator(()keyword(typeof) ident(name) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) ident(attributes) operator(=) ident(name)operator(;)
    keyword(else) ident(attributes)operator([)ident(name)operator(]) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)) operator(?) keyword(true) operator(:) ident(value)operator(;)

    keyword(for) operator(()keyword(var) ident(attr) keyword(in) ident(attributes)operator(\)) operator({)
      ident(name) operator(=) ident(t)operator(.)ident(names)operator([)ident(attr)operator(]) operator(||) ident(attr)operator(;)
      ident(value) operator(=) ident(attributes)operator([)ident(attr)operator(])operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(values)operator([)ident(attr)operator(]\)) ident(name) operator(=) ident(t)operator(.)ident(values)operator([)ident(attr)operator(])operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
      keyword(if) operator(()ident(value) operator(===) keyword(false) operator(||) ident(value) operator(===) keyword(null)operator(\))
        ident(element)operator(.)ident(removeAttribute)operator(()ident(name)operator(\))operator(;)
      keyword(else) keyword(if) operator(()ident(value) operator(===) keyword(true)operator(\))
        ident(element)operator(.)ident(setAttribute)operator(()ident(name)operator(,) ident(name)operator(\))operator(;)
      keyword(else) ident(element)operator(.)ident(setAttribute)operator(()ident(name)operator(,) ident(value)operator(\))operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(getHeight)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(height)operator(;)
  operator(})operator(,)

  key(getWidth)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(width)operator(;)
  operator(})operator(,)

  key(classNames)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) keyword(new) ident(Element)operator(.)ident(ClassNames)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(hasClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(var) ident(elementClassName) operator(=) ident(element)operator(.)ident(className)operator(;)
    keyword(return) operator(()ident(elementClassName)operator(.)ident(length) operator(>) integer(0) operator(&&) operator(()ident(elementClassName) operator(==) ident(className) operator(||)
      keyword(new) ident(RegExp)operator(()string<delimiter(")content((^|)char(\\\\)content(s\))delimiter(")> operator(+) ident(className) operator(+) string<delimiter(")content(()char(\\\\)content(s|$\))delimiter(")>operator(\))operator(.)ident(test)operator(()ident(elementClassName)operator(\)\)\))operator(;)
  operator(})operator(,)

  key(addClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(hasClassName)operator(()ident(className)operator(\)\))
      ident(element)operator(.)ident(className) operator(+=) operator(()ident(element)operator(.)ident(className) operator(?) string<delimiter(')content( )delimiter(')> operator(:) string<delimiter(')delimiter(')>operator(\)) operator(+) ident(className)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(removeClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    ident(element)operator(.)ident(className) operator(=) ident(element)operator(.)ident(className)operator(.)ident(replace)operator(()
      keyword(new) ident(RegExp)operator(()string<delimiter(")content((^|)char(\\\\)content(s+\))delimiter(")> operator(+) ident(className) operator(+) string<delimiter(")content(()char(\\\\)content(s+|$\))delimiter(")>operator(\))operator(,) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(toggleClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(return) ident(element)operator([)ident(element)operator(.)ident(hasClassName)operator(()ident(className)operator(\)) operator(?)
      string<delimiter(')content(removeClassName)delimiter(')> operator(:) string<delimiter(')content(addClassName)delimiter(')>operator(])operator(()ident(className)operator(\))operator(;)
  operator(})operator(,)

  comment(// removes whitespace-only text node children)
  key(cleanWhitespace)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(node) operator(=) ident(element)operator(.)ident(firstChild)operator(;)
    keyword(while) operator(()ident(node)operator(\)) operator({)
      keyword(var) ident(nextNode) operator(=) ident(node)operator(.)ident(nextSibling)operator(;)
      keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(3) operator(&&) operator(!)regexp<delimiter(/)char(\\S)delimiter(/)>operator(.)ident(test)operator(()ident(node)operator(.)ident(nodeValue)operator(\)\))
        ident(element)operator(.)ident(removeChild)operator(()ident(node)operator(\))operator(;)
      ident(node) operator(=) ident(nextNode)operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(empty)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(innerHTML)operator(.)ident(blank)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(descendantOf)operator(:) keyword(function)operator(()ident(element)operator(,) ident(ancestor)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(,) ident(ancestor) operator(=) predefined($)operator(()ident(ancestor)operator(\))operator(;)
    keyword(var) ident(originalAncestor) operator(=) ident(ancestor)operator(;)

    keyword(if) operator(()ident(element)operator(.)ident(compareDocumentPosition)operator(\))
      keyword(return) operator(()ident(element)operator(.)ident(compareDocumentPosition)operator(()ident(ancestor)operator(\)) operator(&) integer(8)operator(\)) operator(===) integer(8)operator(;)

    keyword(if) operator(()ident(element)operator(.)ident(sourceIndex) operator(&&) operator(!)ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
      keyword(var) ident(e) operator(=) ident(element)operator(.)ident(sourceIndex)operator(,) ident(a) operator(=) ident(ancestor)operator(.)ident(sourceIndex)operator(,)
       ident(nextAncestor) operator(=) ident(ancestor)operator(.)ident(nextSibling)operator(;)
      keyword(if) operator((!)ident(nextAncestor)operator(\)) operator({)
        keyword(do) operator({) ident(ancestor) operator(=) ident(ancestor)operator(.)ident(parentNode)operator(;) operator(})
        keyword(while) operator((!()ident(nextAncestor) operator(=) ident(ancestor)operator(.)ident(nextSibling)operator(\)) operator(&&) ident(ancestor)operator(.)ident(parentNode)operator(\))operator(;)
      operator(})
      keyword(if) operator(()ident(nextAncestor)operator(\)) keyword(return) operator(()ident(e) operator(>) ident(a) operator(&&) ident(e) operator(<) ident(nextAncestor)operator(.)ident(sourceIndex)operator(\))operator(;)
    operator(})

    keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\))
      keyword(if) operator(()ident(element) operator(==) ident(originalAncestor)operator(\)) keyword(return) keyword(true)operator(;)
    keyword(return) keyword(false)operator(;)
  operator(})operator(,)

  key(scrollTo)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(pos) operator(=) ident(element)operator(.)ident(cumulativeOffset)operator(()operator(\))operator(;)
    ident(window)operator(.)ident(scrollTo)operator(()ident(pos)operator([)integer(0)operator(])operator(,) ident(pos)operator([)integer(1)operator(]\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(getStyle)operator(:) keyword(function)operator(()ident(element)operator(,) ident(style)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(style) operator(=) ident(style) operator(==) string<delimiter(')content(float)delimiter(')> operator(?) string<delimiter(')content(cssFloat)delimiter(')> operator(:) ident(style)operator(.)ident(camelize)operator(()operator(\))operator(;)
    keyword(var) ident(value) operator(=) ident(element)operator(.)ident(style)operator([)ident(style)operator(])operator(;)
    keyword(if) operator((!)ident(value)operator(\)) operator({)
      keyword(var) ident(css) operator(=) ident(document)operator(.)ident(defaultView)operator(.)ident(getComputedStyle)operator(()ident(element)operator(,) keyword(null)operator(\))operator(;)
      ident(value) operator(=) ident(css) operator(?) ident(css)operator([)ident(style)operator(]) operator(:) keyword(null)operator(;)
    operator(})
    keyword(if) operator(()ident(style) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) keyword(return) ident(value) operator(?) ident(parseFloat)operator(()ident(value)operator(\)) operator(:) float(1.0)operator(;)
    keyword(return) ident(value) operator(==) string<delimiter(')content(auto)delimiter(')> operator(?) keyword(null) operator(:) ident(value)operator(;)
  operator(})operator(,)

  key(getOpacity)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getStyle)operator(()string<delimiter(')content(opacity)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  key(setStyle)operator(:) keyword(function)operator(()ident(element)operator(,) ident(styles)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(elementStyle) operator(=) ident(element)operator(.)ident(style)operator(,) ident(match)operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(styles)operator(\)\)) operator({)
      ident(element)operator(.)ident(style)operator(.)ident(cssText) operator(+=) string<delimiter(')content(;)delimiter(')> operator(+) ident(styles)operator(;)
      keyword(return) ident(styles)operator(.)ident(include)operator(()string<delimiter(')content(opacity)delimiter(')>operator(\)) operator(?)
        ident(element)operator(.)ident(setOpacity)operator(()ident(styles)operator(.)ident(match)operator(()regexp<delimiter(/)content(opacity:)char(\\s)content(*()char(\\d)content(?)content(\\.)content(?)char(\\d)content(*\))delimiter(/)>operator(\))operator([)integer(1)operator(]\)) operator(:) ident(element)operator(;)
    operator(})
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(styles)operator(\))
      keyword(if) operator(()ident(property) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) ident(element)operator(.)ident(setOpacity)operator(()ident(styles)operator([)ident(property)operator(]\))operator(;)
      keyword(else)
        ident(elementStyle)operator([()ident(property) operator(==) string<delimiter(')content(float)delimiter(')> operator(||) ident(property) operator(==) string<delimiter(')content(cssFloat)delimiter(')>operator(\)) operator(?)
          operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(elementStyle)operator(.)ident(styleFloat)operator(\)) operator(?) string<delimiter(')content(cssFloat)delimiter(')> operator(:) string<delimiter(')content(styleFloat)delimiter(')>operator(\)) operator(:)
            ident(property)operator(]) operator(=) ident(styles)operator([)ident(property)operator(])operator(;)

    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(setOpacity)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:)
      operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(getDimensions)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(display) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()ident(display) operator(!=) string<delimiter(')content(none)delimiter(')> operator(&&) ident(display) operator(!=) keyword(null)operator(\)) comment(// Safari bug)
      keyword(return) operator({)key(width)operator(:) ident(element)operator(.)ident(offsetWidth)operator(,) key(height)operator(:) ident(element)operator(.)ident(offsetHeight)operator(})operator(;)

    comment(// All *Width and *Height properties give 0 on elements with display none,)
    comment(// so enable the element temporarily)
    keyword(var) ident(els) operator(=) ident(element)operator(.)ident(style)operator(;)
    keyword(var) ident(originalVisibility) operator(=) ident(els)operator(.)ident(visibility)operator(;)
    keyword(var) ident(originalPosition) operator(=) ident(els)operator(.)ident(position)operator(;)
    keyword(var) ident(originalDisplay) operator(=) ident(els)operator(.)ident(display)operator(;)
    ident(els)operator(.)ident(visibility) operator(=) string<delimiter(')content(hidden)delimiter(')>operator(;)
    ident(els)operator(.)ident(position) operator(=) string<delimiter(')content(absolute)delimiter(')>operator(;)
    ident(els)operator(.)ident(display) operator(=) string<delimiter(')content(block)delimiter(')>operator(;)
    keyword(var) ident(originalWidth) operator(=) ident(element)operator(.)ident(clientWidth)operator(;)
    keyword(var) ident(originalHeight) operator(=) ident(element)operator(.)ident(clientHeight)operator(;)
    ident(els)operator(.)ident(display) operator(=) ident(originalDisplay)operator(;)
    ident(els)operator(.)ident(position) operator(=) ident(originalPosition)operator(;)
    ident(els)operator(.)ident(visibility) operator(=) ident(originalVisibility)operator(;)
    keyword(return) operator({)key(width)operator(:) ident(originalWidth)operator(,) key(height)operator(:) ident(originalHeight)operator(})operator(;)
  operator(})operator(,)

  key(makePositioned)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(pos) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()ident(pos) operator(==) string<delimiter(')content(static)delimiter(')> operator(||) operator(!)ident(pos)operator(\)) operator({)
      ident(element)operator(.)ident(_madePositioned) operator(=) keyword(true)operator(;)
      ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(relative)delimiter(')>operator(;)
      comment(// Opera returns the offset relative to the positioning context, when an)
      comment(// element is position relative but top and left have not been defined)
      keyword(if) operator(()ident(window)operator(.)ident(opera)operator(\)) operator({)
        ident(element)operator(.)ident(style)operator(.)ident(top) operator(=) integer(0)operator(;)
        ident(element)operator(.)ident(style)operator(.)ident(left) operator(=) integer(0)operator(;)
      operator(})
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(undoPositioned)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_madePositioned)operator(\)) operator({)
      ident(element)operator(.)ident(_madePositioned) operator(=) ident(undefined)operator(;)
      ident(element)operator(.)ident(style)operator(.)ident(position) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(top) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(left) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(bottom) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(right) operator(=) string<delimiter(')delimiter(')>operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(makeClipping)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_overflow)operator(\)) keyword(return) ident(element)operator(;)
    ident(element)operator(.)ident(_overflow) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(overflow)delimiter(')>operator(\)) operator(||) string<delimiter(')content(auto)delimiter(')>operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_overflow) operator(!==) string<delimiter(')content(hidden)delimiter(')>operator(\))
      ident(element)operator(.)ident(style)operator(.)ident(overflow) operator(=) string<delimiter(')content(hidden)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(undoClipping)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(_overflow)operator(\)) keyword(return) ident(element)operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(overflow) operator(=) ident(element)operator(.)ident(_overflow) operator(==) string<delimiter(')content(auto)delimiter(')> operator(?) string<delimiter(')delimiter(')> operator(:) ident(element)operator(.)ident(_overflow)operator(;)
    ident(element)operator(.)ident(_overflow) operator(=) keyword(null)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(cumulativeOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  key(positionedOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
      keyword(if) operator(()ident(element)operator(\)) operator({)
        keyword(if) operator(()ident(element)operator(.)ident(tagName) operator(==) string<delimiter(')content(BODY)delimiter(')>operator(\)) keyword(break)operator(;)
        keyword(var) ident(p) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
        keyword(if) operator(()ident(p) operator(==) string<delimiter(')content(relative)delimiter(')> operator(||) ident(p) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(break)operator(;)
      operator(})
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  key(absolutize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(return)operator(;)
    comment(// Position.prepare(\); // To be done manually by Scripty when it needs it.)

    keyword(var) ident(offsets) operator(=) ident(element)operator(.)ident(positionedOffset)operator(()operator(\))operator(;)
    keyword(var) ident(top)     operator(=) ident(offsets)operator([)integer(1)operator(])operator(;)
    keyword(var) ident(left)    operator(=) ident(offsets)operator([)integer(0)operator(])operator(;)
    keyword(var) ident(width)   operator(=) ident(element)operator(.)ident(clientWidth)operator(;)
    keyword(var) ident(height)  operator(=) ident(element)operator(.)ident(clientHeight)operator(;)

    ident(element)operator(.)ident(_originalLeft)   operator(=) ident(left) operator(-) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(left)  operator(||) integer(0)operator(\))operator(;)
    ident(element)operator(.)ident(_originalTop)    operator(=) ident(top)  operator(-) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(top) operator(||) integer(0)operator(\))operator(;)
    ident(element)operator(.)ident(_originalWidth)  operator(=) ident(element)operator(.)ident(style)operator(.)ident(width)operator(;)
    ident(element)operator(.)ident(_originalHeight) operator(=) ident(element)operator(.)ident(style)operator(.)ident(height)operator(;)

    ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(absolute)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(top)    operator(=) ident(top) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(left)   operator(=) ident(left) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(width)  operator(=) ident(width) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(height) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(relativize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(relative)delimiter(')>operator(\)) keyword(return)operator(;)
    comment(// Position.prepare(\); // To be done manually by Scripty when it needs it.)

    ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(relative)delimiter(')>operator(;)
    keyword(var) ident(top)  operator(=) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(top)  operator(||) integer(0)operator(\)) operator(-) operator(()ident(element)operator(.)ident(_originalTop) operator(||) integer(0)operator(\))operator(;)
    keyword(var) ident(left) operator(=) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(left) operator(||) integer(0)operator(\)) operator(-) operator(()ident(element)operator(.)ident(_originalLeft) operator(||) integer(0)operator(\))operator(;)

    ident(element)operator(.)ident(style)operator(.)ident(top)    operator(=) ident(top) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(left)   operator(=) ident(left) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(element)operator(.)ident(_originalHeight)operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(width)  operator(=) ident(element)operator(.)ident(_originalWidth)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(cumulativeScrollOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(scrollTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(scrollLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  key(getOffsetParent)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(offsetParent)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(.)ident(offsetParent)operator(\))operator(;)
    keyword(if) operator(()ident(element) operator(==) ident(document)operator(.)ident(body)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(while) operator((()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\)) operator(&&) ident(element) operator(!=) ident(document)operator(.)ident(body)operator(\))
      keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(!=) string<delimiter(')content(static)delimiter(')>operator(\))
        keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(return) predefined($)operator(()ident(document)operator(.)ident(body)operator(\))operator(;)
  operator(})operator(,)

  key(viewportOffset)operator(:) keyword(function)operator(()ident(forElement)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)

    keyword(var) ident(element) operator(=) ident(forElement)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)

      comment(// Safari fix)
      keyword(if) operator(()ident(element)operator(.)ident(offsetParent) operator(==) ident(document)operator(.)ident(body) operator(&&)
        ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(break)operator(;)

    operator(}) keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(\))operator(;)

    ident(element) operator(=) ident(forElement)operator(;)
    keyword(do) operator({)
      keyword(if) operator((!)ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera) operator(||) ident(element)operator(.)ident(tagName) operator(==) string<delimiter(')content(BODY)delimiter(')>operator(\)) operator({)
        ident(valueT) operator(-=) ident(element)operator(.)ident(scrollTop)  operator(||) integer(0)operator(;)
        ident(valueL) operator(-=) ident(element)operator(.)ident(scrollLeft) operator(||) integer(0)operator(;)
      operator(})
    operator(}) keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\))operator(;)

    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  key(clonePosition)operator(:) keyword(function)operator(()ident(element)operator(,) ident(source)operator(\)) operator({)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(setLeft)operator(:)    keyword(true)operator(,)
      key(setTop)operator(:)     keyword(true)operator(,)
      key(setWidth)operator(:)   keyword(true)operator(,)
      key(setHeight)operator(:)  keyword(true)operator(,)
      key(offsetTop)operator(:)  integer(0)operator(,)
      key(offsetLeft)operator(:) integer(0)
    operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)

    comment(// find page position of source)
    ident(source) operator(=) predefined($)operator(()ident(source)operator(\))operator(;)
    keyword(var) ident(p) operator(=) ident(source)operator(.)ident(viewportOffset)operator(()operator(\))operator(;)

    comment(// find coordinate system to use)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(delta) operator(=) operator([)integer(0)operator(,) integer(0)operator(])operator(;)
    keyword(var) ident(parent) operator(=) keyword(null)operator(;)
    comment(// delta [0,0] will do fine with position: fixed elements,)
    comment(// position:absolute needs offsetParent deltas)
    keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) operator({)
      ident(parent) operator(=) ident(element)operator(.)ident(getOffsetParent)operator(()operator(\))operator(;)
      ident(delta) operator(=) ident(parent)operator(.)ident(viewportOffset)operator(()operator(\))operator(;)
    operator(})

    comment(// correct by body offsets (fixes Safari\))
    keyword(if) operator(()ident(parent) operator(==) ident(document)operator(.)ident(body)operator(\)) operator({)
      ident(delta)operator([)integer(0)operator(]) operator(-=) ident(document)operator(.)ident(body)operator(.)ident(offsetLeft)operator(;)
      ident(delta)operator([)integer(1)operator(]) operator(-=) ident(document)operator(.)ident(body)operator(.)ident(offsetTop)operator(;)
    operator(})

    comment(// set position)
    keyword(if) operator(()ident(options)operator(.)ident(setLeft)operator(\))   ident(element)operator(.)ident(style)operator(.)ident(left)  operator(=) operator(()ident(p)operator([)integer(0)operator(]) operator(-) ident(delta)operator([)integer(0)operator(]) operator(+) ident(options)operator(.)ident(offsetLeft)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setTop)operator(\))    ident(element)operator(.)ident(style)operator(.)ident(top)   operator(=) operator(()ident(p)operator([)integer(1)operator(]) operator(-) ident(delta)operator([)integer(1)operator(]) operator(+) ident(options)operator(.)ident(offsetTop)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setWidth)operator(\))  ident(element)operator(.)ident(style)operator(.)ident(width) operator(=) ident(source)operator(.)ident(offsetWidth) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setHeight)operator(\)) ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(source)operator(.)ident(offsetHeight) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(identify)operator(.)ident(counter) operator(=) integer(1)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(,) operator({)
  key(getElementsBySelector)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(select)operator(,)
  key(childElements)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(immediateDescendants)
operator(}\))operator(;)

ident(Element)operator(.)ident(_attributeTranslations) operator(=) operator({)
  key(write)operator(:) operator({)
    key(names)operator(:) operator({)
      key(className)operator(:) string<delimiter(')content(class)delimiter(')>operator(,)
      key(htmlFor)operator(:)   string<delimiter(')content(for)delimiter(')>
    operator(})operator(,)
    key(values)operator(:) operator({) operator(})
  operator(})
operator(})operator(;)


keyword(if) operator((!)ident(document)operator(.)ident(createRange) operator(||) ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(insert) operator(=) keyword(function)operator(()ident(element)operator(,) ident(insertions)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(insertions)operator(\)) operator(||) ident(Object)operator(.)ident(isNumber)operator(()ident(insertions)operator(\)) operator(||)
        ident(Object)operator(.)ident(isElement)operator(()ident(insertions)operator(\)) operator(||) operator(()ident(insertions) operator(&&) operator(()ident(insertions)operator(.)ident(toElement) operator(||) ident(insertions)operator(.)ident(toHTML)operator(\)\)\))
          ident(insertions) operator(=) operator({) key(bottom)operator(:) ident(insertions) operator(})operator(;)

    keyword(var) ident(t) operator(=) ident(Element)operator(.)ident(_insertionTranslations)operator(,) ident(content)operator(,) ident(position)operator(,) ident(pos)operator(,) ident(tagName)operator(;)

    keyword(for) operator(()ident(position) keyword(in) ident(insertions)operator(\)) operator({)
      ident(content)  operator(=) ident(insertions)operator([)ident(position)operator(])operator(;)
      ident(position) operator(=) ident(position)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      ident(pos)      operator(=) ident(t)operator([)ident(position)operator(])operator(;)

      keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
        ident(pos)operator(.)ident(insert)operator(()ident(element)operator(,) ident(content)operator(\))operator(;)
        keyword(continue)operator(;)
      operator(})

      ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
      ident(tagName) operator(=) operator((()ident(position) operator(==) string<delimiter(')content(before)delimiter(')> operator(||) ident(position) operator(==) string<delimiter(')content(after)delimiter(')>operator(\))
        operator(?) ident(element)operator(.)ident(parentNode) operator(:) ident(element)operator(\))operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

      keyword(if) operator(()ident(t)operator(.)ident(tags)operator([)ident(tagName)operator(]\)) operator({)
        keyword(var) ident(fragments) operator(=) ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)
        keyword(if) operator(()ident(position) operator(==) string<delimiter(')content(top)delimiter(')> operator(||) ident(position) operator(==) string<delimiter(')content(after)delimiter(')>operator(\)) ident(fragments)operator(.)ident(reverse)operator(()operator(\))operator(;)
        ident(fragments)operator(.)ident(each)operator(()ident(pos)operator(.)ident(insert)operator(.)ident(curry)operator(()ident(element)operator(\)\))operator(;)
      operator(})
      keyword(else) ident(element)operator(.)ident(insertAdjacentHTML)operator(()ident(pos)operator(.)ident(adjacency)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)

      ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    operator(})

    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(getStyle) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(getStyle)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(,) ident(style)operator(\)) operator({)
      keyword(switch) operator(()ident(style)operator(\)) operator({)
        keyword(case) string<delimiter(')content(left)delimiter(')>operator(:) keyword(case) string<delimiter(')content(top)delimiter(')>operator(:) keyword(case) string<delimiter(')content(right)delimiter(')>operator(:) keyword(case) string<delimiter(')content(bottom)delimiter(')>operator(:)
          keyword(if) operator(()ident(proceed)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(===) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(return) keyword(null)operator(;)
        keyword(case) string<delimiter(')content(height)delimiter(')>operator(:) keyword(case) string<delimiter(')content(width)delimiter(')>operator(:)
          comment(// returns '0px' for hidden elements; we want it to return null)
          keyword(if) operator((!)ident(Element)operator(.)ident(visible)operator(()ident(element)operator(\)\)) keyword(return) keyword(null)operator(;)

          comment(// returns the border-box dimensions rather than the content-box)
          comment(// dimensions, so we subtract padding and borders from the value)
          keyword(var) ident(dim) operator(=) ident(parseInt)operator(()ident(proceed)operator(()ident(element)operator(,) ident(style)operator(\))operator(,) integer(10)operator(\))operator(;)

          keyword(if) operator(()ident(dim) operator(!==) ident(element)operator([)string<delimiter(')content(offset)delimiter(')> operator(+) ident(style)operator(.)ident(capitalize)operator(()operator(\)]\))
            keyword(return) ident(dim) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)

          keyword(var) ident(properties)operator(;)
          keyword(if) operator(()ident(style) operator(===) string<delimiter(')content(height)delimiter(')>operator(\)) operator({)
            ident(properties) operator(=) operator([)string<delimiter(')content(border-top-width)delimiter(')>operator(,) string<delimiter(')content(padding-top)delimiter(')>operator(,)
             string<delimiter(')content(padding-bottom)delimiter(')>operator(,) string<delimiter(')content(border-bottom-width)delimiter(')>operator(])operator(;)
          operator(})
          keyword(else) operator({)
            ident(properties) operator(=) operator([)string<delimiter(')content(border-left-width)delimiter(')>operator(,) string<delimiter(')content(padding-left)delimiter(')>operator(,)
             string<delimiter(')content(padding-right)delimiter(')>operator(,) string<delimiter(')content(border-right-width)delimiter(')>operator(])operator(;)
          operator(})
          keyword(return) ident(properties)operator(.)ident(inject)operator(()ident(dim)operator(,) keyword(function)operator(()ident(memo)operator(,) ident(property)operator(\)) operator({)
            keyword(var) ident(val) operator(=) ident(proceed)operator(()ident(element)operator(,) ident(property)operator(\))operator(;)
            keyword(return) ident(val) operator(===) keyword(null) operator(?) ident(memo) operator(:) ident(memo) operator(-) ident(parseInt)operator(()ident(val)operator(,) integer(10)operator(\))operator(;)
          operator(}\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
        keyword(default)operator(:) keyword(return) ident(proceed)operator(()ident(element)operator(,) ident(style)operator(\))operator(;)
      operator(})
    operator(})
  operator(\))operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)ident(readAttribute) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(readAttribute)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(,) ident(attribute)operator(\)) operator({)
      keyword(if) operator(()ident(attribute) operator(===) string<delimiter(')content(title)delimiter(')>operator(\)) keyword(return) ident(element)operator(.)ident(title)operator(;)
      keyword(return) ident(proceed)operator(()ident(element)operator(,) ident(attribute)operator(\))operator(;)
    operator(})
  operator(\))operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
  predefined($w)operator(()string<delimiter(')content(positionedOffset getOffsetParent viewportOffset)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(method)operator(\)) operator({)
    ident(Element)operator(.)ident(Methods)operator([)ident(method)operator(]) operator(=) ident(Element)operator(.)ident(Methods)operator([)ident(method)operator(])operator(.)ident(wrap)operator(()
      keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(\)) operator({)
        ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
        keyword(var) ident(position) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
        keyword(if) operator(()ident(position) operator(!=) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(return) ident(proceed)operator(()ident(element)operator(\))operator(;)
        ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) string<delimiter(')content(relative)delimiter(')> operator(}\))operator(;)
        keyword(var) ident(value) operator(=) ident(proceed)operator(()ident(element)operator(\))operator(;)
        ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) ident(position) operator(}\))operator(;)
        keyword(return) ident(value)operator(;)
      operator(})
    operator(\))operator(;)
  operator(}\))operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)ident(getStyle) operator(=) keyword(function)operator(()ident(element)operator(,) ident(style)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(style) operator(=) operator(()ident(style) operator(==) string<delimiter(')content(float)delimiter(')> operator(||) ident(style) operator(==) string<delimiter(')content(cssFloat)delimiter(')>operator(\)) operator(?) string<delimiter(')content(styleFloat)delimiter(')> operator(:) ident(style)operator(.)ident(camelize)operator(()operator(\))operator(;)
    keyword(var) ident(value) operator(=) ident(element)operator(.)ident(style)operator([)ident(style)operator(])operator(;)
    keyword(if) operator((!)ident(value) operator(&&) ident(element)operator(.)ident(currentStyle)operator(\)) ident(value) operator(=) ident(element)operator(.)ident(currentStyle)operator([)ident(style)operator(])operator(;)

    keyword(if) operator(()ident(style) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) operator({)
      keyword(if) operator(()ident(value) operator(=) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(filter)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(alpha)content(\\()content(opacity=(.*\))content(\\\))delimiter(/)>operator(\)\))
        keyword(if) operator(()ident(value)operator([)integer(1)operator(]\)) keyword(return) ident(parseFloat)operator(()ident(value)operator([)integer(1)operator(]\)) operator(/) integer(100)operator(;)
      keyword(return) float(1.0)operator(;)
    operator(})

    keyword(if) operator(()ident(value) operator(==) string<delimiter(')content(auto)delimiter(')>operator(\)) operator({)
      keyword(if) operator((()ident(style) operator(==) string<delimiter(')content(width)delimiter(')> operator(||) ident(style) operator(==) string<delimiter(')content(height)delimiter(')>operator(\)) operator(&&) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\)) operator(!=) string<delimiter(')content(none)delimiter(')>operator(\)\))
        keyword(return) ident(element)operator([)string<delimiter(')content(offset)delimiter(')> operator(+) ident(style)operator(.)ident(capitalize)operator(()operator(\)]) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
      keyword(return) keyword(null)operator(;)
    operator(})
    keyword(return) ident(value)operator(;)
  operator(})operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)ident(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(function) ident(stripAlpha)operator(()ident(filter)operator(\))operator({)
      keyword(return) ident(filter)operator(.)ident(replace)operator(()regexp<delimiter(/)content(alpha)content(\\()content([^)content(\\\))content(]*)content(\\\))delimiter(/)modifier(gi)>operator(,)string<delimiter(')delimiter(')>operator(\))operator(;)
    operator(})
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(currentStyle) operator(=) ident(element)operator(.)ident(currentStyle)operator(;)
    keyword(if) operator((()ident(currentStyle) operator(&&) operator(!)ident(currentStyle)operator(.)ident(hasLayout)operator(\)) operator(||)
      operator((!)ident(currentStyle) operator(&&) ident(element)operator(.)ident(style)operator(.)ident(zoom) operator(==) string<delimiter(')content(normal)delimiter(')>operator(\)\))
        ident(element)operator(.)ident(style)operator(.)ident(zoom) operator(=) integer(1)operator(;)

    keyword(var) ident(filter) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(filter)delimiter(')>operator(\))operator(,) ident(style) operator(=) ident(element)operator(.)ident(style)operator(;)
    keyword(if) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator({)
      operator(()ident(filter) operator(=) ident(stripAlpha)operator(()ident(filter)operator(\)\)) operator(?)
        ident(style)operator(.)ident(filter) operator(=) ident(filter) operator(:) ident(style)operator(.)ident(removeAttribute)operator(()string<delimiter(')content(filter)delimiter(')>operator(\))operator(;)
      keyword(return) ident(element)operator(;)
    operator(}) keyword(else) keyword(if) operator(()ident(value) operator(<) float(0.00001)operator(\)) ident(value) operator(=) integer(0)operator(;)
    ident(style)operator(.)ident(filter) operator(=) ident(stripAlpha)operator(()ident(filter)operator(\)) operator(+)
      string<delimiter(')content(alpha(opacity=)delimiter(')> operator(+) operator(()ident(value) operator(*) integer(100)operator(\)) operator(+) string<delimiter(')content(\))delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations) operator(=) operator({)
    key(read)operator(:) operator({)
      key(names)operator(:) operator({)
        key<delimiter(')content(class)delimiter(')>operator(:) string<delimiter(')content(className)delimiter(')>operator(,)
        key<delimiter(')content(for)delimiter(')>operator(:)   string<delimiter(')content(htmlFor)delimiter(')>
      operator(})operator(,)
      key(values)operator(:) operator({)
        key(_getAttr)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(getAttribute)operator(()ident(attribute)operator(,) integer(2)operator(\))operator(;)
        operator(})operator(,)
        key(_getAttrNode)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(var) ident(node) operator(=) ident(element)operator(.)ident(getAttributeNode)operator(()ident(attribute)operator(\))operator(;)
          keyword(return) ident(node) operator(?) ident(node)operator(.)ident(value) operator(:) string<delimiter(")delimiter(")>operator(;)
        operator(})operator(,)
        key(_getEv)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          ident(attribute) operator(=) ident(element)operator(.)ident(getAttribute)operator(()ident(attribute)operator(\))operator(;)
          keyword(return) ident(attribute) operator(?) ident(attribute)operator(.)ident(toString)operator(()operator(\))operator(.)ident(slice)operator(()integer(23)operator(,) operator(-)integer(2)operator(\)) operator(:) keyword(null)operator(;)
        operator(})operator(,)
        key(_flag)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(hasAttribute)operator(()ident(attribute)operator(\)) operator(?) ident(attribute) operator(:) keyword(null)operator(;)
        operator(})operator(,)
        key(style)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(style)operator(.)ident(cssText)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
        operator(})operator(,)
        key(title)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(title)operator(;)
        operator(})
      operator(})
    operator(})
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write) operator(=) operator({)
    key(names)operator(:) ident(Object)operator(.)ident(clone)operator(()ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(.)ident(names)operator(\))operator(,)
    key(values)operator(:) operator({)
      key(checked)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
        ident(element)operator(.)ident(checked) operator(=) operator(!!)ident(value)operator(;)
      operator(})operator(,)

      key(style)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
        ident(element)operator(.)ident(style)operator(.)ident(cssText) operator(=) ident(value) operator(?) ident(value) operator(:) string<delimiter(')delimiter(')>operator(;)
      operator(})
    operator(})
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has) operator(=) operator({)operator(})operator(;)

  predefined($w)operator(()string<delimiter(')content(colSpan rowSpan vAlign dateTime accessKey tabIndex )delimiter(')> operator(+)
      string<delimiter(')content(encType maxLength readOnly longDesc)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(attr)operator(\)) operator({)
    ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write)operator(.)ident(names)operator([)ident(attr)operator(.)ident(toLowerCase)operator(()operator(\)]) operator(=) ident(attr)operator(;)
    ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has)operator([)ident(attr)operator(.)ident(toLowerCase)operator(()operator(\)]) operator(=) ident(attr)operator(;)
  operator(}\))operator(;)

  operator(()keyword(function)operator(()ident(v)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(v)operator(,) operator({)
      key(href)operator(:)        ident(v)operator(.)ident(_getAttr)operator(,)
      key(src)operator(:)         ident(v)operator(.)ident(_getAttr)operator(,)
      key(type)operator(:)        ident(v)operator(.)ident(_getAttr)operator(,)
      key(action)operator(:)      ident(v)operator(.)ident(_getAttrNode)operator(,)
      key(disabled)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(checked)operator(:)     ident(v)operator(.)ident(_flag)operator(,)
      key(readonly)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(multiple)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(onload)operator(:)      ident(v)operator(.)ident(_getEv)operator(,)
      key(onunload)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onclick)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(ondblclick)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onmousedown)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseup)operator(:)   ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseover)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmousemove)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseout)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onfocus)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onblur)operator(:)      ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeypress)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeydown)operator(:)   ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeyup)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onsubmit)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onreset)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onselect)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onchange)operator(:)    ident(v)operator(.)ident(_getEv)
    operator(}\))operator(;)
  operator(}\))operator(()ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(.)ident(values)operator(\))operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Gecko) operator(&&) regexp<delimiter(/)content(rv:1)content(\\.)content(8)content(\\.)content(0)delimiter(/)>operator(.)ident(test)operator(()ident(navigator)operator(.)ident(userAgent)operator(\)\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1)operator(\)) operator(?) float(0.999999) operator(:)
      operator(()ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:) operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:)
      operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)

    keyword(if) operator(()ident(value) operator(==) integer(1)operator(\))
      keyword(if)operator(()ident(element)operator(.)ident(tagName) operator(==) string<delimiter(')content(IMG)delimiter(')> operator(&&) ident(element)operator(.)ident(width)operator(\)) operator({)
        ident(element)operator(.)ident(width)operator(++;) ident(element)operator(.)ident(width)operator(--;)
      operator(}) keyword(else) keyword(try) operator({)
        keyword(var) ident(n) operator(=) ident(document)operator(.)ident(createTextNode)operator(()string<delimiter(')content( )delimiter(')>operator(\))operator(;)
        ident(element)operator(.)ident(appendChild)operator(()ident(n)operator(\))operator(;)
        ident(element)operator(.)ident(removeChild)operator(()ident(n)operator(\))operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})

    keyword(return) ident(element)operator(;)
  operator(})operator(;)

  comment(// Safari returns margins on body which is incorrect if the child is absolutely)
  comment(// positioned.  For performance reasons, redefine Element#cumulativeOffset for)
  comment(// KHTML/WebKit only.)
  ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeOffset) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      keyword(if) operator(()ident(element)operator(.)ident(offsetParent) operator(==) ident(document)operator(.)ident(body)operator(\))
        keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(break)operator(;)

      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)

    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(||) ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
  comment(// IE and Opera are missing .innerHTML support for TABLE-related and SELECT elements)
  ident(Element)operator(.)ident(Methods)operator(.)ident(update) operator(=) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) keyword(return) ident(element)operator(.)ident(update)operator(()operator(\))operator(.)ident(insert)operator(()ident(content)operator(\))operator(;)

    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    keyword(var) ident(tagName) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(tagName) keyword(in) ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator(\)) operator({)
      predefined($A)operator(()ident(element)operator(.)ident(childNodes)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(element)operator(.)ident(removeChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
      ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))
        operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(element)operator(.)ident(appendChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
    operator(})
    keyword(else) ident(element)operator(.)ident(innerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

keyword(if) operator(()ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(.)ident(outerHTML)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(replace) operator(=) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
      ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(content)operator(,) ident(element)operator(\))operator(;)
      keyword(return) ident(element)operator(;)
    operator(})

    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    keyword(var) ident(parent) operator(=) ident(element)operator(.)ident(parentNode)operator(,) ident(tagName) operator(=) ident(parent)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator([)ident(tagName)operator(]\)) operator({)
      keyword(var) ident(nextSibling) operator(=) ident(element)operator(.)ident(next)operator(()operator(\))operator(;)
      keyword(var) ident(fragments) operator(=) ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)
      ident(parent)operator(.)ident(removeChild)operator(()ident(element)operator(\))operator(;)
      keyword(if) operator(()ident(nextSibling)operator(\))
        ident(fragments)operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(parent)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(nextSibling)operator(\)) operator(}\))operator(;)
      keyword(else)
        ident(fragments)operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(parent)operator(.)ident(appendChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
    operator(})
    keyword(else) ident(element)operator(.)ident(outerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

ident(Element)operator(.)ident(_returnOffset) operator(=) keyword(function)operator(()ident(l)operator(,) ident(t)operator(\)) operator({)
  keyword(var) ident(result) operator(=) operator([)ident(l)operator(,) ident(t)operator(])operator(;)
  ident(result)operator(.)ident(left) operator(=) ident(l)operator(;)
  ident(result)operator(.)ident(top) operator(=) ident(t)operator(;)
  keyword(return) ident(result)operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(_getContentFromAnonymousElement) operator(=) keyword(function)operator(()ident(tagName)operator(,) ident(html)operator(\)) operator({)
  keyword(var) ident(div) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(,) ident(t) operator(=) ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator([)ident(tagName)operator(])operator(;)
  ident(div)operator(.)ident(innerHTML) operator(=) ident(t)operator([)integer(0)operator(]) operator(+) ident(html) operator(+) ident(t)operator([)integer(1)operator(])operator(;)
  ident(t)operator([)integer(2)operator(])operator(.)ident(times)operator(()keyword(function)operator(()operator(\)) operator({) ident(div) operator(=) ident(div)operator(.)ident(firstChild) operator(}\))operator(;)
  keyword(return) predefined($A)operator(()ident(div)operator(.)ident(childNodes)operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(_insertionTranslations) operator(=) operator({)
  key(before)operator(:) operator({)
    key(adjacency)operator(:) string<delimiter(')content(beforeBegin)delimiter(')>operator(,)
    key(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
      ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(\))operator(;)
    operator(})operator(,)
    key(initializeRange)operator(:) keyword(function)operator(()ident(element)operator(,) ident(range)operator(\)) operator({)
      ident(range)operator(.)ident(setStartBefore)operator(()ident(element)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  key(top)operator(:) operator({)
    key(adjacency)operator(:) string<delimiter(')content(afterBegin)delimiter(')>operator(,)
    key(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
      ident(element)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(.)ident(firstChild)operator(\))operator(;)
    operator(})operator(,)
    key(initializeRange)operator(:) keyword(function)operator(()ident(element)operator(,) ident(range)operator(\)) operator({)
      ident(range)operator(.)ident(selectNodeContents)operator(()ident(element)operator(\))operator(;)
      ident(range)operator(.)ident(collapse)operator(()keyword(true)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  key(bottom)operator(:) operator({)
    key(adjacency)operator(:) string<delimiter(')content(beforeEnd)delimiter(')>operator(,)
    key(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
      ident(element)operator(.)ident(appendChild)operator(()ident(node)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  key(after)operator(:) operator({)
    key(adjacency)operator(:) string<delimiter(')content(afterEnd)delimiter(')>operator(,)
    key(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
      ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(.)ident(nextSibling)operator(\))operator(;)
    operator(})operator(,)
    key(initializeRange)operator(:) keyword(function)operator(()ident(element)operator(,) ident(range)operator(\)) operator({)
      ident(range)operator(.)ident(setStartAfter)operator(()ident(element)operator(\))operator(;)
    operator(})
  operator(})operator(,)
  key(tags)operator(:) operator({)
    key(TABLE)operator(:)  operator([)string<delimiter(')content(<table>)delimiter(')>operator(,)                string<delimiter(')content(</table>)delimiter(')>operator(,)                   integer(1)operator(])operator(,)
    key(TBODY)operator(:)  operator([)string<delimiter(')content(<table><tbody>)delimiter(')>operator(,)         string<delimiter(')content(</tbody></table>)delimiter(')>operator(,)           integer(2)operator(])operator(,)
    key(TR)operator(:)     operator([)string<delimiter(')content(<table><tbody><tr>)delimiter(')>operator(,)     string<delimiter(')content(</tr></tbody></table>)delimiter(')>operator(,)      integer(3)operator(])operator(,)
    key(TD)operator(:)     operator([)string<delimiter(')content(<table><tbody><tr><td>)delimiter(')>operator(,) string<delimiter(')content(</td></tr></tbody></table>)delimiter(')>operator(,) integer(4)operator(])operator(,)
    key(SELECT)operator(:) operator([)string<delimiter(')content(<select>)delimiter(')>operator(,)               string<delimiter(')content(</select>)delimiter(')>operator(,)                  integer(1)operator(])
  operator(})
operator(})operator(;)

operator(()keyword(function)operator(()operator(\)) operator({)
  local_variable(this)operator(.)ident(bottom)operator(.)ident(initializeRange) operator(=) local_variable(this)operator(.)ident(top)operator(.)ident(initializeRange)operator(;)
  ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(tags)operator(,) operator({)
    key(THEAD)operator(:) local_variable(this)operator(.)ident(tags)operator(.)ident(TBODY)operator(,)
    key(TFOOT)operator(:) local_variable(this)operator(.)ident(tags)operator(.)ident(TBODY)operator(,)
    key(TH)operator(:)    local_variable(this)operator(.)ident(tags)operator(.)ident(TD)
  operator(}\))operator(;)
operator(}\))operator(.)ident(call)operator(()ident(Element)operator(.)ident(_insertionTranslations)operator(\))operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated) operator(=) operator({)
  key(hasAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
    ident(attribute) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has)operator([)ident(attribute)operator(]) operator(||) ident(attribute)operator(;)
    keyword(var) ident(node) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getAttributeNode)operator(()ident(attribute)operator(\))operator(;)
    keyword(return) ident(node) operator(&&) ident(node)operator(.)ident(specified)operator(;)
  operator(})
operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)

keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions) operator(&&)
    ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(.)ident(__proto__)operator(\)) operator({)
  ident(window)operator(.)ident(HTMLElement) operator(=) operator({) operator(})operator(;)
  ident(window)operator(.)ident(HTMLElement)operator(.)ident(prototype) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(.)ident(__proto__)operator(;)
  ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions) operator(=) keyword(true)operator(;)
operator(})

ident(Element)operator(.)ident(extend) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(if) operator(()ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(SpecificElementExtensions)operator(\))
    keyword(return) ident(Prototype)operator(.)ident(K)operator(;)

  keyword(var) ident(Methods) operator(=) operator({) operator(})operator(,) ident(ByTag) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(;)

  keyword(var) ident(extend) operator(=) ident(Object)operator(.)ident(extend)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator((!)ident(element) operator(||) ident(element)operator(.)ident(_extendedByPrototype) operator(||)
        ident(element)operator(.)ident(nodeType) operator(!=) integer(1) operator(||) ident(element) operator(==) ident(window)operator(\)) keyword(return) ident(element)operator(;)

    keyword(var) ident(methods) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(Methods)operator(\))operator(,)
      ident(tagName) operator(=) ident(element)operator(.)ident(tagName)operator(,) ident(property)operator(,) ident(value)operator(;)

    comment(// extend methods for specific tags)
    keyword(if) operator(()ident(ByTag)operator([)ident(tagName)operator(]\)) ident(Object)operator(.)ident(extend)operator(()ident(methods)operator(,) ident(ByTag)operator([)ident(tagName)operator(]\))operator(;)

    keyword(for) operator(()ident(property) keyword(in) ident(methods)operator(\)) operator({)
      ident(value) operator(=) ident(methods)operator([)ident(property)operator(])operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)) operator(&&) operator(!()ident(property) keyword(in) ident(element)operator(\)\))
        ident(element)operator([)ident(property)operator(]) operator(=) ident(value)operator(.)ident(methodize)operator(()operator(\))operator(;)
    operator(})

    ident(element)operator(.)ident(_extendedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
    keyword(return) ident(element)operator(;)

  operator(})operator(,) operator({)
    key(refresh)operator(:) keyword(function)operator(()operator(\)) operator({)
      comment(// extend methods for all tags (Safari doesn't need this\))
      keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions)operator(\)) operator({)
        ident(Object)operator(.)ident(extend)operator(()ident(Methods)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)
        ident(Object)operator(.)ident(extend)operator(()ident(Methods)operator(,) ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(\))operator(;)
      operator(})
    operator(})
  operator(}\))operator(;)

  ident(extend)operator(.)ident(refresh)operator(()operator(\))operator(;)
  keyword(return) ident(extend)operator(;)
operator(}\))operator(()operator(\))operator(;)

ident(Element)operator(.)ident(hasAttribute) operator(=) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
  keyword(if) operator(()ident(element)operator(.)ident(hasAttribute)operator(\)) keyword(return) ident(element)operator(.)ident(hasAttribute)operator(()ident(attribute)operator(\))operator(;)
  keyword(return) ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(.)ident(hasAttribute)operator(()ident(element)operator(,) ident(attribute)operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(addMethods) operator(=) keyword(function)operator(()ident(methods)operator(\)) operator({)
  keyword(var) ident(F) operator(=) ident(Prototype)operator(.)ident(BrowserFeatures)operator(,) ident(T) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(;)

  keyword(if) operator((!)ident(methods)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(Form)operator(,) ident(Form)operator(.)ident(Methods)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Form)operator(.)ident(Element)operator(,) ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(,) operator({)
      key<delimiter(")content(FORM)delimiter(")>operator(:)     ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(INPUT)delimiter(")>operator(:)    ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(SELECT)delimiter(")>operator(:)   ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(TEXTAREA)delimiter(")>operator(:) ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))
    operator(}\))operator(;)
  operator(})

  keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(2)operator(\)) operator({)
    keyword(var) ident(tagName) operator(=) ident(methods)operator(;)
    ident(methods) operator(=) local_variable(arguments)operator([)integer(1)operator(])operator(;)
  operator(})

  keyword(if) operator((!)ident(tagName)operator(\)) ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(,) ident(methods) operator(||) operator({) operator(}\))operator(;)
  keyword(else) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()ident(tagName)operator(\)\)) ident(tagName)operator(.)ident(each)operator(()ident(extend)operator(\))operator(;)
    keyword(else) ident(extend)operator(()ident(tagName)operator(\))operator(;)
  operator(})

  keyword(function) ident(extend)operator(()ident(tagName)operator(\)) operator({)
    ident(tagName) operator(=) ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
    keyword(if) operator((!)ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(]\))
      ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(]) operator(=) operator({) operator(})operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(])operator(,) ident(methods)operator(\))operator(;)
  operator(})

  keyword(function) ident(copy)operator(()ident(methods)operator(,) ident(destination)operator(,) ident(onlyIfAbsent)operator(\)) operator({)
    ident(onlyIfAbsent) operator(=) ident(onlyIfAbsent) operator(||) keyword(false)operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(methods)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(methods)operator([)ident(property)operator(])operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)\)) keyword(continue)operator(;)
      keyword(if) operator((!)ident(onlyIfAbsent) operator(||) operator(!()ident(property) keyword(in) ident(destination)operator(\)\))
        ident(destination)operator([)ident(property)operator(]) operator(=) ident(value)operator(.)ident(methodize)operator(()operator(\))operator(;)
    operator(})
  operator(})

  keyword(function) ident(findDOMClass)operator(()ident(tagName)operator(\)) operator({)
    keyword(var) ident(klass)operator(;)
    keyword(var) ident(trans) operator(=) operator({)
      key<delimiter(")content(OPTGROUP)delimiter(")>operator(:) string<delimiter(")content(OptGroup)delimiter(")>operator(,) key<delimiter(")content(TEXTAREA)delimiter(")>operator(:) string<delimiter(")content(TextArea)delimiter(")>operator(,) key<delimiter(")content(P)delimiter(")>operator(:) string<delimiter(")content(Paragraph)delimiter(")>operator(,)
      key<delimiter(")content(FIELDSET)delimiter(")>operator(:) string<delimiter(")content(FieldSet)delimiter(")>operator(,) key<delimiter(")content(UL)delimiter(")>operator(:) string<delimiter(")content(UList)delimiter(")>operator(,) key<delimiter(")content(OL)delimiter(")>operator(:) string<delimiter(")content(OList)delimiter(")>operator(,) key<delimiter(")content(DL)delimiter(")>operator(:) string<delimiter(")content(DList)delimiter(")>operator(,)
      key<delimiter(")content(DIR)delimiter(")>operator(:) string<delimiter(")content(Directory)delimiter(")>operator(,) key<delimiter(")content(H1)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H2)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H3)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,)
      key<delimiter(")content(H4)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H5)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H6)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(Q)delimiter(")>operator(:) string<delimiter(")content(Quote)delimiter(")>operator(,)
      key<delimiter(")content(INS)delimiter(")>operator(:) string<delimiter(")content(Mod)delimiter(")>operator(,) key<delimiter(")content(DEL)delimiter(")>operator(:) string<delimiter(")content(Mod)delimiter(")>operator(,) key<delimiter(")content(A)delimiter(")>operator(:) string<delimiter(")content(Anchor)delimiter(")>operator(,) key<delimiter(")content(IMG)delimiter(")>operator(:) string<delimiter(")content(Image)delimiter(")>operator(,) key<delimiter(")content(CAPTION)delimiter(")>operator(:)
      string<delimiter(")content(TableCaption)delimiter(")>operator(,) key<delimiter(")content(COL)delimiter(")>operator(:) string<delimiter(")content(TableCol)delimiter(")>operator(,) key<delimiter(")content(COLGROUP)delimiter(")>operator(:) string<delimiter(")content(TableCol)delimiter(")>operator(,) key<delimiter(")content(THEAD)delimiter(")>operator(:)
      string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TFOOT)delimiter(")>operator(:) string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TBODY)delimiter(")>operator(:) string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TR)delimiter(")>operator(:)
      string<delimiter(")content(TableRow)delimiter(")>operator(,) key<delimiter(")content(TH)delimiter(")>operator(:) string<delimiter(")content(TableCell)delimiter(")>operator(,) key<delimiter(")content(TD)delimiter(")>operator(:) string<delimiter(")content(TableCell)delimiter(")>operator(,) key<delimiter(")content(FRAMESET)delimiter(")>operator(:)
      string<delimiter(")content(FrameSet)delimiter(")>operator(,) key<delimiter(")content(IFRAME)delimiter(")>operator(:) string<delimiter(")content(IFrame)delimiter(")>
    operator(})operator(;)
    keyword(if) operator(()ident(trans)operator([)ident(tagName)operator(]\)) ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(trans)operator([)ident(tagName)operator(]) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
    ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(tagName) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
    ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(tagName)operator(.)ident(capitalize)operator(()operator(\)) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)

    ident(window)operator([)ident(klass)operator(]) operator(=) operator({) operator(})operator(;)
    ident(window)operator([)ident(klass)operator(])operator(.)ident(prototype) operator(=) ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\))operator(.)ident(__proto__)operator(;)
    keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
  operator(})

  keyword(if) operator(()ident(F)operator(.)ident(ElementExtensions)operator(\)) operator({)
    ident(copy)operator(()ident(Element)operator(.)ident(Methods)operator(,) ident(HTMLElement)operator(.)ident(prototype)operator(\))operator(;)
    ident(copy)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(,) ident(HTMLElement)operator(.)ident(prototype)operator(,) keyword(true)operator(\))operator(;)
  operator(})

  keyword(if) operator(()ident(F)operator(.)ident(SpecificElementExtensions)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(tag) keyword(in) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(\)) operator({)
      keyword(var) ident(klass) operator(=) ident(findDOMClass)operator(()ident(tag)operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(klass)operator(\)\)) keyword(continue)operator(;)
      ident(copy)operator(()ident(T)operator([)ident(tag)operator(])operator(,) ident(klass)operator(.)ident(prototype)operator(\))operator(;)
    operator(})
  operator(})

  ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)
  keyword(delete) ident(Element)operator(.)ident(ByTag)operator(;)

  keyword(if) operator(()ident(Element)operator(.)ident(extend)operator(.)ident(refresh)operator(\)) ident(Element)operator(.)ident(extend)operator(.)ident(refresh)operator(()operator(\))operator(;)
  ident(Element)operator(.)ident(cache) operator(=) operator({) operator(})operator(;)
operator(})operator(;)

ident(document)operator(.)ident(viewport) operator(=) operator({)
  key(getDimensions)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(dimensions) operator(=) operator({) operator(})operator(;)
    keyword(var) ident(B) operator(=) ident(Prototype)operator(.)ident(Browser)operator(;)
    predefined($w)operator(()string<delimiter(')content(width height)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(d)operator(\)) operator({)
      keyword(var) ident(D) operator(=) ident(d)operator(.)ident(capitalize)operator(()operator(\))operator(;)
      ident(dimensions)operator([)ident(d)operator(]) operator(=) operator(()ident(B)operator(.)ident(WebKit) operator(&&) operator(!)ident(document)operator(.)ident(evaluate)operator(\)) operator(?) ident(self)operator([)string<delimiter(')content(inner)delimiter(')> operator(+) ident(D)operator(]) operator(:)
        operator(()ident(B)operator(.)ident(Opera)operator(\)) operator(?) ident(document)operator(.)ident(body)operator([)string<delimiter(')content(client)delimiter(')> operator(+) ident(D)operator(]) operator(:) ident(document)operator(.)ident(documentElement)operator([)string<delimiter(')content(client)delimiter(')> operator(+) ident(D)operator(])operator(;)
    operator(}\))operator(;)
    keyword(return) ident(dimensions)operator(;)
  operator(})operator(,)

  key(getWidth)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(width)operator(;)
  operator(})operator(,)

  key(getHeight)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(height)operator(;)
  operator(})operator(,)

  key(getScrollOffsets)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()
      ident(window)operator(.)ident(pageXOffset) operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollLeft) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollLeft)operator(,)
      ident(window)operator(.)ident(pageYOffset) operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollTop) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollTop)operator(\))operator(;)
  operator(})
operator(})operator(;)
comment(/* Portions of the Selector class are derived from Jack Slocum’s DomQuery,
 * part of YUI-Ext version 0.40, distributed under the terms of an MIT-style
 * license.  Please see http://www.yui-ext.com/ for more information. */)

keyword(var) ident(Selector) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(expression)operator(\)) operator({)
    local_variable(this)operator(.)ident(expression) operator(=) ident(expression)operator(.)ident(strip)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(compileMatcher)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(shouldUseXPath)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath)operator(\)) keyword(return) keyword(false)operator(;)

    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(;)

    comment(// Safari 3 chokes on :*-of-type and :empty)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit) operator(&&)
     operator(()ident(e)operator(.)ident(include)operator(()string<delimiter(")content(-of-type)delimiter(")>operator(\)) operator(||) ident(e)operator(.)ident(include)operator(()string<delimiter(")content(:empty)delimiter(")>operator(\)\)\))
      keyword(return) keyword(false)operator(;)

    comment(// XPath can't do namespaced attributes, nor can it read)
    comment(// the "checked" property from DOM nodes)
    keyword(if) operator((()regexp<delimiter(/)content(()content(\\[)content([)char(\\w)content(-]*?:|:checked\))delimiter(/)>operator(\))operator(.)ident(test)operator(()local_variable(this)operator(.)ident(expression)operator(\)\))
      keyword(return) keyword(false)operator(;)

    keyword(return) keyword(true)operator(;)
  operator(})operator(,)

  key(compileMatcher)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(shouldUseXPath)operator(()operator(\)\))
      keyword(return) local_variable(this)operator(.)ident(compileXPathMatcher)operator(()operator(\))operator(;)

    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,)
        ident(c) operator(=) ident(Selector)operator(.)ident(criteria)operator(,) ident(le)operator(,) ident(p)operator(,) ident(m)operator(;)

    keyword(if) operator(()ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(]\)) operator({)
      local_variable(this)operator(.)ident(matcher) operator(=) ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(])operator(;)
      keyword(return)operator(;)
    operator(})

    local_variable(this)operator(.)ident(matcher) operator(=) operator([)string<delimiter(")content(this.matcher = function(root\) {)delimiter(")>operator(,)
                    string<delimiter(")content(var r = root, h = Selector.handlers, c = false, n;)delimiter(")>operator(])operator(;)

    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        ident(p) operator(=) ident(ps)operator([)ident(i)operator(])operator(;)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator(\)\)) operator({)
          local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(c)operator([)ident(i)operator(]\)) operator(?) ident(c)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:)
    	      keyword(new) ident(Template)operator(()ident(c)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\)\))operator(;)
          ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(break)operator(;)
        operator(})
      operator(})
    operator(})

    local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()string<delimiter(")content(return h.unique(n\);)char(\\n)content(})delimiter(")>operator(\))operator(;)
    ident(eval)operator(()local_variable(this)operator(.)ident(matcher)operator(.)ident(join)operator(()string<delimiter(')content(\\n)delimiter(')>operator(\)\))operator(;)
    ident(Selector)operator(.)ident(_cache)operator([)local_variable(this)operator(.)ident(expression)operator(]) operator(=) local_variable(this)operator(.)ident(matcher)operator(;)
  operator(})operator(,)

  key(compileXPathMatcher)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,)
        ident(x) operator(=) ident(Selector)operator(.)ident(xpath)operator(,) ident(le)operator(,) ident(m)operator(;)

    keyword(if) operator(()ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(]\)) operator({)
      local_variable(this)operator(.)ident(xpath) operator(=) ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(])operator(;) keyword(return)operator(;)
    operator(})

    local_variable(this)operator(.)ident(matcher) operator(=) operator([)string<delimiter(')content(.//*)delimiter(')>operator(])operator(;)
    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(ps)operator([)ident(i)operator(]\)\)) operator({)
          local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(x)operator([)ident(i)operator(]\)) operator(?) ident(x)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:)
            keyword(new) ident(Template)operator(()ident(x)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\)\))operator(;)
          ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(break)operator(;)
        operator(})
      operator(})
    operator(})

    local_variable(this)operator(.)ident(xpath) operator(=) local_variable(this)operator(.)ident(matcher)operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
    ident(Selector)operator(.)ident(_cache)operator([)local_variable(this)operator(.)ident(expression)operator(]) operator(=) local_variable(this)operator(.)ident(xpath)operator(;)
  operator(})operator(,)

  key(findElements)operator(:) keyword(function)operator(()ident(root)operator(\)) operator({)
    ident(root) operator(=) ident(root) operator(||) ident(document)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(xpath)operator(\)) keyword(return) ident(document)operator(.)ident(_getElementsByXPath)operator(()local_variable(this)operator(.)ident(xpath)operator(,) ident(root)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(matcher)operator(()ident(root)operator(\))operator(;)
  operator(})operator(,)

  key(match)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(tokens) operator(=) operator([)operator(])operator(;)

    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,) ident(as) operator(=) ident(Selector)operator(.)ident(assertions)operator(;)
    keyword(var) ident(le)operator(,) ident(p)operator(,) ident(m)operator(;)

    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!==) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        ident(p) operator(=) ident(ps)operator([)ident(i)operator(])operator(;)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator(\)\)) operator({)
          comment(// use the Selector.assertions methods unless the selector)
          comment(// is too complex.)
          keyword(if) operator(()ident(as)operator([)ident(i)operator(]\)) operator({)
            local_variable(this)operator(.)ident(tokens)operator(.)ident(push)operator(([)ident(i)operator(,) ident(Object)operator(.)ident(clone)operator(()ident(m)operator(\)]\))operator(;)
            ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          operator(}) keyword(else) operator({)
            comment(// reluctantly do a document-wide search)
            comment(// and look for a match in the array)
            keyword(return) local_variable(this)operator(.)ident(findElements)operator(()ident(document)operator(\))operator(.)ident(include)operator(()ident(element)operator(\))operator(;)
          operator(})
        operator(})
      operator(})
    operator(})

    keyword(var) ident(match) operator(=) keyword(true)operator(,) ident(name)operator(,) ident(matches)operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(token)operator(;) ident(token) operator(=) local_variable(this)operator(.)ident(tokens)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
      ident(name) operator(=) ident(token)operator([)integer(0)operator(])operator(,) ident(matches) operator(=) ident(token)operator([)integer(1)operator(])operator(;)
      keyword(if) operator((!)ident(Selector)operator(.)ident(assertions)operator([)ident(name)operator(])operator(()ident(element)operator(,) ident(matches)operator(\)\)) operator({)
        ident(match) operator(=) keyword(false)operator(;) keyword(break)operator(;)
      operator(})
    operator(})

    keyword(return) ident(match)operator(;)
  operator(})operator(,)

  key(toString)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(expression)operator(;)
  operator(})operator(,)

  key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(")content(#<Selector:)delimiter(")> operator(+) local_variable(this)operator(.)ident(expression)operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(")content(>)delimiter(")>operator(;)
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Selector)operator(,) operator({)
  key(_cache)operator(:) operator({) operator(})operator(,)

  key(xpath)operator(:) operator({)
    key(descendant)operator(:)   string<delimiter(")content(//*)delimiter(")>operator(,)
    key(child)operator(:)        string<delimiter(")content(/*)delimiter(")>operator(,)
    key(adjacent)operator(:)     string<delimiter(")content(/following-sibling::*[1])delimiter(")>operator(,)
    key(laterSibling)operator(:) string<delimiter(')content(/following-sibling::*)delimiter(')>operator(,)
    key(tagName)operator(:)      keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(if) operator(()ident(m)operator([)integer(1)operator(]) operator(==) string<delimiter(')content(*)delimiter(')>operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)
      keyword(return) string<delimiter(")content([local-name(\)=')delimiter(")> operator(+) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\)) operator(+)
             string<delimiter(")content(' or local-name(\)=')delimiter(")> operator(+) ident(m)operator([)integer(1)operator(])operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) string<delimiter(")content('])delimiter(")>operator(;)
    operator(})operator(,)
    key(className)operator(:)    string<delimiter(")content([contains(concat(' ', @class, ' '\), ' #{1} '\)])delimiter(")>operator(,)
    key(id)operator(:)           string<delimiter(")content([@id='#{1}'])delimiter(")>operator(,)
    key(attrPresence)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(1)operator(]) operator(=) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(")content([@#{1}])delimiter(")>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(attr)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(1)operator(]) operator(=) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      ident(m)operator([)integer(3)operator(]) operator(=) ident(m)operator([)integer(5)operator(]) operator(||) ident(m)operator([)integer(6)operator(])operator(;)
      keyword(return) keyword(new) ident(Template)operator(()ident(Selector)operator(.)ident(xpath)operator(.)ident(operators)operator([)ident(m)operator([)integer(2)operator(]]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(pseudo)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)ident(m)operator([)integer(1)operator(]])operator(;)
      keyword(if) operator((!)ident(h)operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(h)operator(\)\)) keyword(return) ident(h)operator(()ident(m)operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)ident(m)operator([)integer(1)operator(]]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(operators)operator(:) operator({)
      key<delimiter(')content(=)delimiter(')>operator(:)  string<delimiter(")content([@#{1}='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(!=)delimiter(')>operator(:) string<delimiter(")content([@#{1}!='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(^=)delimiter(')>operator(:) string<delimiter(")content([starts-with(@#{1}, '#{3}'\)])delimiter(")>operator(,)
      key<delimiter(')content($=)delimiter(')>operator(:) string<delimiter(")content([substring(@#{1}, (string-length(@#{1}\) - string-length('#{3}'\) + 1\)\)='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(*=)delimiter(')>operator(:) string<delimiter(")content([contains(@#{1}, '#{3}'\)])delimiter(")>operator(,)
      key<delimiter(')content(~=)delimiter(')>operator(:) string<delimiter(")content([contains(concat(' ', @#{1}, ' '\), ' #{3} '\)])delimiter(")>operator(,)
      key<delimiter(')content(|=)delimiter(')>operator(:) string<delimiter(")content([contains(concat('-', @#{1}, '-'\), '-#{3}-'\)])delimiter(")>
    operator(})operator(,)
    key(pseudos)operator(:) operator({)
      key<delimiter(')content(first-child)delimiter(')>operator(:) string<delimiter(')content([not(preceding-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(last-child)delimiter(')>operator(:)  string<delimiter(')content([not(following-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(only-child)delimiter(')>operator(:)  string<delimiter(')content([not(preceding-sibling::* or following-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(empty)delimiter(')>operator(:)       string<delimiter(")content([count(*\) = 0 and (count(text(\)\) = 0 or translate(text(\), ' )char(\\t)char(\\r)char(\\n)content(', ''\) = ''\)])delimiter(")>operator(,)
      key<delimiter(')content(checked)delimiter(')>operator(:)     string<delimiter(")content([@checked])delimiter(")>operator(,)
      key<delimiter(')content(disabled)delimiter(')>operator(:)    string<delimiter(")content([@disabled])delimiter(")>operator(,)
      key<delimiter(')content(enabled)delimiter(')>operator(:)     string<delimiter(")content([not(@disabled\)])delimiter(")>operator(,)
      key<delimiter(')content(not)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(var) ident(e) operator(=) ident(m)operator([)integer(6)operator(])operator(,) ident(p) operator(=) ident(Selector)operator(.)ident(patterns)operator(,)
            ident(x) operator(=) ident(Selector)operator(.)ident(xpath)operator(,) ident(le)operator(,) ident(v)operator(;)

        keyword(var) ident(exclusion) operator(=) operator([)operator(])operator(;)
        keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
          ident(le) operator(=) ident(e)operator(;)
          keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(p)operator(\)) operator({)
            keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator([)ident(i)operator(]\)\)) operator({)
              ident(v) operator(=) ident(Object)operator(.)ident(isFunction)operator(()ident(x)operator([)ident(i)operator(]\)) operator(?) ident(x)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:) keyword(new) ident(Template)operator(()ident(x)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
              ident(exclusion)operator(.)ident(push)operator(()string<delimiter(")content(()delimiter(")> operator(+) ident(v)operator(.)ident(substring)operator(()integer(1)operator(,) ident(v)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+) string<delimiter(")content(\))delimiter(")>operator(\))operator(;)
              ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
              keyword(break)operator(;)
            operator(})
          operator(})
        operator(})
        keyword(return) string<delimiter(")content([not()delimiter(")> operator(+) ident(exclusion)operator(.)ident(join)operator(()string<delimiter(")content( and )delimiter(")>operator(\)) operator(+) string<delimiter(")content(\)])delimiter(")>operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-child)delimiter(')>operator(:)      keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((count(./preceding-sibling::*\) + 1\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-last-child)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((count(./following-sibling::*\) + 1\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-of-type)delimiter(')>operator(:)    keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content(position(\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-last-of-type)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((last(\) + 1 - position(\)\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(first-of-type)delimiter(')>operator(:)  keyword(function)operator(()ident(m)operator(\)) operator({)
        ident(m)operator([)integer(6)operator(]) operator(=) string<delimiter(")content(1)delimiter(")>operator(;) keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)string<delimiter(')content(nth-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(last-of-type)delimiter(')>operator(:)   keyword(function)operator(()ident(m)operator(\)) operator({)
        ident(m)operator([)integer(6)operator(]) operator(=) string<delimiter(")content(1)delimiter(")>operator(;) keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)string<delimiter(')content(nth-last-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(only-of-type)delimiter(')>operator(:)   keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(var) ident(p) operator(=) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(;) keyword(return) ident(p)operator([)string<delimiter(')content(first-of-type)delimiter(')>operator(])operator(()ident(m)operator(\)) operator(+) ident(p)operator([)string<delimiter(')content(last-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      key(nth)operator(:) keyword(function)operator(()ident(fragment)operator(,) ident(m)operator(\)) operator({)
        keyword(var) ident(mm)operator(,) ident(formula) operator(=) ident(m)operator([)integer(6)operator(])operator(,) ident(predicate)operator(;)
        keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(even)delimiter(')>operator(\)) ident(formula) operator(=) string<delimiter(')content(2n+0)delimiter(')>operator(;)
        keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(odd)delimiter(')>operator(\))  ident(formula) operator(=) string<delimiter(')content(2n+1)delimiter(')>operator(;)
        keyword(if) operator(()ident(mm) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^()char(\\d)content(+\)$)delimiter(/)>operator(\)\)) comment(// digit only)
          keyword(return) string<delimiter(')content([)delimiter(')> operator(+) ident(fragment) operator(+) string<delimiter(")content(= )delimiter(")> operator(+) ident(mm)operator([)integer(1)operator(]) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
        keyword(if) operator(()ident(mm) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^(-?)char(\\d)content(*\)?n(([+-]\)()char(\\d)content(+\)\)?)delimiter(/)>operator(\)\)) operator({) comment(// an+b)
          keyword(if) operator(()ident(mm)operator([)integer(1)operator(]) operator(==) string<delimiter(")content(-)delimiter(")>operator(\)) ident(mm)operator([)integer(1)operator(]) operator(=) operator(-)integer(1)operator(;)
          keyword(var) ident(a) operator(=) ident(mm)operator([)integer(1)operator(]) operator(?) ident(Number)operator(()ident(mm)operator([)integer(1)operator(]\)) operator(:) integer(1)operator(;)
          keyword(var) ident(b) operator(=) ident(mm)operator([)integer(2)operator(]) operator(?) ident(Number)operator(()ident(mm)operator([)integer(2)operator(]\)) operator(:) integer(0)operator(;)
          ident(predicate) operator(=) string<delimiter(")content([((#{fragment} - #{b}\) mod #{a} = 0\) and )delimiter(")> operator(+)
          string<delimiter(")content(((#{fragment} - #{b}\) div #{a} >= 0\)])delimiter(")>operator(;)
          keyword(return) keyword(new) ident(Template)operator(()ident(predicate)operator(\))operator(.)ident(evaluate)operator(({)
            key(fragment)operator(:) ident(fragment)operator(,) key(a)operator(:) ident(a)operator(,) key(b)operator(:) ident(b) operator(}\))operator(;)
        operator(})
      operator(})
    operator(})
  operator(})operator(,)

  key(criteria)operator(:) operator({)
    key(tagName)operator(:)      string<delimiter(')content(n = h.tagName(n, r, "#{1}", c\);   c = false;)delimiter(')>operator(,)
    key(className)operator(:)    string<delimiter(')content(n = h.className(n, r, "#{1}", c\); c = false;)delimiter(')>operator(,)
    key(id)operator(:)           string<delimiter(')content(n = h.id(n, r, "#{1}", c\);        c = false;)delimiter(')>operator(,)
    key(attrPresence)operator(:) string<delimiter(')content(n = h.attrPresence(n, r, "#{1}"\); c = false;)delimiter(')>operator(,)
    key(attr)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(3)operator(]) operator(=) operator(()ident(m)operator([)integer(5)operator(]) operator(||) ident(m)operator([)integer(6)operator(]\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(')content(n = h.attr(n, r, "#{1}", "#{3}", "#{2}"\); c = false;)delimiter(')>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(pseudo)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(if) operator(()ident(m)operator([)integer(6)operator(]\)) ident(m)operator([)integer(6)operator(]) operator(=) ident(m)operator([)integer(6)operator(])operator(.)ident(replace)operator(()regexp<delimiter(/)content(")delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content(")delimiter(')>operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(')content(n = h.pseudo(n, "#{1}", "#{6}", r, c\); c = false;)delimiter(')>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(descendant)operator(:)   string<delimiter(')content(c = "descendant";)delimiter(')>operator(,)
    key(child)operator(:)        string<delimiter(')content(c = "child";)delimiter(')>operator(,)
    key(adjacent)operator(:)     string<delimiter(')content(c = "adjacent";)delimiter(')>operator(,)
    key(laterSibling)operator(:) string<delimiter(')content(c = "laterSibling";)delimiter(')>
  operator(})operator(,)

  key(patterns)operator(:) operator({)
    comment(// combinators must be listed first)
    comment(// (and descendant needs to be last combinator\))
    key(laterSibling)operator(:) regexp<delimiter(/)content(^)char(\\s)content(*~)char(\\s)content(*)delimiter(/)>operator(,)
    key(child)operator(:)        regexp<delimiter(/)content(^)char(\\s)content(*>)char(\\s)content(*)delimiter(/)>operator(,)
    key(adjacent)operator(:)     regexp<delimiter(/)content(^)char(\\s)content(*)content(\\+)char(\\s)content(*)delimiter(/)>operator(,)
    key(descendant)operator(:)   regexp<delimiter(/)content(^)char(\\s)delimiter(/)>operator(,)

    comment(// selectors follow)
    key(tagName)operator(:)      regexp<delimiter(/)content(^)char(\\s)content(*()content(\\*)content(|[)char(\\w)content(\\-)content(]+\)()char(\\b)content(|$\)?)delimiter(/)>operator(,)
    key(id)operator(:)           regexp<delimiter(/)content(^#([)char(\\w)content(\\-)content(\\*)content(]+\)()char(\\b)content(|$\))delimiter(/)>operator(,)
    key(className)operator(:)    regexp<delimiter(/)content(^)content(\\.)content(([)char(\\w)content(\\-)content(\\*)content(]+\)()char(\\b)content(|$\))delimiter(/)>operator(,)
    key(pseudo)operator(:)       regexp<delimiter(/)content(^:((first|last|nth|nth-last|only\)(-child|-of-type\)|empty|checked|(en|dis\)abled|not\)()content(\\()content((.*?\))content(\\\))content(\)?()char(\\b)content(|$|(?=)char(\\s)content(\)|(?=:\)\))delimiter(/)>operator(,)
    key(attrPresence)operator(:) regexp<delimiter(/)content(^)content(\\[)content(([)char(\\w)content(]+\))content(\\])delimiter(/)>operator(,)
    key(attr)operator(:)         regexp<delimiter(/)content(\\[)content(((?:[)char(\\w)content(-]*:\)?[)char(\\w)content(-]+\))char(\\s)content(*(?:([!^$*~|]?=\))char(\\s)content(*((['"]\)([^)char(\\4)content(]*?\))char(\\4)content(|([^'"][^)content(\\])content(]*?\)\)\)?)content(\\])delimiter(/)>
  operator(})operator(,)

  comment(// for Selector.match and Element#match)
  key(assertions)operator(:) operator({)
    key(tagName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(matches)operator([)integer(1)operator(])operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
    operator(})operator(,)

    key(className)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(Element)operator(.)ident(hasClassName)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
    operator(})operator(,)

    key(id)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(element)operator(.)ident(id) operator(===) ident(matches)operator([)integer(1)operator(])operator(;)
    operator(})operator(,)

    key(attrPresence)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(Element)operator(.)ident(hasAttribute)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
    operator(})operator(,)

    key(attr)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(var) ident(nodeValue) operator(=) ident(Element)operator(.)ident(readAttribute)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(operators)operator([)ident(matches)operator([)integer(2)operator(]])operator(()ident(nodeValue)operator(,) ident(matches)operator([)integer(3)operator(]\))operator(;)
    operator(})
  operator(})operator(,)

  key(handlers)operator(:) operator({)
    comment(// UTILITY FUNCTIONS)
    comment(// joins two collections)
    key(concat)operator(:) keyword(function)operator(()ident(a)operator(,) ident(b)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(b)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(a)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(a)operator(;)
    operator(})operator(,)

    comment(// marks an array of nodes for counting)
    key(mark)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(node)operator(.)ident(_counted) operator(=) keyword(true)operator(;)
      keyword(return) ident(nodes)operator(;)
    operator(})operator(,)

    key(unmark)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(node)operator(.)ident(_counted) operator(=) ident(undefined)operator(;)
      keyword(return) ident(nodes)operator(;)
    operator(})operator(,)

    comment(// mark each child node with its position (for nth calls\))
    comment(// "ofType" flag indicates whether we're indexing for nth-of-type)
    comment(// rather than nth-child)
    key(index)operator(:) keyword(function)operator(()ident(parentNode)operator(,) ident(reverse)operator(,) ident(ofType)operator(\)) operator({)
      ident(parentNode)operator(.)ident(_counted) operator(=) keyword(true)operator(;)
      keyword(if) operator(()ident(reverse)operator(\)) operator({)
        keyword(for) operator(()keyword(var) ident(nodes) operator(=) ident(parentNode)operator(.)ident(childNodes)operator(,) ident(i) operator(=) ident(nodes)operator(.)ident(length) operator(-) integer(1)operator(,) ident(j) operator(=) integer(1)operator(;) ident(i) operator(>=) integer(0)operator(;) ident(i)operator(--)operator(\)) operator({)
          keyword(var) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;)
          keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) operator((!)ident(ofType) operator(||) ident(node)operator(.)ident(_counted)operator(\)\)) ident(node)operator(.)ident(nodeIndex) operator(=) ident(j)operator(++;)
        operator(})
      operator(}) keyword(else) operator({)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(j) operator(=) integer(1)operator(,) ident(nodes) operator(=) ident(parentNode)operator(.)ident(childNodes)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) operator((!)ident(ofType) operator(||) ident(node)operator(.)ident(_counted)operator(\)\)) ident(node)operator(.)ident(nodeIndex) operator(=) ident(j)operator(++;)
      operator(})
    operator(})operator(,)

    comment(// filters out duplicates and extends all nodes)
    key(unique)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(if) operator(()ident(nodes)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(return) ident(nodes)operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(n)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(l) operator(=) ident(nodes)operator(.)ident(length)operator(;) ident(i) operator(<) ident(l)operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!()ident(n) operator(=) ident(nodes)operator([)ident(i)operator(]\))operator(.)ident(_counted)operator(\)) operator({)
          ident(n)operator(.)ident(_counted) operator(=) keyword(true)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(n)operator(\)\))operator(;)
        operator(})
      keyword(return) ident(Selector)operator(.)ident(handlers)operator(.)ident(unmark)operator(()ident(results)operator(\))operator(;)
    operator(})operator(,)

    comment(// COMBINATOR FUNCTIONS)
    key(descendant)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(node)operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\)\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(child)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(,) ident(child)operator(;) ident(child) operator(=) ident(node)operator(.)ident(childNodes)operator([)ident(j)operator(])operator(;) ident(j)operator(++)operator(\))
          keyword(if) operator(()ident(child)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) ident(child)operator(.)ident(tagName) operator(!=) string<delimiter(')content(!)delimiter(')>operator(\)) ident(results)operator(.)ident(push)operator(()ident(child)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(adjacent)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(var) ident(next) operator(=) local_variable(this)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\))operator(;)
        keyword(if) operator(()ident(next)operator(\)) ident(results)operator(.)ident(push)operator(()ident(next)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(laterSibling)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(Element)operator(.)ident(nextSiblings)operator(()ident(node)operator(\)\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(nextElementSibling)operator(:) keyword(function)operator(()ident(node)operator(\)) operator({)
      keyword(while) operator(()ident(node) operator(=) ident(node)operator(.)ident(nextSibling)operator(\))
	      keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1)operator(\)) keyword(return) ident(node)operator(;)
      keyword(return) keyword(null)operator(;)
    operator(})operator(,)

    key(previousElementSibling)operator(:) keyword(function)operator(()ident(node)operator(\)) operator({)
      keyword(while) operator(()ident(node) operator(=) ident(node)operator(.)ident(previousSibling)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1)operator(\)) keyword(return) ident(node)operator(;)
      keyword(return) keyword(null)operator(;)
    operator(})operator(,)

    comment(// TOKEN FUNCTIONS)
    key(tagName)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(tagName)operator(,) ident(combinator)operator(\)) operator({)
      ident(tagName) operator(=) ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(if) operator(()ident(nodes)operator(\)) operator({)
        keyword(if) operator(()ident(combinator)operator(\)) operator({)
          comment(// fastlane for ordinary descendant combinators)
          keyword(if) operator(()ident(combinator) operator(==) string<delimiter(")content(descendant)delimiter(")>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(node)operator(.)ident(getElementsByTagName)operator(()ident(tagName)operator(\)\))operator(;)
            keyword(return) ident(results)operator(;)
          operator(}) keyword(else) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
          keyword(if) operator(()ident(tagName) operator(==) string<delimiter(")content(*)delimiter(")>operator(\)) keyword(return) ident(nodes)operator(;)
        operator(})
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) ident(tagName)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
        keyword(return) ident(results)operator(;)
      operator(}) keyword(else) keyword(return) ident(root)operator(.)ident(getElementsByTagName)operator(()ident(tagName)operator(\))operator(;)
    operator(})operator(,)

    key(id)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(id)operator(,) ident(combinator)operator(\)) operator({)
      keyword(var) ident(targetNode) operator(=) predefined($)operator(()ident(id)operator(\))operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(if) operator((!)ident(targetNode)operator(\)) keyword(return) operator([)operator(])operator(;)
      keyword(if) operator((!)ident(nodes) operator(&&) ident(root) operator(==) ident(document)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
      keyword(if) operator(()ident(nodes)operator(\)) operator({)
        keyword(if) operator(()ident(combinator)operator(\)) operator({)
          keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(child)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(targetNode)operator(.)ident(parentNode) operator(==) ident(node)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(descendant)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(Element)operator(.)ident(descendantOf)operator(()ident(targetNode)operator(,) ident(node)operator(\)\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(adjacent)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(targetNode)operator(\)) operator(==) ident(node)operator(\))
                keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) ident(nodes) operator(=) ident(h)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
        operator(})
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node) operator(==) ident(targetNode)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
        keyword(return) operator([)operator(])operator(;)
      operator(})
      keyword(return) operator(()ident(targetNode) operator(&&) ident(Element)operator(.)ident(descendantOf)operator(()ident(targetNode)operator(,) ident(root)operator(\)\)) operator(?) operator([)ident(targetNode)operator(]) operator(:) operator([)operator(])operator(;)
    operator(})operator(,)

    key(className)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(handlers)operator(.)ident(byClassName)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(\))operator(;)
    operator(})operator(,)

    key(byClassName)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(Selector)operator(.)ident(handlers)operator(.)ident(descendant)operator(([)ident(root)operator(]\))operator(;)
      keyword(var) ident(needle) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(,) ident(nodeClassName)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        ident(nodeClassName) operator(=) ident(node)operator(.)ident(className)operator(;)
        keyword(if) operator(()ident(nodeClassName)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(continue)operator(;)
        keyword(if) operator(()ident(nodeClassName) operator(==) ident(className) operator(||) operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(nodeClassName) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(include)operator(()ident(needle)operator(\)\))
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(attrPresence)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(attr)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(Element)operator(.)ident(hasAttribute)operator(()ident(node)operator(,) ident(attr)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(attr)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(attr)operator(,) ident(value)operator(,) ident(operator)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(var) ident(handler) operator(=) ident(Selector)operator(.)ident(operators)operator([)ident(operator)operator(])operator(,) ident(results) operator(=) operator([)operator(])operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(var) ident(nodeValue) operator(=) ident(Element)operator(.)ident(readAttribute)operator(()ident(node)operator(,) ident(attr)operator(\))operator(;)
        keyword(if) operator(()ident(nodeValue) operator(===) keyword(null)operator(\)) keyword(continue)operator(;)
        keyword(if) operator(()ident(handler)operator(()ident(nodeValue)operator(,) ident(value)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key(pseudo)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(name)operator(,) ident(value)operator(,) ident(root)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator([)ident(name)operator(])operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(pseudos)operator(:) operator({)
    key<delimiter(')content(first-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(node)operator(\)\)) keyword(continue)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(last-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\)\)) keyword(continue)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(only-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(h)operator(.)ident(previousElementSibling)operator(()ident(node)operator(\)) operator(&&) operator(!)ident(h)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\)\))
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-child)delimiter(')>operator(:)        keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-last-child)delimiter(')>operator(:)   keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) keyword(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-of-type)delimiter(')>operator(:)      keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) keyword(false)operator(,) keyword(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-last-of-type)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) keyword(true)operator(,) keyword(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(first-of-type)delimiter(')>operator(:)    keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) string<delimiter(")content(1)delimiter(")>operator(,) ident(root)operator(,) keyword(false)operator(,) keyword(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(last-of-type)delimiter(')>operator(:)     keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) string<delimiter(")content(1)delimiter(")>operator(,) ident(root)operator(,) keyword(true)operator(,) keyword(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(only-of-type)delimiter(')>operator(:)     keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(p) operator(=) ident(Selector)operator(.)ident(pseudos)operator(;)
      keyword(return) ident(p)operator([)string<delimiter(')content(last-of-type)delimiter(')>operator(])operator(()ident(p)operator([)string<delimiter(')content(first-of-type)delimiter(')>operator(])operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\))operator(,) ident(formula)operator(,) ident(root)operator(\))operator(;)
    operator(})operator(,)

    comment(// handles the an+b logic)
    key(getIndices)operator(:) keyword(function)operator(()ident(a)operator(,) ident(b)operator(,) ident(total)operator(\)) operator({)
      keyword(if) operator(()ident(a) operator(==) integer(0)operator(\)) keyword(return) ident(b) operator(>) integer(0) operator(?) operator([)ident(b)operator(]) operator(:) operator([)operator(])operator(;)
      keyword(return) predefined($R)operator(()integer(1)operator(,) ident(total)operator(\))operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(memo)operator(,) ident(i)operator(\)) operator({)
        keyword(if) operator(()integer(0) operator(==) operator(()ident(i) operator(-) ident(b)operator(\)) operator(%) ident(a) operator(&&) operator(()ident(i) operator(-) ident(b)operator(\)) operator(/) ident(a) operator(>=) integer(0)operator(\)) ident(memo)operator(.)ident(push)operator(()ident(i)operator(\))operator(;)
        keyword(return) ident(memo)operator(;)
      operator(}\))operator(;)
    operator(})operator(,)

    comment(// handles nth(-last\)-child, nth(-last\)-of-type, and (first|last\)-of-type)
    key(nth)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) ident(reverse)operator(,) ident(ofType)operator(\)) operator({)
      keyword(if) operator(()ident(nodes)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(return) operator([)operator(])operator(;)
      keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(even)delimiter(')>operator(\)) ident(formula) operator(=) string<delimiter(')content(2n+0)delimiter(')>operator(;)
      keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(odd)delimiter(')>operator(\))  ident(formula) operator(=) string<delimiter(')content(2n+1)delimiter(')>operator(;)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(indexed) operator(=) operator([)operator(])operator(,) ident(m)operator(;)
      ident(h)operator(.)ident(mark)operator(()ident(nodes)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator((!)ident(node)operator(.)ident(parentNode)operator(.)ident(_counted)operator(\)) operator({)
          ident(h)operator(.)ident(index)operator(()ident(node)operator(.)ident(parentNode)operator(,) ident(reverse)operator(,) ident(ofType)operator(\))operator(;)
          ident(indexed)operator(.)ident(push)operator(()ident(node)operator(.)ident(parentNode)operator(\))operator(;)
        operator(})
      operator(})
      keyword(if) operator(()ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\d)content(+$)delimiter(/)>operator(\)\)) operator({) comment(// just a number)
        ident(formula) operator(=) ident(Number)operator(()ident(formula)operator(\))operator(;)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(nodeIndex) operator(==) ident(formula)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(m) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^(-?)char(\\d)content(*\)?n(([+-]\)()char(\\d)content(+\)\)?)delimiter(/)>operator(\)\)) operator({) comment(// an+b)
        keyword(if) operator(()ident(m)operator([)integer(1)operator(]) operator(==) string<delimiter(")content(-)delimiter(")>operator(\)) ident(m)operator([)integer(1)operator(]) operator(=) operator(-)integer(1)operator(;)
        keyword(var) ident(a) operator(=) ident(m)operator([)integer(1)operator(]) operator(?) ident(Number)operator(()ident(m)operator([)integer(1)operator(]\)) operator(:) integer(1)operator(;)
        keyword(var) ident(b) operator(=) ident(m)operator([)integer(2)operator(]) operator(?) ident(Number)operator(()ident(m)operator([)integer(2)operator(]\)) operator(:) integer(0)operator(;)
        keyword(var) ident(indices) operator(=) ident(Selector)operator(.)ident(pseudos)operator(.)ident(getIndices)operator(()ident(a)operator(,) ident(b)operator(,) ident(nodes)operator(.)ident(length)operator(\))operator(;)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(,) ident(l) operator(=) ident(indices)operator(.)ident(length)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
          keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(;) ident(j) operator(<) ident(l)operator(;) ident(j)operator(++)operator(\))
            keyword(if) operator(()ident(node)operator(.)ident(nodeIndex) operator(==) ident(indices)operator([)ident(j)operator(]\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
        operator(})
      operator(})
      ident(h)operator(.)ident(unmark)operator(()ident(nodes)operator(\))operator(;)
      ident(h)operator(.)ident(unmark)operator(()ident(indexed)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(empty)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        comment(// IE treats comments as element nodes)
        keyword(if) operator(()ident(node)operator(.)ident(tagName) operator(==) string<delimiter(')content(!)delimiter(')> operator(||) operator(()ident(node)operator(.)ident(firstChild) operator(&&) operator(!)ident(node)operator(.)ident(innerHTML)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\s)content(*$)delimiter(/)>operator(\)\)\)) keyword(continue)operator(;)
        ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(not)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(selector)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,) ident(selectorType)operator(,) ident(m)operator(;)
      keyword(var) ident(exclusions) operator(=) keyword(new) ident(Selector)operator(()ident(selector)operator(\))operator(.)ident(findElements)operator(()ident(root)operator(\))operator(;)
      ident(h)operator(.)ident(mark)operator(()ident(exclusions)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(node)operator(.)ident(_counted)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      ident(h)operator(.)ident(unmark)operator(()ident(exclusions)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(enabled)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(node)operator(.)ident(disabled)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(disabled)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(disabled)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(checked)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(checked)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})
  operator(})operator(,)

  key(operators)operator(:) operator({)
    key<delimiter(')content(=)delimiter(')>operator(:)  keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(==) ident(v)operator(;) operator(})operator(,)
    key<delimiter(')content(!=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(!=) ident(v)operator(;) operator(})operator(,)
    key<delimiter(')content(^=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv)operator(.)ident(startsWith)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content($=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv)operator(.)ident(endsWith)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(*=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv)operator(.)ident(include)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(~=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(nv) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(v) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(|=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) operator(()string<delimiter(')content(-)delimiter(')> operator(+) ident(nv)operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) string<delimiter(')content(-)delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content(-)delimiter(')> operator(+) ident(v)operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) string<delimiter(')content(-)delimiter(')>operator(\))operator(;) operator(})
  operator(})operator(,)

  key(matchElements)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(expression)operator(\)) operator({)
    keyword(var) ident(matches) operator(=) keyword(new) ident(Selector)operator(()ident(expression)operator(\))operator(.)ident(findElements)operator(()operator(\))operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
    ident(h)operator(.)ident(mark)operator(()ident(matches)operator(\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(element)operator(;) ident(element) operator(=) ident(elements)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
      keyword(if) operator(()ident(element)operator(.)ident(_counted)operator(\)) ident(results)operator(.)ident(push)operator(()ident(element)operator(\))operator(;)
    ident(h)operator(.)ident(unmark)operator(()ident(matches)operator(\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  key(findElement)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)\)) operator({)
      ident(index) operator(=) ident(expression)operator(;) ident(expression) operator(=) keyword(false)operator(;)
    operator(})
    keyword(return) ident(Selector)operator(.)ident(matchElements)operator(()ident(elements)operator(,) ident(expression) operator(||) string<delimiter(')content(*)delimiter(')>operator(\))operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  key(findChildElements)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expressions)operator(\)) operator({)
    keyword(var) ident(exprs) operator(=) ident(expressions)operator(.)ident(join)operator(()string<delimiter(')content(,)delimiter(')>operator(\))operator(;)
    ident(expressions) operator(=) operator([)operator(])operator(;)
    ident(exprs)operator(.)ident(scan)operator(()regexp<delimiter(/)content((([)char(\\w)content(#:.~>+(\))char(\\s)content(-]+|)content(\\*)content(|)content(\\[)content(.*?)content(\\])content(\)+\))char(\\s)content(*(,|$\))delimiter(/)>operator(,) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(expressions)operator(.)ident(push)operator(()ident(m)operator([)integer(1)operator(])operator(.)ident(strip)operator(()operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(l) operator(=) ident(expressions)operator(.)ident(length)operator(,) ident(selector)operator(;) ident(i) operator(<) ident(l)operator(;) ident(i)operator(++)operator(\)) operator({)
      ident(selector) operator(=) keyword(new) ident(Selector)operator(()ident(expressions)operator([)ident(i)operator(])operator(.)ident(strip)operator(()operator(\)\))operator(;)
      ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(selector)operator(.)ident(findElements)operator(()ident(element)operator(\)\))operator(;)
    operator(})
    keyword(return) operator(()ident(l) operator(>) integer(1)operator(\)) operator(?) ident(h)operator(.)ident(unique)operator(()ident(results)operator(\)) operator(:) ident(results)operator(;)
  operator(})
operator(}\))operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
  comment(// IE returns comment nodes on getElementsByTagName("*"\).)
  comment(// Filter them out.)
  ident(Selector)operator(.)ident(handlers)operator(.)ident(concat) operator(=) keyword(function)operator(()ident(a)operator(,) ident(b)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(b)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
      keyword(if) operator(()ident(node)operator(.)ident(tagName) operator(!==) string<delimiter(")content(!)delimiter(")>operator(\)) ident(a)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
    keyword(return) ident(a)operator(;)
  operator(})operator(;)
operator(})

keyword(function) predefined($$)operator(()operator(\)) operator({)
  keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(document)operator(,) predefined($A)operator(()local_variable(arguments)operator(\)\))operator(;)
operator(})
keyword(var) ident(Form) operator(=) operator({)
  key(reset)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    predefined($)operator(()ident(form)operator(\))operator(.)ident(reset)operator(()operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  key(serializeElements)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(options)operator(\)) operator({)
    keyword(if) operator(()keyword(typeof) ident(options) operator(!=) string<delimiter(')content(object)delimiter(')>operator(\)) ident(options) operator(=) operator({) key(hash)operator(:) operator(!!)ident(options) operator(})operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(options)operator(.)ident(hash)operator(\)\)) ident(options)operator(.)ident(hash) operator(=) keyword(true)operator(;)
    keyword(var) ident(key)operator(,) ident(value)operator(,) ident(submitted) operator(=) keyword(false)operator(,) ident(submit) operator(=) ident(options)operator(.)ident(submit)operator(;)

    keyword(var) ident(data) operator(=) ident(elements)operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(result)operator(,) ident(element)operator(\)) operator({)
      keyword(if) operator((!)ident(element)operator(.)ident(disabled) operator(&&) ident(element)operator(.)ident(name)operator(\)) operator({)
        ident(key) operator(=) ident(element)operator(.)ident(name)operator(;) ident(value) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getValue)operator(()operator(\))operator(;)
        keyword(if) operator(()ident(value) operator(!=) keyword(null) operator(&&) operator(()ident(element)operator(.)ident(type) operator(!=) string<delimiter(')content(submit)delimiter(')> operator(||) operator((!)ident(submitted) operator(&&)
            ident(submit) operator(!==) keyword(false) operator(&&) operator((!)ident(submit) operator(||) ident(key) operator(==) ident(submit)operator(\)) operator(&&) operator(()ident(submitted) operator(=) keyword(true)operator(\)\)\)\)) operator({)
          keyword(if) operator(()ident(key) keyword(in) ident(result)operator(\)) operator({)
            comment(// a key is already present; construct an array of values)
            keyword(if) operator((!)ident(Object)operator(.)ident(isArray)operator(()ident(result)operator([)ident(key)operator(]\)\)) ident(result)operator([)ident(key)operator(]) operator(=) operator([)ident(result)operator([)ident(key)operator(]])operator(;)
            ident(result)operator([)ident(key)operator(])operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
          operator(})
          keyword(else) ident(result)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
        operator(})
      operator(})
      keyword(return) ident(result)operator(;)
    operator(}\))operator(;)

    keyword(return) ident(options)operator(.)ident(hash) operator(?) ident(data) operator(:) ident(Object)operator(.)ident(toQueryString)operator(()ident(data)operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Form)operator(.)ident(Methods) operator(=) operator({)
  key(serialize)operator(:) keyword(function)operator(()ident(form)operator(,) ident(options)operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serializeElements)operator(()ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  key(getElements)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    keyword(return) predefined($A)operator(()predefined($)operator(()ident(form)operator(\))operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\)\))operator(.)ident(inject)operator(([)operator(])operator(,)
      keyword(function)operator(()ident(elements)operator(,) ident(child)operator(\)) operator({)
        keyword(if) operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(child)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)]\))
          ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(child)operator(\)\))operator(;)
        keyword(return) ident(elements)operator(;)
      operator(})
    operator(\))operator(;)
  operator(})operator(,)

  key(getInputs)operator(:) keyword(function)operator(()ident(form)operator(,) ident(typeName)operator(,) ident(name)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    keyword(var) ident(inputs) operator(=) ident(form)operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(input)delimiter(')>operator(\))operator(;)

    keyword(if) operator((!)ident(typeName) operator(&&) operator(!)ident(name)operator(\)) keyword(return) predefined($A)operator(()ident(inputs)operator(\))operator(.)ident(map)operator(()ident(Element)operator(.)ident(extend)operator(\))operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(matchingInputs) operator(=) operator([)operator(])operator(,) ident(length) operator(=) ident(inputs)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(input) operator(=) ident(inputs)operator([)ident(i)operator(])operator(;)
      keyword(if) operator((()ident(typeName) operator(&&) ident(input)operator(.)ident(type) operator(!=) ident(typeName)operator(\)) operator(||) operator(()ident(name) operator(&&) ident(input)operator(.)ident(name) operator(!=) ident(name)operator(\)\))
        keyword(continue)operator(;)
      ident(matchingInputs)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(input)operator(\)\))operator(;)
    operator(})

    keyword(return) ident(matchingInputs)operator(;)
  operator(})operator(,)

  key(disable)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(.)ident(invoke)operator(()string<delimiter(')content(disable)delimiter(')>operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  key(enable)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(.)ident(invoke)operator(()string<delimiter(')content(enable)delimiter(')>operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  key(findFirstElement)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    keyword(var) ident(elements) operator(=) predefined($)operator(()ident(form)operator(\))operator(.)ident(getElements)operator(()operator(\))operator(.)ident(findAll)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) string<delimiter(')content(hidden)delimiter(')> operator(!=) ident(element)operator(.)ident(type) operator(&&) operator(!)ident(element)operator(.)ident(disabled)operator(;)
    operator(}\))operator(;)
    keyword(var) ident(firstByIndex) operator(=) ident(elements)operator(.)ident(findAll)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) ident(element)operator(.)ident(hasAttribute)operator(()string<delimiter(')content(tabIndex)delimiter(')>operator(\)) operator(&&) ident(element)operator(.)ident(tabIndex) operator(>=) integer(0)operator(;)
    operator(}\))operator(.)ident(sortBy)operator(()keyword(function)operator(()ident(element)operator(\)) operator({) keyword(return) ident(element)operator(.)ident(tabIndex) operator(}\))operator(.)ident(first)operator(()operator(\))operator(;)

    keyword(return) ident(firstByIndex) operator(?) ident(firstByIndex) operator(:) ident(elements)operator(.)ident(find)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) operator([)string<delimiter(')content(input)delimiter(')>operator(,) string<delimiter(')content(select)delimiter(')>operator(,) string<delimiter(')content(textarea)delimiter(')>operator(])operator(.)ident(include)operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  key(focusFirstElement)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(form)operator(.)ident(findFirstElement)operator(()operator(\))operator(.)ident(activate)operator(()operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  key(request)operator(:) keyword(function)operator(()ident(form)operator(,) ident(options)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(,) ident(options) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(options) operator(||) operator({) operator(}\))operator(;)

    keyword(var) ident(params) operator(=) ident(options)operator(.)ident(parameters)operator(,) ident(action) operator(=) ident(form)operator(.)ident(readAttribute)operator(()string<delimiter(')content(action)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(;)
    keyword(if) operator(()ident(action)operator(.)ident(blank)operator(()operator(\)\)) ident(action) operator(=) ident(window)operator(.)ident(location)operator(.)ident(href)operator(;)
    ident(options)operator(.)ident(parameters) operator(=) ident(form)operator(.)ident(serialize)operator(()keyword(true)operator(\))operator(;)

    keyword(if) operator(()ident(params)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(params)operator(\)\)) ident(params) operator(=) ident(params)operator(.)ident(toQueryParams)operator(()operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(options)operator(.)ident(parameters)operator(,) ident(params)operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(form)operator(.)ident(hasAttribute)operator(()string<delimiter(')content(method)delimiter(')>operator(\)) operator(&&) operator(!)ident(options)operator(.)ident(method)operator(\))
      ident(options)operator(.)ident(method) operator(=) ident(form)operator(.)ident(method)operator(;)

    keyword(return) keyword(new) ident(Ajax)operator(.)ident(Request)operator(()ident(action)operator(,) ident(options)operator(\))operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Form)operator(.)ident(Element) operator(=) operator({)
  key(focus)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(focus)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(select)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(select)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(Methods) operator(=) operator({)
  key(serialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(disabled) operator(&&) ident(element)operator(.)ident(name)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(element)operator(.)ident(getValue)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(value) operator(!=) ident(undefined)operator(\)) operator({)
        keyword(var) ident(pair) operator(=) operator({) operator(})operator(;)
        ident(pair)operator([)ident(element)operator(.)ident(name)operator(]) operator(=) ident(value)operator(;)
        keyword(return) ident(Object)operator(.)ident(toQueryString)operator(()ident(pair)operator(\))operator(;)
      operator(})
    operator(})
    keyword(return) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  key(getValue)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(method) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(method)operator(])operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(setValue)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(method) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(method)operator(])operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(clear)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(value) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(present)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(value) operator(!=) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  key(activate)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(try) operator({)
      ident(element)operator(.)ident(focus)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(element)operator(.)ident(select) operator(&&) operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)) operator(!=) string<delimiter(')content(input)delimiter(')> operator(||)
          operator(![)string<delimiter(')content(button)delimiter(')>operator(,) string<delimiter(')content(reset)delimiter(')>operator(,) string<delimiter(')content(submit)delimiter(')>operator(])operator(.)ident(include)operator(()ident(element)operator(.)ident(type)operator(\)\)\))
        ident(element)operator(.)ident(select)operator(()operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(disable)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(blur)operator(()operator(\))operator(;)
    ident(element)operator(.)ident(disabled) operator(=) keyword(true)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  key(enable)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(disabled) operator(=) keyword(false)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(Field) operator(=) ident(Form)operator(.)ident(Element)operator(;)
keyword(var) predefined($F) operator(=) ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(.)ident(getValue)operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Form)operator(.)ident(Element)operator(.)ident(Serializers) operator(=) operator({)
  key(input)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(switch) operator(()ident(element)operator(.)ident(type)operator(.)ident(toLowerCase)operator(()operator(\)\)) operator({)
      keyword(case) string<delimiter(')content(checkbox)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(radio)delimiter(')>operator(:)
        keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator(.)ident(inputSelector)operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
      keyword(default)operator(:)
        keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator(.)ident(textarea)operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(inputSelector)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(element)operator(.)ident(checked) operator(?) ident(element)operator(.)ident(value) operator(:) keyword(null)operator(;)
    keyword(else) ident(element)operator(.)ident(checked) operator(=) operator(!!)ident(value)operator(;)
  operator(})operator(,)

  key(textarea)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(element)operator(.)ident(value)operator(;)
    keyword(else) ident(element)operator(.)ident(value) operator(=) ident(value)operator(;)
  operator(})operator(,)

  key(select)operator(:) keyword(function)operator(()ident(element)operator(,) ident(index)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(index)operator(\)\))
      keyword(return) local_variable(this)operator([)ident(element)operator(.)ident(type) operator(==) string<delimiter(')content(select-one)delimiter(')> operator(?)
        string<delimiter(')content(selectOne)delimiter(')> operator(:) string<delimiter(')content(selectMany)delimiter(')>operator(])operator(()ident(element)operator(\))operator(;)
    keyword(else) operator({)
      keyword(var) ident(opt)operator(,) ident(value)operator(,) ident(single) operator(=) operator(!)ident(Object)operator(.)ident(isArray)operator(()ident(index)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(element)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
        ident(opt) operator(=) ident(element)operator(.)ident(options)operator([)ident(i)operator(])operator(;)
        ident(value) operator(=) local_variable(this)operator(.)ident(optionValue)operator(()ident(opt)operator(\))operator(;)
        keyword(if) operator(()ident(single)operator(\)) operator({)
          keyword(if) operator(()ident(value) operator(==) ident(index)operator(\)) operator({)
            ident(opt)operator(.)ident(selected) operator(=) keyword(true)operator(;)
            keyword(return)operator(;)
          operator(})
        operator(})
        keyword(else) ident(opt)operator(.)ident(selected) operator(=) ident(index)operator(.)ident(include)operator(()ident(value)operator(\))operator(;)
      operator(})
    operator(})
  operator(})operator(,)

  key(selectOne)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(index) operator(=) ident(element)operator(.)ident(selectedIndex)operator(;)
    keyword(return) ident(index) operator(>=) integer(0) operator(?) local_variable(this)operator(.)ident(optionValue)operator(()ident(element)operator(.)ident(options)operator([)ident(index)operator(]\)) operator(:) keyword(null)operator(;)
  operator(})operator(,)

  key(selectMany)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(values)operator(,) ident(length) operator(=) ident(element)operator(.)ident(length)operator(;)
    keyword(if) operator((!)ident(length)operator(\)) keyword(return) keyword(null)operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(values) operator(=) operator([)operator(])operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(opt) operator(=) ident(element)operator(.)ident(options)operator([)ident(i)operator(])operator(;)
      keyword(if) operator(()ident(opt)operator(.)ident(selected)operator(\)) ident(values)operator(.)ident(push)operator(()local_variable(this)operator(.)ident(optionValue)operator(()ident(opt)operator(\)\))operator(;)
    operator(})
    keyword(return) ident(values)operator(;)
  operator(})operator(,)

  key(optionValue)operator(:) keyword(function)operator(()ident(opt)operator(\)) operator({)
    comment(// extend element because hasAttribute may not be native)
    keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(opt)operator(\))operator(.)ident(hasAttribute)operator(()string<delimiter(')content(value)delimiter(')>operator(\)) operator(?) ident(opt)operator(.)ident(value) operator(:) ident(opt)operator(.)ident(text)operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Abstract)operator(.)ident(TimedObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(PeriodicalExecuter)operator(,) operator({)
  key(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(element)operator(,) ident(frequency)operator(,) ident(callback)operator(\)) operator({)
    predefined($super)operator(()ident(callback)operator(,) ident(frequency)operator(\))operator(;)
    local_variable(this)operator(.)ident(element)   operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(lastValue) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
  operator(})operator(,)

  key(execute)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(lastValue)operator(\)) operator(&&) ident(Object)operator(.)ident(isString)operator(()ident(value)operator(\)) operator(?)
        local_variable(this)operator(.)ident(lastValue) operator(!=) ident(value) operator(:) ident(String)operator(()local_variable(this)operator(.)ident(lastValue)operator(\)) operator(!=) ident(String)operator(()ident(value)operator(\)\)) operator({)
      local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(value)operator(\))operator(;)
      local_variable(this)operator(.)ident(lastValue) operator(=) ident(value)operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(Observer) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(TimedObserver)operator(,) operator({)
  key(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(getValue)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Observer) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(TimedObserver)operator(,) operator({)
  key(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Abstract)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(callback)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)  operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(callback) operator(=) ident(callback)operator(;)

    local_variable(this)operator(.)ident(lastValue) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)) operator(==) string<delimiter(')content(form)delimiter(')>operator(\))
      local_variable(this)operator(.)ident(registerFormCallbacks)operator(()operator(\))operator(;)
    keyword(else)
      local_variable(this)operator(.)ident(registerCallback)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(onElementEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(lastValue) operator(!=) ident(value)operator(\)) operator({)
      local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(value)operator(\))operator(;)
      local_variable(this)operator(.)ident(lastValue) operator(=) ident(value)operator(;)
    operator(})
  operator(})operator(,)

  key(registerFormCallbacks)operator(:) keyword(function)operator(()operator(\)) operator({)
    ident(Form)operator(.)ident(getElements)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(.)ident(each)operator(()local_variable(this)operator(.)ident(registerCallback)operator(,) local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  key(registerCallback)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(type)operator(\)) operator({)
      keyword(switch) operator(()ident(element)operator(.)ident(type)operator(.)ident(toLowerCase)operator(()operator(\)\)) operator({)
        keyword(case) string<delimiter(')content(checkbox)delimiter(')>operator(:)
        keyword(case) string<delimiter(')content(radio)delimiter(')>operator(:)
          ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(')content(click)delimiter(')>operator(,) local_variable(this)operator(.)ident(onElementEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
          keyword(break)operator(;)
        keyword(default)operator(:)
          ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(')content(change)delimiter(')>operator(,) local_variable(this)operator(.)ident(onElementEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
          keyword(break)operator(;)
      operator(})
    operator(})
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(EventObserver)operator(,) operator({)
  key(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(getValue)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(EventObserver)operator(,) operator({)
  key(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)
keyword(if) operator((!)ident(window)operator(.)ident(Event)operator(\)) keyword(var) ident(Event) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) operator({)
  key(KEY_BACKSPACE)operator(:) integer(8)operator(,)
  key(KEY_TAB)operator(:)       integer(9)operator(,)
  key(KEY_RETURN)operator(:)   integer(13)operator(,)
  key(KEY_ESC)operator(:)      integer(27)operator(,)
  key(KEY_LEFT)operator(:)     integer(37)operator(,)
  key(KEY_UP)operator(:)       integer(38)operator(,)
  key(KEY_RIGHT)operator(:)    integer(39)operator(,)
  key(KEY_DOWN)operator(:)     integer(40)operator(,)
  key(KEY_DELETE)operator(:)   integer(46)operator(,)
  key(KEY_HOME)operator(:)     integer(36)operator(,)
  key(KEY_END)operator(:)      integer(35)operator(,)
  key(KEY_PAGEUP)operator(:)   integer(33)operator(,)
  key(KEY_PAGEDOWN)operator(:) integer(34)operator(,)
  key(KEY_INSERT)operator(:)   integer(45)operator(,)

  key(cache)operator(:) operator({) operator(})operator(,)

  key(relatedTarget)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(var) ident(element)operator(;)
    keyword(switch)operator(()ident(event)operator(.)ident(type)operator(\)) operator({)
      keyword(case) string<delimiter(')content(mouseover)delimiter(')>operator(:) ident(element) operator(=) ident(event)operator(.)ident(fromElement)operator(;) keyword(break)operator(;)
      keyword(case) string<delimiter(')content(mouseout)delimiter(')>operator(:)  ident(element) operator(=) ident(event)operator(.)ident(toElement)operator(;)   keyword(break)operator(;)
      keyword(default)operator(:) keyword(return) keyword(null)operator(;)
    operator(})
    keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Event)operator(.)ident(Methods) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(isButton)operator(;)

  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
    keyword(var) ident(buttonMap) operator(=) operator({) integer(0)operator(:) integer(1)operator(,) integer(1)operator(:) integer(4)operator(,) integer(2)operator(:) integer(2) operator(})operator(;)
    ident(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(return) ident(event)operator(.)ident(button) operator(==) ident(buttonMap)operator([)ident(code)operator(])operator(;)
    operator(})operator(;)

  operator(}) keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
    ident(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(switch) operator(()ident(code)operator(\)) operator({)
        keyword(case) integer(0)operator(:) keyword(return) ident(event)operator(.)ident(which) operator(==) integer(1) operator(&&) operator(!)ident(event)operator(.)ident(metaKey)operator(;)
        keyword(case) integer(1)operator(:) keyword(return) ident(event)operator(.)ident(which) operator(==) integer(1) operator(&&) ident(event)operator(.)ident(metaKey)operator(;)
        keyword(default)operator(:) keyword(return) keyword(false)operator(;)
      operator(})
    operator(})operator(;)

  operator(}) keyword(else) operator({)
    ident(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(return) ident(event)operator(.)ident(which) operator(?) operator(()ident(event)operator(.)ident(which) operator(===) ident(code) operator(+) integer(1)operator(\)) operator(:) operator(()ident(event)operator(.)ident(button) operator(===) ident(code)operator(\))operator(;)
    operator(})operator(;)
  operator(})

  keyword(return) operator({)
    key(isLeftClick)operator(:)   keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(0)operator(\)) operator(})operator(,)
    key(isMiddleClick)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(1)operator(\)) operator(})operator(,)
    key(isRightClick)operator(:)  keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(2)operator(\)) operator(})operator(,)

    key(element)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(var) ident(node) operator(=) ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(.)ident(target)operator(;)
      keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(node)operator(.)ident(nodeType) operator(==) ident(Node)operator(.)ident(TEXT_NODE) operator(?) ident(node)operator(.)ident(parentNode) operator(:) ident(node)operator(\))operator(;)
    operator(})operator(,)

    key(findElement)operator(:) keyword(function)operator(()ident(event)operator(,) ident(expression)operator(\)) operator({)
      keyword(var) ident(element) operator(=) ident(Event)operator(.)ident(element)operator(()ident(event)operator(\))operator(;)
      keyword(if) operator((!)ident(expression)operator(\)) keyword(return) ident(element)operator(;)
      keyword(var) ident(elements) operator(=) operator([)ident(element)operator(])operator(.)ident(concat)operator(()ident(element)operator(.)ident(ancestors)operator(()operator(\)\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(findElement)operator(()ident(elements)operator(,) ident(expression)operator(,) integer(0)operator(\))operator(;)
    operator(})operator(,)

    key(pointer)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(return) operator({)
        key(x)operator(:) ident(event)operator(.)ident(pageX) operator(||) operator(()ident(event)operator(.)ident(clientX) operator(+)
          operator(()ident(document)operator(.)ident(documentElement)operator(.)ident(scrollLeft) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollLeft)operator(\)\))operator(,)
        key(y)operator(:) ident(event)operator(.)ident(pageY) operator(||) operator(()ident(event)operator(.)ident(clientY) operator(+)
          operator(()ident(document)operator(.)ident(documentElement)operator(.)ident(scrollTop) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollTop)operator(\)\))
      operator(})operator(;)
    operator(})operator(,)

    key(pointerX)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(.)ident(x) operator(})operator(,)
    key(pointerY)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(.)ident(y) operator(})operator(,)

    key(stop)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
      ident(event)operator(.)ident(preventDefault)operator(()operator(\))operator(;)
      ident(event)operator(.)ident(stopPropagation)operator(()operator(\))operator(;)
      ident(event)operator(.)ident(stopped) operator(=) keyword(true)operator(;)
    operator(})
  operator(})operator(;)
operator(}\))operator(()operator(\))operator(;)

ident(Event)operator(.)ident(extend) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(methods) operator(=) ident(Object)operator(.)ident(keys)operator(()ident(Event)operator(.)ident(Methods)operator(\))operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(m)operator(,) ident(name)operator(\)) operator({)
    ident(m)operator([)ident(name)operator(]) operator(=) ident(Event)operator(.)ident(Methods)operator([)ident(name)operator(])operator(.)ident(methodize)operator(()operator(\))operator(;)
    keyword(return) ident(m)operator(;)
  operator(}\))operator(;)

  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(methods)operator(,) operator({)
      key(stopPropagation)operator(:) keyword(function)operator(()operator(\)) operator({) local_variable(this)operator(.)ident(cancelBubble) operator(=) keyword(true) operator(})operator(,)
      key(preventDefault)operator(:)  keyword(function)operator(()operator(\)) operator({) local_variable(this)operator(.)ident(returnValue) operator(=) keyword(false) operator(})operator(,)
      key(inspect)operator(:) keyword(function)operator(()operator(\)) operator({) keyword(return) string<delimiter(")content([object Event])delimiter(")> operator(})
    operator(}\))operator(;)

    keyword(return) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(if) operator((!)ident(event)operator(\)) keyword(return) keyword(false)operator(;)
      keyword(if) operator(()ident(event)operator(.)ident(_extendedByPrototype)operator(\)) keyword(return) ident(event)operator(;)

      ident(event)operator(.)ident(_extendedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
      keyword(var) ident(pointer) operator(=) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(event)operator(,) operator({)
        key(target)operator(:) ident(event)operator(.)ident(srcElement)operator(,)
        key(relatedTarget)operator(:) ident(Event)operator(.)ident(relatedTarget)operator(()ident(event)operator(\))operator(,)
        key(pageX)operator(:)  ident(pointer)operator(.)ident(x)operator(,)
        key(pageY)operator(:)  ident(pointer)operator(.)ident(y)
      operator(}\))operator(;)
      keyword(return) ident(Object)operator(.)ident(extend)operator(()ident(event)operator(,) ident(methods)operator(\))operator(;)
    operator(})operator(;)

  operator(}) keyword(else) operator({)
    ident(Event)operator(.)ident(prototype) operator(=) ident(Event)operator(.)ident(prototype) operator(||) ident(document)operator(.)ident(createEvent)operator(()string<delimiter(")content(HTMLEvents)delimiter(")>operator(\))operator(.)ident(__proto__)operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(.)ident(prototype)operator(,) ident(methods)operator(\))operator(;)
    keyword(return) ident(Prototype)operator(.)ident(K)operator(;)
  operator(})
operator(}\))operator(()operator(\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(cache) operator(=) ident(Event)operator(.)ident(cache)operator(;)

  keyword(function) ident(getEventID)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(_eventID)operator(\)) keyword(return) ident(element)operator(.)ident(_eventID)operator(;)
    local_variable(arguments)operator(.)ident(callee)operator(.)ident(id) operator(=) local_variable(arguments)operator(.)ident(callee)operator(.)ident(id) operator(||) integer(1)operator(;)
    keyword(return) ident(element)operator(.)ident(_eventID) operator(=) operator(++)local_variable(arguments)operator(.)ident(callee)operator(.)ident(id)operator(;)
  operator(})

  keyword(function) ident(getDOMEventName)operator(()ident(eventName)operator(\)) operator({)
    keyword(if) operator(()ident(eventName) operator(&&) ident(eventName)operator(.)ident(include)operator(()string<delimiter(')content(:)delimiter(')>operator(\)\)) keyword(return) string<delimiter(")content(dataavailable)delimiter(")>operator(;)
    keyword(return) ident(eventName)operator(;)
  operator(})

  keyword(function) ident(getCacheForID)operator(()ident(id)operator(\)) operator({)
    keyword(return) ident(cache)operator([)ident(id)operator(]) operator(=) ident(cache)operator([)ident(id)operator(]) operator(||) operator({) operator(})operator(;)
  operator(})

  keyword(function) ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getCacheForID)operator(()ident(id)operator(\))operator(;)
    keyword(return) ident(c)operator([)ident(eventName)operator(]) operator(=) ident(c)operator([)ident(eventName)operator(]) operator(||) operator([)operator(])operator(;)
  operator(})

  keyword(function) ident(createWrapper)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(id) operator(=) ident(getEventID)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(c) operator(=) ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(;)
    keyword(if) operator(()ident(c)operator(.)ident(pluck)operator(()string<delimiter(")content(handler)delimiter(")>operator(\))operator(.)ident(include)operator(()ident(handler)operator(\)\)) keyword(return) keyword(false)operator(;)

    keyword(var) ident(wrapper) operator(=) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(if) operator((!)ident(Event) operator(||) operator(!)ident(Event)operator(.)ident(extend) operator(||)
        operator(()ident(event)operator(.)ident(eventName) operator(&&) ident(event)operator(.)ident(eventName) operator(!=) ident(eventName)operator(\)\))
          keyword(return) keyword(false)operator(;)

      ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
      ident(handler)operator(.)ident(call)operator(()ident(element)operator(,) ident(event)operator(\))
    operator(})operator(;)

    ident(wrapper)operator(.)ident(handler) operator(=) ident(handler)operator(;)
    ident(c)operator(.)ident(push)operator(()ident(wrapper)operator(\))operator(;)
    keyword(return) ident(wrapper)operator(;)
  operator(})

  keyword(function) ident(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(;)
    keyword(return) ident(c)operator(.)ident(find)operator(()keyword(function)operator(()ident(wrapper)operator(\)) operator({) keyword(return) ident(wrapper)operator(.)ident(handler) operator(==) ident(handler) operator(}\))operator(;)
  operator(})

  keyword(function) ident(destroyWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getCacheForID)operator(()ident(id)operator(\))operator(;)
    keyword(if) operator((!)ident(c)operator([)ident(eventName)operator(]\)) keyword(return) keyword(false)operator(;)
    ident(c)operator([)ident(eventName)operator(]) operator(=) ident(c)operator([)ident(eventName)operator(])operator(.)ident(without)operator(()ident(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)\))operator(;)
  operator(})

  keyword(function) ident(destroyCache)operator(()operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(id) keyword(in) ident(cache)operator(\))
      keyword(for) operator(()keyword(var) ident(eventName) keyword(in) ident(cache)operator([)ident(id)operator(]\))
        ident(cache)operator([)ident(id)operator(])operator([)ident(eventName)operator(]) operator(=) keyword(null)operator(;)
  operator(})

  keyword(if) operator(()ident(window)operator(.)ident(attachEvent)operator(\)) operator({)
    ident(window)operator(.)ident(attachEvent)operator(()string<delimiter(")content(onunload)delimiter(")>operator(,) ident(destroyCache)operator(\))operator(;)
  operator(})

  keyword(return) operator({)
    key(observe)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(var) ident(name) operator(=) ident(getDOMEventName)operator(()ident(eventName)operator(\))operator(;)

      keyword(var) ident(wrapper) operator(=) ident(createWrapper)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)
      keyword(if) operator((!)ident(wrapper)operator(\)) keyword(return) ident(element)operator(;)

      keyword(if) operator(()ident(element)operator(.)ident(addEventListener)operator(\)) operator({)
        ident(element)operator(.)ident(addEventListener)operator(()ident(name)operator(,) ident(wrapper)operator(,) keyword(false)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(attachEvent)operator(()string<delimiter(")content(on)delimiter(")> operator(+) ident(name)operator(,) ident(wrapper)operator(\))operator(;)
      operator(})

      keyword(return) ident(element)operator(;)
    operator(})operator(,)

    key(stopObserving)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(var) ident(id) operator(=) ident(getEventID)operator(()ident(element)operator(\))operator(,) ident(name) operator(=) ident(getDOMEventName)operator(()ident(eventName)operator(\))operator(;)

      keyword(if) operator((!)ident(handler) operator(&&) ident(eventName)operator(\)) operator({)
        ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(wrapper)operator(\)) operator({)
          ident(element)operator(.)ident(stopObserving)operator(()ident(eventName)operator(,) ident(wrapper)operator(.)ident(handler)operator(\))operator(;)
        operator(}\))operator(;)
        keyword(return) ident(element)operator(;)

      operator(}) keyword(else) keyword(if) operator((!)ident(eventName)operator(\)) operator({)
        ident(Object)operator(.)ident(keys)operator(()ident(getCacheForID)operator(()ident(id)operator(\)\))operator(.)ident(each)operator(()keyword(function)operator(()ident(eventName)operator(\)) operator({)
          ident(element)operator(.)ident(stopObserving)operator(()ident(eventName)operator(\))operator(;)
        operator(}\))operator(;)
        keyword(return) ident(element)operator(;)
      operator(})

      keyword(var) ident(wrapper) operator(=) ident(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)
      keyword(if) operator((!)ident(wrapper)operator(\)) keyword(return) ident(element)operator(;)

      keyword(if) operator(()ident(element)operator(.)ident(removeEventListener)operator(\)) operator({)
        ident(element)operator(.)ident(removeEventListener)operator(()ident(name)operator(,) ident(wrapper)operator(,) keyword(false)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(detachEvent)operator(()string<delimiter(")content(on)delimiter(")> operator(+) ident(name)operator(,) ident(wrapper)operator(\))operator(;)
      operator(})

      ident(destroyWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)

      keyword(return) ident(element)operator(;)
    operator(})operator(,)

    key(fire)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(memo)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(if) operator(()ident(element) operator(==) ident(document) operator(&&) ident(document)operator(.)ident(createEvent) operator(&&) operator(!)ident(element)operator(.)ident(dispatchEvent)operator(\))
        ident(element) operator(=) ident(document)operator(.)ident(documentElement)operator(;)

      keyword(if) operator(()ident(document)operator(.)ident(createEvent)operator(\)) operator({)
        keyword(var) ident(event) operator(=) ident(document)operator(.)ident(createEvent)operator(()string<delimiter(")content(HTMLEvents)delimiter(")>operator(\))operator(;)
        ident(event)operator(.)ident(initEvent)operator(()string<delimiter(")content(dataavailable)delimiter(")>operator(,) keyword(true)operator(,) keyword(true)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        keyword(var) ident(event) operator(=) ident(document)operator(.)ident(createEventObject)operator(()operator(\))operator(;)
        ident(event)operator(.)ident(eventType) operator(=) string<delimiter(")content(ondataavailable)delimiter(")>operator(;)
      operator(})

      ident(event)operator(.)ident(eventName) operator(=) ident(eventName)operator(;)
      ident(event)operator(.)ident(memo) operator(=) ident(memo) operator(||) operator({) operator(})operator(;)

      keyword(if) operator(()ident(document)operator(.)ident(createEvent)operator(\)) operator({)
        ident(element)operator(.)ident(dispatchEvent)operator(()ident(event)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(fireEvent)operator(()ident(event)operator(.)ident(eventType)operator(,) ident(event)operator(\))operator(;)
      operator(})

      keyword(return) ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
    operator(})
  operator(})operator(;)
operator(}\))operator(()operator(\)\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) ident(Event)operator(.)ident(Methods)operator(\))operator(;)

ident(Element)operator(.)ident(addMethods)operator(({)
  key(fire)operator(:)          ident(Event)operator(.)ident(fire)operator(,)
  key(observe)operator(:)       ident(Event)operator(.)ident(observe)operator(,)
  key(stopObserving)operator(:) ident(Event)operator(.)ident(stopObserving)
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(document)operator(,) operator({)
  key(fire)operator(:)          ident(Element)operator(.)ident(Methods)operator(.)ident(fire)operator(.)ident(methodize)operator(()operator(\))operator(,)
  key(observe)operator(:)       ident(Element)operator(.)ident(Methods)operator(.)ident(observe)operator(.)ident(methodize)operator(()operator(\))operator(,)
  key(stopObserving)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(stopObserving)operator(.)ident(methodize)operator(()operator(\))
operator(}\))operator(;)

operator(()keyword(function)operator(()operator(\)) operator({)
  comment(/* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards and John Resig. */)

  keyword(var) ident(timer)operator(,) ident(fired) operator(=) keyword(false)operator(;)

  keyword(function) ident(fireContentLoadedEvent)operator(()operator(\)) operator({)
    keyword(if) operator(()ident(fired)operator(\)) keyword(return)operator(;)
    keyword(if) operator(()ident(timer)operator(\)) ident(window)operator(.)ident(clearInterval)operator(()ident(timer)operator(\))operator(;)
    ident(document)operator(.)ident(fire)operator(()string<delimiter(")content(dom:loaded)delimiter(")>operator(\))operator(;)
    ident(fired) operator(=) keyword(true)operator(;)
  operator(})

  keyword(if) operator(()ident(document)operator(.)ident(addEventListener)operator(\)) operator({)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
      ident(timer) operator(=) ident(window)operator(.)ident(setInterval)operator(()keyword(function)operator(()operator(\)) operator({)
        keyword(if) operator(()regexp<delimiter(/)content(loaded|complete)delimiter(/)>operator(.)ident(test)operator(()ident(document)operator(.)ident(readyState)operator(\)\))
          ident(fireContentLoadedEvent)operator(()operator(\))operator(;)
      operator(})operator(,) integer(0)operator(\))operator(;)

      ident(Event)operator(.)ident(observe)operator(()ident(window)operator(,) string<delimiter(")content(load)delimiter(")>operator(,) ident(fireContentLoadedEvent)operator(\))operator(;)

    operator(}) keyword(else) operator({)
      ident(document)operator(.)ident(addEventListener)operator(()string<delimiter(")content(DOMContentLoaded)delimiter(")>operator(,)
        ident(fireContentLoadedEvent)operator(,) keyword(false)operator(\))operator(;)
    operator(})

  operator(}) keyword(else) operator({)
    ident(document)operator(.)ident(write)operator(()string<delimiter(")content(<script id=__onDOMContentLoaded defer src=//:><)content(\\/)content(script>)delimiter(")>operator(\))operator(;)
    predefined($)operator(()string<delimiter(")content(__onDOMContentLoaded)delimiter(")>operator(\))operator(.)ident(onreadystatechange) operator(=) keyword(function)operator(()operator(\)) operator({)
      keyword(if) operator(()local_variable(this)operator(.)ident(readyState) operator(==) string<delimiter(")content(complete)delimiter(")>operator(\)) operator({)
        local_variable(this)operator(.)ident(onreadystatechange) operator(=) keyword(null)operator(;)
        ident(fireContentLoadedEvent)operator(()operator(\))operator(;)
      operator(})
    operator(})operator(;)
  operator(})
operator(}\))operator(()operator(\))operator(;)
comment(/*------------------------------- DEPRECATED -------------------------------*/)

ident(Hash)operator(.)ident(toQueryString) operator(=) ident(Object)operator(.)ident(toQueryString)operator(;)

keyword(var) ident(Toggle) operator(=) operator({) key(display)operator(:) ident(Element)operator(.)ident(toggle) operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(childOf) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(descendantOf)operator(;)

keyword(var) ident(Insertion) operator(=) operator({)
  key(Before)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(before)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  key(Top)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(top)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  key(Bottom)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(bottom)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  key(After)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(after)operator(:)ident(content)operator(}\))operator(;)
  operator(})
operator(})operator(;)

keyword(var) predefined($continue) operator(=) keyword(new) ident(Error)operator(()string<delimiter(')content("throw $continue" is deprecated, use "return" instead)delimiter(')>operator(\))operator(;)

comment(// This should be moved to script.aculo.us; notice the deprecated methods)
comment(// further below, that map to the newer Element methods.)
keyword(var) ident(Position) operator(=) operator({)
  comment(// set to true if needed, warning: firefox performance problems)
  comment(// NOT neeeded for page scrolling, only if draggable contained in)
  comment(// scrollable elements)
  key(includeScrollOffsets)operator(:) keyword(false)operator(,)

  comment(// must be called before calling withinIncludingScrolloffset, every time the)
  comment(// page is scrolled)
  key(prepare)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(deltaX) operator(=)  ident(window)operator(.)ident(pageXOffset)
                operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollLeft)
                operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollLeft)
                operator(||) integer(0)operator(;)
    local_variable(this)operator(.)ident(deltaY) operator(=)  ident(window)operator(.)ident(pageYOffset)
                operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollTop)
                operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollTop)
                operator(||) integer(0)operator(;)
  operator(})operator(,)

  comment(// caches x/y coordinate pair to use with overlap)
  key(within)operator(:) keyword(function)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(includeScrollOffsets)operator(\))
      keyword(return) local_variable(this)operator(.)ident(withinIncludingScrolloffsets)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\))operator(;)
    local_variable(this)operator(.)ident(xcomp) operator(=) ident(x)operator(;)
    local_variable(this)operator(.)ident(ycomp) operator(=) ident(y)operator(;)
    local_variable(this)operator(.)ident(offset) operator(=) ident(Element)operator(.)ident(cumulativeOffset)operator(()ident(element)operator(\))operator(;)

    keyword(return) operator(()ident(y) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(&&)
            ident(y) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight) operator(&&)
            ident(x) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(&&)
            ident(x) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\))operator(;)
  operator(})operator(,)

  key(withinIncludingScrolloffsets)operator(:) keyword(function)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\)) operator({)
    keyword(var) ident(offsetcache) operator(=) ident(Element)operator(.)ident(cumulativeScrollOffset)operator(()ident(element)operator(\))operator(;)

    local_variable(this)operator(.)ident(xcomp) operator(=) ident(x) operator(+) ident(offsetcache)operator([)integer(0)operator(]) operator(-) local_variable(this)operator(.)ident(deltaX)operator(;)
    local_variable(this)operator(.)ident(ycomp) operator(=) ident(y) operator(+) ident(offsetcache)operator([)integer(1)operator(]) operator(-) local_variable(this)operator(.)ident(deltaY)operator(;)
    local_variable(this)operator(.)ident(offset) operator(=) ident(Element)operator(.)ident(cumulativeOffset)operator(()ident(element)operator(\))operator(;)

    keyword(return) operator(()local_variable(this)operator(.)ident(ycomp) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(&&)
            local_variable(this)operator(.)ident(ycomp) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight) operator(&&)
            local_variable(this)operator(.)ident(xcomp) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(&&)
            local_variable(this)operator(.)ident(xcomp) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\))operator(;)
  operator(})operator(,)

  comment(// within must be called directly before)
  key(overlap)operator(:) keyword(function)operator(()ident(mode)operator(,) ident(element)operator(\)) operator({)
    keyword(if) operator((!)ident(mode)operator(\)) keyword(return) integer(0)operator(;)
    keyword(if) operator(()ident(mode) operator(==) string<delimiter(')content(vertical)delimiter(')>operator(\))
      keyword(return) operator((()local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight)operator(\)) operator(-) local_variable(this)operator(.)ident(ycomp)operator(\)) operator(/)
        ident(element)operator(.)ident(offsetHeight)operator(;)
    keyword(if) operator(()ident(mode) operator(==) string<delimiter(')content(horizontal)delimiter(')>operator(\))
      keyword(return) operator((()local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\)) operator(-) local_variable(this)operator(.)ident(xcomp)operator(\)) operator(/)
        ident(element)operator(.)ident(offsetWidth)operator(;)
  operator(})operator(,)

  comment(// Deprecation layer -- use newer Element methods now (1.5.2\).)

  key(cumulativeOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeOffset)operator(,)

  key(positionedOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(positionedOffset)operator(,)

  key(absolutize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(absolutize)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(relativize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(relativize)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(realOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeScrollOffset)operator(,)

  key(offsetParent)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(getOffsetParent)operator(,)

  key(page)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(viewportOffset)operator(,)

  key(clone)operator(:) keyword(function)operator(()ident(source)operator(,) ident(target)operator(,) ident(options)operator(\)) operator({)
    ident(options) operator(=) ident(options) operator(||) operator({) operator(})operator(;)
    keyword(return) ident(Element)operator(.)ident(clonePosition)operator(()ident(target)operator(,) ident(source)operator(,) ident(options)operator(\))operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(if) operator((!)ident(document)operator(.)ident(getElementsByClassName)operator(\)) ident(document)operator(.)ident(getElementsByClassName) operator(=) keyword(function)operator(()ident(instanceMethods)operator(\))operator({)
  keyword(function) ident(iter)operator(()ident(name)operator(\)) operator({)
    keyword(return) ident(name)operator(.)ident(blank)operator(()operator(\)) operator(?) keyword(null) operator(:) string<delimiter(")content([contains(concat(' ', @class, ' '\), ' )delimiter(")> operator(+) ident(name) operator(+) string<delimiter(")content( '\)])delimiter(")>operator(;)
  operator(})

  ident(instanceMethods)operator(.)ident(getElementsByClassName) operator(=) ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath) operator(?)
  keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    ident(className) operator(=) ident(className)operator(.)ident(toString)operator(()operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(var) ident(cond) operator(=) regexp<delimiter(/)char(\\s)delimiter(/)>operator(.)ident(test)operator(()ident(className)operator(\)) operator(?) predefined($w)operator(()ident(className)operator(\))operator(.)ident(map)operator(()ident(iter)operator(\))operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\)) operator(:) ident(iter)operator(()ident(className)operator(\))operator(;)
    keyword(return) ident(cond) operator(?) ident(document)operator(.)ident(_getElementsByXPath)operator(()string<delimiter(')content(.//*)delimiter(')> operator(+) ident(cond)operator(,) ident(element)operator(\)) operator(:) operator([)operator(])operator(;)
  operator(}) operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    ident(className) operator(=) ident(className)operator(.)ident(toString)operator(()operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(var) ident(elements) operator(=) operator([)operator(])operator(,) ident(classNames) operator(=) operator(()regexp<delimiter(/)char(\\s)delimiter(/)>operator(.)ident(test)operator(()ident(className)operator(\)) operator(?) predefined($w)operator(()ident(className)operator(\)) operator(:) keyword(null)operator(\))operator(;)
    keyword(if) operator((!)ident(classNames) operator(&&) operator(!)ident(className)operator(\)) keyword(return) ident(elements)operator(;)

    keyword(var) ident(nodes) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\))operator(;)
    ident(className) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(child)operator(,) ident(cn)operator(;) ident(child) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(if) operator(()ident(child)operator(.)ident(className) operator(&&) operator(()ident(cn) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(child)operator(.)ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(\)) operator(&&) operator(()ident(cn)operator(.)ident(include)operator(()ident(className)operator(\)) operator(||)
          operator(()ident(classNames) operator(&&) ident(classNames)operator(.)ident(all)operator(()keyword(function)operator(()ident(name)operator(\)) operator({)
            keyword(return) operator(!)ident(name)operator(.)ident(toString)operator(()operator(\))operator(.)ident(blank)operator(()operator(\)) operator(&&) ident(cn)operator(.)ident(include)operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(name) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(;)
          operator(}\)\)\)\))
        ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(child)operator(\)\))operator(;)
    operator(})
    keyword(return) ident(elements)operator(;)
  operator(})operator(;)

  keyword(return) keyword(function)operator(()ident(className)operator(,) ident(parentElement)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(parentElement) operator(||) ident(document)operator(.)ident(body)operator(\))operator(.)ident(getElementsByClassName)operator(()ident(className)operator(\))operator(;)
  operator(})operator(;)
operator(})operator(()ident(Element)operator(.)ident(Methods)operator(\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Element)operator(.)ident(ClassNames) operator(=) ident(Class)operator(.)ident(create)operator(()operator(\))operator(;)
ident(Element)operator(.)ident(ClassNames)operator(.)ident(prototype) operator(=) operator({)
  key(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(className)operator(.)ident(split)operator(()regexp<delimiter(/)char(\\s)content(+)delimiter(/)>operator(\))operator(.)ident(select)operator(()keyword(function)operator(()ident(name)operator(\)) operator({)
      keyword(return) ident(name)operator(.)ident(length) operator(>) integer(0)operator(;)
    operator(}\))operator(.)ident(_each)operator(()ident(iterator)operator(\))operator(;)
  operator(})operator(,)

  key(set)operator(:) keyword(function)operator(()ident(className)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(className) operator(=) ident(className)operator(;)
  operator(})operator(,)

  key(add)operator(:) keyword(function)operator(()ident(classNameToAdd)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(include)operator(()ident(classNameToAdd)operator(\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(set)operator(()predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(concat)operator(()ident(classNameToAdd)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\)\))operator(;)
  operator(})operator(,)

  key(remove)operator(:) keyword(function)operator(()ident(classNameToRemove)operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(include)operator(()ident(classNameToRemove)operator(\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(set)operator(()predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(without)operator(()ident(classNameToRemove)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\)\))operator(;)
  operator(})operator(,)

  key(toString)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(ClassNames)operator(.)ident(prototype)operator(,) ident(Enumerable)operator(\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Element)operator(.)ident(addMethods)operator(()operator(\))operator(;)