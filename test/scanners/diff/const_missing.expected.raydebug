head[head(Index: )plain(error.c)]
head[head(===================================================================)]
head[head(--- )plain(error.c	(revision 26674\))]
head[head(+++ )plain(error.c	(working copy\))]
change[change(@@)plain( -402,4 +402,6 )change(@@)plain( VALUE rb_eSyntaxError;)]
comment( VALUE rb_eLoadError;)
comment( )
insert[insert(+)plain(VALUE rb_eNoConstantError;)]
insert[insert(+)]
comment( VALUE rb_eSystemCallError;)
comment( VALUE rb_mErrno;)
change[change(@@)plain( -1143,4 +1145,5 )change(@@)plain( Init_Exception(void\))]
comment(     rb_define_method(rb_eNoMethodError, "initialize", nometh_err_initialize, -1\);)
comment(     rb_define_method(rb_eNoMethodError, "args", nometh_err_args, 0\);)
insert[insert(+)plain(    rb_eNoConstantError = rb_define_class("NoConstantError", rb_eNameError\);)]
comment( )
comment(     rb_eRuntimeError = rb_define_class("RuntimeError", rb_eStandardError\);)
head[head(Index: )plain(variable.c)]
head[head(===================================================================)]
head[head(--- )plain(variable.c	(revision 26674\))]
head[head(+++ )plain(variable.c	(working copy\))]
change[change(@@)plain( -1356,7 +1356,29 )change(@@)plain( uninitialized_constant(VALUE klass, ID i)]
comment( )
comment( static VALUE)
insert[insert(+)plain(const_missing_call(VALUE arg\))]
insert[insert(+)plain({)]
insert[insert(+)plain(    VALUE *args = (VALUE *\)arg;)]
insert[insert(+)plain(    ID const_missing_id;)]
insert[insert(+)plain(    CONST_ID(const_missing_id, "const_missing"\);)]
insert[insert(+)plain(    return rb_check_funcall(args[0], const_missing_id, 1, &args[1]\);)]
insert[insert(+)plain(})]
insert[insert(+)]
insert[insert(+)plain(static VALUE)]
insert[insert(+)plain(const_missing_rescue(VALUE arg, VALUE errinfo\))]
insert[insert(+)plain({)]
insert[insert(+)plain(    return arg;)]
insert[insert(+)plain(})]
insert[insert(+)]
insert[insert(+)plain(extern VALUE rb_eNoConstantError;)]
insert[insert(+)]
insert[insert(+)plain(static VALUE)]
comment( const_missing(VALUE klass, ID id\))
comment( {)
delete[delete(-)plain(    return rb_funcall(klass, rb_intern("const_missing"\), 1, ID2SYM(id\)\);)]
insert[insert(+)plain(    VALUE args[2];)]
insert[insert(+)plain(    args[0] = klass;)]
insert[insert(+)plain(    args[1] = ID2SYM(id\);)]
insert[insert(+)plain(    return rb_rescue2(const_missing_call, (VALUE\)args,)]
insert[insert(+)plain(		      const_missing_rescue, (VALUE\)Qundef,)]
insert[insert(+)plain(		      rb_eNoConstantError, (VALUE\)0\);)]
comment( })
comment( )
change[change(@@)plain( -1598,5 +1620,21 )change(@@)plain( rb_const_get_0(VALUE klass, ID id, int e)]
comment(     })
comment( )
delete[delete(-)plain(    value = const_missing(klass, id\);)]
insert[insert(+)plain(    if ((value = const_missing(tmp, id\)\) == Qundef\) {)]
insert[insert(+)plain(	NODE *rb_vm_cref(void\);)]
insert[insert(+)plain(	NODE *cref = rb_vm_cref(\);)]
insert[insert(+)plain(	while (cref && cref->nd_next &&)]
insert[insert(+)plain(	       ((cref->flags & NODE_FL_CREF_PUSHED_BY_EVAL\) ||)]
insert[insert(+)plain(		NIL_P(tmp = cref->nd_clss\) ||)]
insert[insert(+)plain(		(value = const_missing(tmp, id\)\) == Qundef\)\) {)]
insert[insert(+)plain(	    cref = cref->nd_next;)]
insert[insert(+)plain(	})]
insert[insert(+)plain(	if (value == Qundef\) {)]
insert[insert(+)plain(	    if (!exclude && BUILTIN_TYPE(klass\) == T_MODULE &&)]
insert[insert(+)plain(		(value = const_missing(rb_cObject, id\)\) == Qundef\) {)]
insert[insert(+)plain(		uninitialized_constant(klass, id\);)]
insert[insert(+)plain(	    })]
insert[insert(+)plain(	})]
insert[insert(+)plain(    })]
insert[insert(+)]
comment(     rb_vm_inc_const_missing_count(\);)
comment(     return value;)
