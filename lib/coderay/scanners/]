module CodeRay
module Scanners

  class Liquid < Scanner
    
    register_for :liquid
   
    KEYWORDS = %w[ list endlist for endfor wrap endwrap if endif unless endunless elsif assign cycle capture endcapture fill iflist endiflist else ]

    KEYWORDS_REGEX = /(
      list|
      endlist|
      for|
      endfor|
      wrap|
      endwrap|
      if|
      endif|
      unless|
      endunless|
      elsif|
      assign|
      cycle|
      capture|
      end|
      capture|
      fill|
      iflist|
      endiflist|
      else
    )/

    LIQUID_DIRECTIVE_BLOCK = /
      ({%\s)
      (.*?)
      (\s%})
    /mx  # :nodoc:

    def setup
      #@liquid_scanner = Scanners[:liquid].new(keep_tokens: true, keep_state: true)
    end

    def scan_tokens(encoder, options)
      until eos?
   
        if match = scan(/ \s+ /x)
          encoder.text_token match, :space
        elsif match = scan(/#{LIQUID_DIRECTIVE_BLOCK}/)
           start_tag =  self[1]
           directive = self[2]
           end_tag = self[3]
           raise start_tag

           encoder.begin_group :directive
           encoder.text_token start_tag, :delimiter
             
           encoder.text_token end_tag, :delimiter
           encoder.end_group :directive
        else
          raise 'else case reached!'
        end
      end
      encoder
    end
  end
end
end
